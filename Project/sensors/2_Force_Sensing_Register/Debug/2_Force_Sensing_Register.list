
2_Force_Sensing_Register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003564  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800371c  0800371c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800371c  0800371c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800371c  0800371c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000070  08003794  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08003794  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000932c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf1  00000000  00000000  000293c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0002b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bcf  00000000  00000000  0002bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009614  00000000  00000000  00043b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872dd  00000000  00000000  0004d183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4460  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002334  00000000  00000000  000d44b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003658 	.word	0x08003658

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003658 	.word	0x08003658

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <SendUnsignedNumber>:
#include "Uart.h"
void SendUnsignedNumber(uint32_t number,UART_HandleTypeDef _huart)
{
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	f107 001c 	add.w	r0, r7, #28
 8000666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t l = sprintf(uartBuffer,"%lu",number);
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	490a      	ldr	r1, [pc, #40]	; (8000698 <SendUnsignedNumber+0x40>)
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <SendUnsignedNumber+0x44>)
 8000670:	f002 fbb8 	bl	8002de4 <siprintf>
 8000674:	4603      	mov	r3, r0
 8000676:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *)uartBuffer, l, 500);
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	b29a      	uxth	r2, r3
 800067c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000680:	4906      	ldr	r1, [pc, #24]	; (800069c <SendUnsignedNumber+0x44>)
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <SendUnsignedNumber+0x48>)
 8000684:	f002 fa11 	bl	8002aaa <HAL_UART_Transmit>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000692:	b004      	add	sp, #16
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	08003670 	.word	0x08003670
 800069c:	20000118 	.word	0x20000118
 80006a0:	20000098 	.word	0x20000098

080006a4 <SendConstChar>:
void SendConstChar(const char* constChar,UART_HandleTypeDef _huart)
{
 80006a4:	b084      	sub	sp, #16
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	f107 0014 	add.w	r0, r7, #20
 80006b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_UART_Transmit(&_huart,(uint8_t *)constChar,strlen((const char*)constChar),200);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff fd48 	bl	800014c <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f107 0014 	add.w	r0, r7, #20
 80006c4:	23c8      	movs	r3, #200	; 0xc8
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f002 f9ef 	bl	8002aaa <HAL_UART_Transmit>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d6:	b004      	add	sp, #16
 80006d8:	4770      	bx	lr
	...

080006dc <SendFloat>:
void SendFloat(float num,UART_HandleTypeDef _huart)
{
 80006dc:	b084      	sub	sp, #16
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80006ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint16_t intPart = (uint16_t)num;
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff ff92 	bl	8000618 <__aeabi_f2uiz>
 80006f4:	4603      	mov	r3, r0
 80006f6:	82fb      	strh	r3, [r7, #22]
	float  decPart  = (float )num - intPart;
 80006f8:	8afb      	ldrh	r3, [r7, #22]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fde8 	bl	80002d0 <__aeabi_i2f>
 8000700:	4603      	mov	r3, r0
 8000702:	4619      	mov	r1, r3
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff fd2d 	bl	8000164 <__aeabi_fsub>
 800070a:	4603      	mov	r3, r0
 800070c:	613b      	str	r3, [r7, #16]
	uint16_t decPart2 = (decPart*100)/10;
 800070e:	4915      	ldr	r1, [pc, #84]	; (8000764 <SendFloat+0x88>)
 8000710:	6938      	ldr	r0, [r7, #16]
 8000712:	f7ff fe31 	bl	8000378 <__aeabi_fmul>
 8000716:	4603      	mov	r3, r0
 8000718:	4913      	ldr	r1, [pc, #76]	; (8000768 <SendFloat+0x8c>)
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fee0 	bl	80004e0 <__aeabi_fdiv>
 8000720:	4603      	mov	r3, r0
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff78 	bl	8000618 <__aeabi_f2uiz>
 8000728:	4603      	mov	r3, r0
 800072a:	81fb      	strh	r3, [r7, #14]
	sprintf(uartBuffer,"%d.%d",intPart,decPart2);
 800072c:	8afa      	ldrh	r2, [r7, #22]
 800072e:	89fb      	ldrh	r3, [r7, #14]
 8000730:	490e      	ldr	r1, [pc, #56]	; (800076c <SendFloat+0x90>)
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <SendFloat+0x94>)
 8000734:	f002 fb56 	bl	8002de4 <siprintf>
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, sprintf(uartBuffer,"%d.%d",intPart,decPart2), 400);
 8000738:	8afa      	ldrh	r2, [r7, #22]
 800073a:	89fb      	ldrh	r3, [r7, #14]
 800073c:	490b      	ldr	r1, [pc, #44]	; (800076c <SendFloat+0x90>)
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <SendFloat+0x94>)
 8000740:	f002 fb50 	bl	8002de4 <siprintf>
 8000744:	4603      	mov	r3, r0
 8000746:	b29a      	uxth	r2, r3
 8000748:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800074c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000750:	4907      	ldr	r1, [pc, #28]	; (8000770 <SendFloat+0x94>)
 8000752:	f002 f9aa 	bl	8002aaa <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000760:	b004      	add	sp, #16
 8000762:	4770      	bx	lr
 8000764:	42c80000 	.word	0x42c80000
 8000768:	41200000 	.word	0x41200000
 800076c:	08003674 	.word	0x08003674
 8000770:	20000118 	.word	0x20000118

08000774 <voltageAccrossR>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float voltageAccrossR(uint16_t _adc) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	80fb      	strh	r3, [r7, #6]
	return _adc * VCC / 4096;
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fda5 	bl	80002d0 <__aeabi_i2f>
 8000786:	4603      	mov	r3, r0
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <voltageAccrossR+0x34>)
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fdf4 	bl	8000378 <__aeabi_fmul>
 8000790:	4603      	mov	r3, r0
 8000792:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fea2 	bl	80004e0 <__aeabi_fdiv>
 800079c:	4603      	mov	r3, r0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40533333 	.word	0x40533333

080007ac <ResistanceFSR>:
float ResistanceFSR(uint16_t _adc) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Vref = (Rref*VCC)/( Rref+Rhsr)
	 * => Rhsr = (Rref*VCC)/Vref- Rref =  _adc*VCC/4096/
	 * */
	if (_adc)
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00f      	beq.n	80007dc <ResistanceFSR+0x30>
		return (VCC * Rref) / voltageAccrossR(_adc) - Rref;
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffd8 	bl	8000774 <voltageAccrossR>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4619      	mov	r1, r3
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <ResistanceFSR+0x3c>)
 80007ca:	f7ff fe89 	bl	80004e0 <__aeabi_fdiv>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <ResistanceFSR+0x40>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fcc6 	bl	8000164 <__aeabi_fsub>
 80007d8:	4603      	mov	r3, r0
 80007da:	e001      	b.n	80007e0 <ResistanceFSR+0x34>
	else
		return infinite;
 80007dc:	f04f 0300 	mov.w	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	4700e800 	.word	0x4700e800
 80007ec:	461c4000 	.word	0x461c4000

080007f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f2:	b08f      	sub	sp, #60	; 0x3c
 80007f4:	af0e      	add	r7, sp, #56	; 0x38
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007f6:	f000 fb79 	bl	8000eec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007fa:	f000 f8f3 	bl	80009e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007fe:	f000 f9d3 	bl	8000ba8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000802:	f000 f9b3 	bl	8000b6c <MX_DMA_Init>
	MX_ADC1_Init();
 8000806:	f000 f949 	bl	8000a9c <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800080a:	f000 f985 	bl	8000b18 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) FSR_adc_value, 1);
 800080e:	2201      	movs	r2, #1
 8000810:	496c      	ldr	r1, [pc, #432]	; (80009c4 <main+0x1d4>)
 8000812:	486d      	ldr	r0, [pc, #436]	; (80009c8 <main+0x1d8>)
 8000814:	f000 fcc8 	bl	80011a8 <HAL_ADC_Start_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		SendConstChar("Ref ADC: ", huart1);
 8000818:	4e6c      	ldr	r6, [pc, #432]	; (80009cc <main+0x1dc>)
 800081a:	466d      	mov	r5, sp
 800081c:	f106 040c 	add.w	r4, r6, #12
 8000820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800082a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	602b      	str	r3, [r5, #0]
 8000830:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000834:	4866      	ldr	r0, [pc, #408]	; (80009d0 <main+0x1e0>)
 8000836:	f7ff ff35 	bl	80006a4 <SendConstChar>
		SendUnsignedNumber((uint32_t) FSR_adc_value[0], huart1);
 800083a:	4b62      	ldr	r3, [pc, #392]	; (80009c4 <main+0x1d4>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	469c      	mov	ip, r3
 8000840:	4e62      	ldr	r6, [pc, #392]	; (80009cc <main+0x1dc>)
 8000842:	466d      	mov	r5, sp
 8000844:	f106 040c 	add.w	r4, r6, #12
 8000848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	602b      	str	r3, [r5, #0]
 8000858:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800085c:	4660      	mov	r0, ip
 800085e:	f7ff fefb 	bl	8000658 <SendUnsignedNumber>
		SendConstChar("\n", huart1);
 8000862:	4e5a      	ldr	r6, [pc, #360]	; (80009cc <main+0x1dc>)
 8000864:	466d      	mov	r5, sp
 8000866:	f106 040c 	add.w	r4, r6, #12
 800086a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800086c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800086e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	602b      	str	r3, [r5, #0]
 800087a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800087e:	4855      	ldr	r0, [pc, #340]	; (80009d4 <main+0x1e4>)
 8000880:	f7ff ff10 	bl	80006a4 <SendConstChar>
		SendConstChar("Vref : ", huart1);
 8000884:	4e51      	ldr	r6, [pc, #324]	; (80009cc <main+0x1dc>)
 8000886:	466d      	mov	r5, sp
 8000888:	f106 040c 	add.w	r4, r6, #12
 800088c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800088e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	602b      	str	r3, [r5, #0]
 800089c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80008a0:	484d      	ldr	r0, [pc, #308]	; (80009d8 <main+0x1e8>)
 80008a2:	f7ff feff 	bl	80006a4 <SendConstChar>
		SendFloat(voltageAccrossR((float) FSR_adc_value[0]),huart1);
 80008a6:	4b47      	ldr	r3, [pc, #284]	; (80009c4 <main+0x1d4>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fd0c 	bl	80002c8 <__aeabi_ui2f>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff feb0 	bl	8000618 <__aeabi_f2uiz>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff59 	bl	8000774 <voltageAccrossR>
 80008c2:	4684      	mov	ip, r0
 80008c4:	4e41      	ldr	r6, [pc, #260]	; (80009cc <main+0x1dc>)
 80008c6:	466d      	mov	r5, sp
 80008c8:	f106 040c 	add.w	r4, r6, #12
 80008cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	602b      	str	r3, [r5, #0]
 80008dc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80008e0:	4660      	mov	r0, ip
 80008e2:	f7ff fefb 	bl	80006dc <SendFloat>
		SendConstChar("\n", huart1);
 80008e6:	4e39      	ldr	r6, [pc, #228]	; (80009cc <main+0x1dc>)
 80008e8:	466d      	mov	r5, sp
 80008ea:	f106 040c 	add.w	r4, r6, #12
 80008ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	602b      	str	r3, [r5, #0]
 80008fe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000902:	4834      	ldr	r0, [pc, #208]	; (80009d4 <main+0x1e4>)
 8000904:	f7ff fece 	bl	80006a4 <SendConstChar>
		SendConstChar("FSR Resistance value: ", huart1);
 8000908:	4e30      	ldr	r6, [pc, #192]	; (80009cc <main+0x1dc>)
 800090a:	466d      	mov	r5, sp
 800090c:	f106 040c 	add.w	r4, r6, #12
 8000910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	602b      	str	r3, [r5, #0]
 8000920:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000924:	482d      	ldr	r0, [pc, #180]	; (80009dc <main+0x1ec>)
 8000926:	f7ff febd 	bl	80006a4 <SendConstChar>
		if (FSR_adc_value[0])
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <main+0x1d4>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d020      	beq.n	8000974 <main+0x184>
			SendFloat(ResistanceFSR((float) FSR_adc_value[0]),huart1);
 8000932:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <main+0x1d4>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fcc6 	bl	80002c8 <__aeabi_ui2f>
 800093c:	4603      	mov	r3, r0
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fe6a 	bl	8000618 <__aeabi_f2uiz>
 8000944:	4603      	mov	r3, r0
 8000946:	b29b      	uxth	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff2f 	bl	80007ac <ResistanceFSR>
 800094e:	4684      	mov	ip, r0
 8000950:	4e1e      	ldr	r6, [pc, #120]	; (80009cc <main+0x1dc>)
 8000952:	466d      	mov	r5, sp
 8000954:	f106 040c 	add.w	r4, r6, #12
 8000958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800095a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800095c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800095e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	602b      	str	r3, [r5, #0]
 8000968:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800096c:	4660      	mov	r0, ip
 800096e:	f7ff feb5 	bl	80006dc <SendFloat>
 8000972:	e010      	b.n	8000996 <main+0x1a6>
		else
			SendConstChar(" Infinite value", huart1);
 8000974:	4e15      	ldr	r6, [pc, #84]	; (80009cc <main+0x1dc>)
 8000976:	466d      	mov	r5, sp
 8000978:	f106 040c 	add.w	r4, r6, #12
 800097c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800097e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	602b      	str	r3, [r5, #0]
 800098c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <main+0x1f0>)
 8000992:	f7ff fe87 	bl	80006a4 <SendConstChar>
		SendConstChar("\n", huart1);
 8000996:	4e0d      	ldr	r6, [pc, #52]	; (80009cc <main+0x1dc>)
 8000998:	466d      	mov	r5, sp
 800099a:	f106 040c 	add.w	r4, r6, #12
 800099e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	602b      	str	r3, [r5, #0]
 80009ae:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80009b2:	4808      	ldr	r0, [pc, #32]	; (80009d4 <main+0x1e4>)
 80009b4:	f7ff fe76 	bl	80006a4 <SendConstChar>
		HAL_Delay(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009bc:	f000 faf8 	bl	8000fb0 <HAL_Delay>
		SendConstChar("Ref ADC: ", huart1);
 80009c0:	e72a      	b.n	8000818 <main+0x28>
 80009c2:	bf00      	nop
 80009c4:	2000014c 	.word	0x2000014c
 80009c8:	20000150 	.word	0x20000150
 80009cc:	20000098 	.word	0x20000098
 80009d0:	08003680 	.word	0x08003680
 80009d4:	0800368c 	.word	0x0800368c
 80009d8:	08003690 	.word	0x08003690
 80009dc:	08003698 	.word	0x08003698
 80009e0:	080036b0 	.word	0x080036b0

080009e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ee:	2228      	movs	r2, #40	; 0x28
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 f9ee 	bl	8002dd4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a14:	2301      	movs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a22:	2301      	movs	r3, #1
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a34:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fb18 	bl	8002070 <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x66>
		Error_Handler();
 8000a46:	f000 f8d1 	bl	8000bec <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2102      	movs	r1, #2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fd82 	bl	8002570 <HAL_RCC_ClockConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x92>
		Error_Handler();
 8000a72:	f000 f8bb 	bl	8000bec <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a76:	2302      	movs	r3, #2
 8000a78:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a7e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 ff0e 	bl	80028a4 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xae>
		Error_Handler();
 8000a8e:	f000 f8ad 	bl	8000bec <Error_Handler>
	}
}
 8000a92:	bf00      	nop
 8000a94:	3750      	adds	r7, #80	; 0x50
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_ADC1_Init+0x74>)
 8000aae:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <MX_ADC1_Init+0x78>)
 8000ab0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_ADC1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_ADC1_Init+0x74>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_ADC1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_ADC1_Init+0x74>)
 8000ac6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000aca:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_ADC1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_ADC1_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_ADC1_Init+0x74>)
 8000ada:	f000 fa8d 	bl	8000ff8 <HAL_ADC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000ae4:	f000 f882 	bl	8000bec <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000af0:	2307      	movs	r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_ADC1_Init+0x74>)
 8000afa:	f000 fc4f 	bl	800139c <HAL_ADC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000b04:	f000 f872 	bl	8000bec <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000150 	.word	0x20000150
 8000b14:	40012400 	.word	0x40012400

08000b18 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_USART1_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b50:	f001 ff5e 	bl	8002a10 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000b5a:	f000 f847 	bl	8000bec <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000098 	.word	0x20000098
 8000b68:	40013800 	.word	0x40013800

08000b6c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_DMA_Init+0x38>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <MX_DMA_Init+0x38>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6153      	str	r3, [r2, #20]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_DMA_Init+0x38>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	200b      	movs	r0, #11
 8000b90:	f000 fec5 	bl	800191e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b94:	200b      	movs	r0, #11
 8000b96:	f000 fede 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_GPIO_Init+0x40>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <MX_GPIO_Init+0x40>)
 8000bb4:	f043 0320 	orr.w	r3, r3, #32
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_GPIO_Init+0x40>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0320 	and.w	r3, r3, #32
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_GPIO_Init+0x40>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <MX_GPIO_Init+0x40>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <MX_GPIO_Init+0x40>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	40021000 	.word	0x40021000

08000bec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_MspInit+0x60>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_MspInit+0x60>)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000

08000c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a28      	ldr	r2, [pc, #160]	; (8000d18 <HAL_ADC_MspInit+0xbc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d149      	bne.n	8000d10 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7c:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <HAL_ADC_MspInit+0xc0>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <HAL_ADC_MspInit+0xc0>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <HAL_ADC_MspInit+0xc0>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <HAL_ADC_MspInit+0xc0>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <HAL_ADC_MspInit+0xc0>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <HAL_ADC_MspInit+0xc0>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cac:	2301      	movs	r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4819      	ldr	r0, [pc, #100]	; (8000d20 <HAL_ADC_MspInit+0xc4>)
 8000cbc:	f001 f854 	bl	8001d68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000cc2:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_ADC_MspInit+0xcc>)
 8000cc4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cde:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000cea:	2220      	movs	r2, #32
 8000cec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cf4:	480b      	ldr	r0, [pc, #44]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000cf6:	f000 fe49 	bl	800198c <HAL_DMA_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d00:	f7ff ff74 	bl	8000bec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000d08:	621a      	str	r2, [r3, #32]
 8000d0a:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_ADC_MspInit+0xc8>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40012400 	.word	0x40012400
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010800 	.word	0x40010800
 8000d24:	20000180 	.word	0x20000180
 8000d28:	40020008 	.word	0x40020008

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d131      	bne.n	8000db0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <HAL_UART_MspInit+0x94>)
 8000d92:	f000 ffe9 	bl	8001d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UART_MspInit+0x94>)
 8000dac:	f000 ffdc 	bl	8001d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40013800 	.word	0x40013800
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010800 	.word	0x40010800

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 f8b5 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <DMA1_Channel1_IRQHandler+0x10>)
 8000e1a:	f000 fe71 	bl	8001b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000180 	.word	0x20000180

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f001 ff92 	bl	8002d80 <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20005000 	.word	0x20005000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	2000008c 	.word	0x2000008c
 8000e90:	200001d8 	.word	0x200001d8

08000e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ea0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ea2:	e003      	b.n	8000eac <LoopCopyDataInit>

08000ea4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ea6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ea8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eaa:	3104      	adds	r1, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000eb0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eb2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000eb4:	d3f6      	bcc.n	8000ea4 <CopyDataInit>
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000eb8:	e002      	b.n	8000ec0 <LoopFillZerobss>

08000eba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ebc:	f842 3b04 	str.w	r3, [r2], #4

08000ec0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ec2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ec4:	d3f9      	bcc.n	8000eba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ec6:	f7ff ffe5 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f001 ff5f 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ece:	f7ff fc8f 	bl	80007f0 <main>
  bx lr
 8000ed2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ed4:	08003724 	.word	0x08003724
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000edc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ee0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000ee4:	200001d8 	.word	0x200001d8

08000ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_2_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x28>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x28>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 fd03 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fe76 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40022000 	.word	0x40022000

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fd1b 	bl	8001972 <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 fce3 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x20>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_IncTick+0x20>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	20000008 	.word	0x20000008
 8000f98:	200001c4 	.word	0x200001c4

08000f9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <HAL_GetTick+0x10>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	200001c4 	.word	0x200001c4

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff fff0 	bl	8000f9c <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_Delay+0x44>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffe0 	bl	8000f9c <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0be      	b.n	8001198 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	2b00      	cmp	r3, #0
 8001026:	d109      	bne.n	800103c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fe10 	bl	8000c5c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 faf7 	bl	8001630 <ADC_ConversionStop_Disable>
 8001042:	4603      	mov	r3, r0
 8001044:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	f040 8099 	bne.w	8001186 <HAL_ADC_Init+0x18e>
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f040 8095 	bne.w	8001186 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001064:	f023 0302 	bic.w	r3, r3, #2
 8001068:	f043 0202 	orr.w	r2, r3, #2
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001078:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7b1b      	ldrb	r3, [r3, #12]
 800107e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001080:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	4313      	orrs	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001090:	d003      	beq.n	800109a <HAL_ADC_Init+0xa2>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <HAL_ADC_Init+0xa8>
 800109a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109e:	e000      	b.n	80010a2 <HAL_ADC_Init+0xaa>
 80010a0:	2300      	movs	r3, #0
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7d1b      	ldrb	r3, [r3, #20]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d119      	bne.n	80010e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7b1b      	ldrb	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d109      	bne.n	80010cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	3b01      	subs	r3, #1
 80010be:	035a      	lsls	r2, r3, #13
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	e00b      	b.n	80010e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	f043 0220 	orr.w	r2, r3, #32
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	f043 0201 	orr.w	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_ADC_Init+0x1a8>)
 8001100:	4013      	ands	r3, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	430b      	orrs	r3, r1
 800110a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001114:	d003      	beq.n	800111e <HAL_ADC_Init+0x126>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d104      	bne.n	8001128 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	3b01      	subs	r3, #1
 8001124:	051b      	lsls	r3, r3, #20
 8001126:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	430a      	orrs	r2, r1
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_ADC_Init+0x1ac>)
 8001144:	4013      	ands	r3, r2
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	429a      	cmp	r2, r3
 800114a:	d10b      	bne.n	8001164 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f023 0303 	bic.w	r3, r3, #3
 800115a:	f043 0201 	orr.w	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001162:	e018      	b.n	8001196 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f023 0312 	bic.w	r3, r3, #18
 800116c:	f043 0210 	orr.w	r2, r3, #16
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001178:	f043 0201 	orr.w	r2, r3, #1
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001184:	e007      	b.n	8001196 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118a:	f043 0210 	orr.w	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001196:	7dfb      	ldrb	r3, [r7, #23]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	ffe1f7fd 	.word	0xffe1f7fd
 80011a4:	ff1f0efe 	.word	0xff1f0efe

080011a8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a64      	ldr	r2, [pc, #400]	; (8001350 <HAL_ADC_Start_DMA+0x1a8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d004      	beq.n	80011cc <HAL_ADC_Start_DMA+0x24>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a63      	ldr	r2, [pc, #396]	; (8001354 <HAL_ADC_Start_DMA+0x1ac>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d106      	bne.n	80011da <HAL_ADC_Start_DMA+0x32>
 80011cc:	4b60      	ldr	r3, [pc, #384]	; (8001350 <HAL_ADC_Start_DMA+0x1a8>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f040 80b3 	bne.w	8001340 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_ADC_Start_DMA+0x40>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e0ae      	b.n	8001346 <HAL_ADC_Start_DMA+0x19e>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 f9cb 	bl	800158c <ADC_Enable>
 80011f6:	4603      	mov	r3, r0
 80011f8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f040 809a 	bne.w	8001336 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <HAL_ADC_Start_DMA+0x1ac>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d105      	bne.n	800122c <HAL_ADC_Start_DMA+0x84>
 8001220:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <HAL_ADC_Start_DMA+0x1a8>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d115      	bne.n	8001258 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001242:	2b00      	cmp	r3, #0
 8001244:	d026      	beq.n	8001294 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800124e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001256:	e01d      	b.n	8001294 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a39      	ldr	r2, [pc, #228]	; (8001350 <HAL_ADC_Start_DMA+0x1a8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d004      	beq.n	8001278 <HAL_ADC_Start_DMA+0xd0>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a38      	ldr	r2, [pc, #224]	; (8001354 <HAL_ADC_Start_DMA+0x1ac>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d10d      	bne.n	8001294 <HAL_ADC_Start_DMA+0xec>
 8001278:	4b35      	ldr	r3, [pc, #212]	; (8001350 <HAL_ADC_Start_DMA+0x1a8>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800128c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	f023 0206 	bic.w	r2, r3, #6
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ac:	e002      	b.n	80012b4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2200      	movs	r2, #0
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <HAL_ADC_Start_DMA+0x1b0>)
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4a24      	ldr	r2, [pc, #144]	; (800135c <HAL_ADC_Start_DMA+0x1b4>)
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a23      	ldr	r2, [pc, #140]	; (8001360 <HAL_ADC_Start_DMA+0x1b8>)
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f06f 0202 	mvn.w	r2, #2
 80012dc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012ec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a18      	ldr	r0, [r3, #32]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	334c      	adds	r3, #76	; 0x4c
 80012f8:	4619      	mov	r1, r3
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f000 fb9f 	bl	8001a40 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800130c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001310:	d108      	bne.n	8001324 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001320:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001322:	e00f      	b.n	8001344 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001332:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001334:	e006      	b.n	8001344 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800133e:	e001      	b.n	8001344 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001344:	7dfb      	ldrb	r3, [r7, #23]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40012400 	.word	0x40012400
 8001354:	40012800 	.word	0x40012800
 8001358:	080016a5 	.word	0x080016a5
 800135c:	08001721 	.word	0x08001721
 8001360:	0800173d 	.word	0x0800173d

08001364 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
	...

0800139c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x20>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e0dc      	b.n	8001576 <HAL_ADC_ConfigChannel+0x1da>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b06      	cmp	r3, #6
 80013ca:	d81c      	bhi.n	8001406 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3b05      	subs	r3, #5
 80013de:	221f      	movs	r2, #31
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4019      	ands	r1, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b05      	subs	r3, #5
 80013f8:	fa00 f203 	lsl.w	r2, r0, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	635a      	str	r2, [r3, #52]	; 0x34
 8001404:	e03c      	b.n	8001480 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d81c      	bhi.n	8001448 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b23      	subs	r3, #35	; 0x23
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	4019      	ands	r1, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b23      	subs	r3, #35	; 0x23
 800143a:	fa00 f203 	lsl.w	r2, r0, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
 8001446:	e01b      	b.n	8001480 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b41      	subs	r3, #65	; 0x41
 800145a:	221f      	movs	r2, #31
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	4019      	ands	r1, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	3b41      	subs	r3, #65	; 0x41
 8001474:	fa00 f203 	lsl.w	r2, r0, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b09      	cmp	r3, #9
 8001486:	d91c      	bls.n	80014c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68d9      	ldr	r1, [r3, #12]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	3b1e      	subs	r3, #30
 800149a:	2207      	movs	r2, #7
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4019      	ands	r1, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	6898      	ldr	r0, [r3, #8]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	3b1e      	subs	r3, #30
 80014b4:	fa00 f203 	lsl.w	r2, r0, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	e019      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6919      	ldr	r1, [r3, #16]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	2207      	movs	r2, #7
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	4019      	ands	r1, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	6898      	ldr	r0, [r3, #8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	fa00 f203 	lsl.w	r2, r0, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d003      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001502:	2b11      	cmp	r3, #17
 8001504:	d132      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_ADC_ConfigChannel+0x1e4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d125      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d126      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800152c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b10      	cmp	r3, #16
 8001534:	d11a      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_ADC_ConfigChannel+0x1e8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a13      	ldr	r2, [pc, #76]	; (8001588 <HAL_ADC_ConfigChannel+0x1ec>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	0c9a      	lsrs	r2, r3, #18
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800154c:	e002      	b.n	8001554 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3b01      	subs	r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f9      	bne.n	800154e <HAL_ADC_ConfigChannel+0x1b2>
 800155a:	e007      	b.n	800156c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f043 0220 	orr.w	r2, r3, #32
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40012400 	.word	0x40012400
 8001584:	20000000 	.word	0x20000000
 8001588:	431bde83 	.word	0x431bde83

0800158c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d039      	beq.n	800161e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0201 	orr.w	r2, r2, #1
 80015b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <ADC_Enable+0x9c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <ADC_Enable+0xa0>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015c8:	e002      	b.n	80015d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f9      	bne.n	80015ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015d6:	f7ff fce1 	bl	8000f9c <HAL_GetTick>
 80015da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015dc:	e018      	b.n	8001610 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015de:	f7ff fcdd 	bl	8000f9c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d911      	bls.n	8001610 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	f043 0210 	orr.w	r2, r3, #16
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f043 0201 	orr.w	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e007      	b.n	8001620 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d1df      	bne.n	80015de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	431bde83 	.word	0x431bde83

08001630 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b01      	cmp	r3, #1
 8001648:	d127      	bne.n	800169a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800165a:	f7ff fc9f 	bl	8000f9c <HAL_GetTick>
 800165e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001660:	e014      	b.n	800168c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001662:	f7ff fc9b 	bl	8000f9c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d90d      	bls.n	800168c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f043 0210 	orr.w	r2, r3, #16
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	f043 0201 	orr.w	r2, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e007      	b.n	800169c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b01      	cmp	r3, #1
 8001698:	d0e3      	beq.n	8001662 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d127      	bne.n	800170e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016d4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016d8:	d115      	bne.n	8001706 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d111      	bne.n	8001706 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff fe2c 	bl	8001364 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800170c:	e004      	b.n	8001718 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	4798      	blx	r3
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff fe21 	bl	8001376 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	f043 0204 	orr.w	r2, r3, #4
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fe10 	bl	8001388 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4906      	ldr	r1, [pc, #24]	; (8001808 <__NVIC_EnableIRQ+0x34>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff90 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff2d 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff42 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff90 	bl	8001860 <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5f 	bl	800180c <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff35 	bl	80017d4 <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e043      	b.n	8001a2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_DMA_Init+0xa8>)
 80019aa:	4413      	add	r3, r2
 80019ac:	4a22      	ldr	r2, [pc, #136]	; (8001a38 <HAL_DMA_Init+0xac>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	009a      	lsls	r2, r3, #2
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_DMA_Init+0xb0>)
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	bffdfff8 	.word	0xbffdfff8
 8001a38:	cccccccd 	.word	0xcccccccd
 8001a3c:	40020000 	.word	0x40020000

08001a40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_DMA_Start_IT+0x20>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e04a      	b.n	8001af6 <HAL_DMA_Start_IT+0xb6>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d13a      	bne.n	8001ae8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2202      	movs	r2, #2
 8001a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f938 	bl	8001d0c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 020e 	orr.w	r2, r2, #14
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e00f      	b.n	8001ad6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0204 	bic.w	r2, r2, #4
 8001ac4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 020a 	orr.w	r2, r2, #10
 8001ad4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e005      	b.n	8001af4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
 8001af2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d04f      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0xc8>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d04a      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0204 	bic.w	r2, r2, #4
 8001b4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a66      	ldr	r2, [pc, #408]	; (8001cf0 <HAL_DMA_IRQHandler+0x1f0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d029      	beq.n	8001bae <HAL_DMA_IRQHandler+0xae>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a65      	ldr	r2, [pc, #404]	; (8001cf4 <HAL_DMA_IRQHandler+0x1f4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d022      	beq.n	8001baa <HAL_DMA_IRQHandler+0xaa>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a63      	ldr	r2, [pc, #396]	; (8001cf8 <HAL_DMA_IRQHandler+0x1f8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01a      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0xa4>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a62      	ldr	r2, [pc, #392]	; (8001cfc <HAL_DMA_IRQHandler+0x1fc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d012      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x9e>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a60      	ldr	r2, [pc, #384]	; (8001d00 <HAL_DMA_IRQHandler+0x200>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00a      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x98>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a5f      	ldr	r2, [pc, #380]	; (8001d04 <HAL_DMA_IRQHandler+0x204>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d102      	bne.n	8001b92 <HAL_DMA_IRQHandler+0x92>
 8001b8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b90:	e00e      	b.n	8001bb0 <HAL_DMA_IRQHandler+0xb0>
 8001b92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b96:	e00b      	b.n	8001bb0 <HAL_DMA_IRQHandler+0xb0>
 8001b98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b9c:	e008      	b.n	8001bb0 <HAL_DMA_IRQHandler+0xb0>
 8001b9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ba2:	e005      	b.n	8001bb0 <HAL_DMA_IRQHandler+0xb0>
 8001ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba8:	e002      	b.n	8001bb0 <HAL_DMA_IRQHandler+0xb0>
 8001baa:	2340      	movs	r3, #64	; 0x40
 8001bac:	e000      	b.n	8001bb0 <HAL_DMA_IRQHandler+0xb0>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	4a55      	ldr	r2, [pc, #340]	; (8001d08 <HAL_DMA_IRQHandler+0x208>)
 8001bb2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8094 	beq.w	8001ce6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc6:	e08e      	b.n	8001ce6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	2202      	movs	r2, #2
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d056      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x186>
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d051      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 020a 	bic.w	r2, r2, #10
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a38      	ldr	r2, [pc, #224]	; (8001cf0 <HAL_DMA_IRQHandler+0x1f0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d029      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x166>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a37      	ldr	r2, [pc, #220]	; (8001cf4 <HAL_DMA_IRQHandler+0x1f4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x162>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a35      	ldr	r2, [pc, #212]	; (8001cf8 <HAL_DMA_IRQHandler+0x1f8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01a      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x15c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a34      	ldr	r2, [pc, #208]	; (8001cfc <HAL_DMA_IRQHandler+0x1fc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d012      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x156>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <HAL_DMA_IRQHandler+0x200>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00a      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x150>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <HAL_DMA_IRQHandler+0x204>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d102      	bne.n	8001c4a <HAL_DMA_IRQHandler+0x14a>
 8001c44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c48:	e00e      	b.n	8001c68 <HAL_DMA_IRQHandler+0x168>
 8001c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c4e:	e00b      	b.n	8001c68 <HAL_DMA_IRQHandler+0x168>
 8001c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c54:	e008      	b.n	8001c68 <HAL_DMA_IRQHandler+0x168>
 8001c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c5a:	e005      	b.n	8001c68 <HAL_DMA_IRQHandler+0x168>
 8001c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c60:	e002      	b.n	8001c68 <HAL_DMA_IRQHandler+0x168>
 8001c62:	2320      	movs	r3, #32
 8001c64:	e000      	b.n	8001c68 <HAL_DMA_IRQHandler+0x168>
 8001c66:	2302      	movs	r3, #2
 8001c68:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <HAL_DMA_IRQHandler+0x208>)
 8001c6a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d034      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c84:	e02f      	b.n	8001ce6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d028      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x1e8>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 020e 	bic.w	r2, r2, #14
 8001cae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
    }
  }
  return;
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
}
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40020008 	.word	0x40020008
 8001cf4:	4002001c 	.word	0x4002001c
 8001cf8:	40020030 	.word	0x40020030
 8001cfc:	40020044 	.word	0x40020044
 8001d00:	40020058 	.word	0x40020058
 8001d04:	4002006c 	.word	0x4002006c
 8001d08:	40020000 	.word	0x40020000

08001d0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d22:	2101      	movs	r1, #1
 8001d24:	fa01 f202 	lsl.w	r2, r1, r2
 8001d28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d108      	bne.n	8001d4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d4a:	e007      	b.n	8001d5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b08b      	sub	sp, #44	; 0x2c
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e169      	b.n	8002050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 8158 	bne.w	800204a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4a9a      	ldr	r2, [pc, #616]	; (8002008 <HAL_GPIO_Init+0x2a0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d05e      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001da4:	4a98      	ldr	r2, [pc, #608]	; (8002008 <HAL_GPIO_Init+0x2a0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d875      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001daa:	4a98      	ldr	r2, [pc, #608]	; (800200c <HAL_GPIO_Init+0x2a4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d058      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001db0:	4a96      	ldr	r2, [pc, #600]	; (800200c <HAL_GPIO_Init+0x2a4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d86f      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001db6:	4a96      	ldr	r2, [pc, #600]	; (8002010 <HAL_GPIO_Init+0x2a8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d052      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dbc:	4a94      	ldr	r2, [pc, #592]	; (8002010 <HAL_GPIO_Init+0x2a8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d869      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dc2:	4a94      	ldr	r2, [pc, #592]	; (8002014 <HAL_GPIO_Init+0x2ac>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d04c      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dc8:	4a92      	ldr	r2, [pc, #584]	; (8002014 <HAL_GPIO_Init+0x2ac>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d863      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dce:	4a92      	ldr	r2, [pc, #584]	; (8002018 <HAL_GPIO_Init+0x2b0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d046      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a90      	ldr	r2, [pc, #576]	; (8002018 <HAL_GPIO_Init+0x2b0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d85d      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d82a      	bhi.n	8001e34 <HAL_GPIO_Init+0xcc>
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d859      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001de2:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <HAL_GPIO_Init+0x80>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e3d 	.word	0x08001e3d
 8001df0:	08001e4f 	.word	0x08001e4f
 8001df4:	08001e91 	.word	0x08001e91
 8001df8:	08001e97 	.word	0x08001e97
 8001dfc:	08001e97 	.word	0x08001e97
 8001e00:	08001e97 	.word	0x08001e97
 8001e04:	08001e97 	.word	0x08001e97
 8001e08:	08001e97 	.word	0x08001e97
 8001e0c:	08001e97 	.word	0x08001e97
 8001e10:	08001e97 	.word	0x08001e97
 8001e14:	08001e97 	.word	0x08001e97
 8001e18:	08001e97 	.word	0x08001e97
 8001e1c:	08001e97 	.word	0x08001e97
 8001e20:	08001e97 	.word	0x08001e97
 8001e24:	08001e97 	.word	0x08001e97
 8001e28:	08001e97 	.word	0x08001e97
 8001e2c:	08001e45 	.word	0x08001e45
 8001e30:	08001e59 	.word	0x08001e59
 8001e34:	4a79      	ldr	r2, [pc, #484]	; (800201c <HAL_GPIO_Init+0x2b4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e3a:	e02c      	b.n	8001e96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e029      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	623b      	str	r3, [r7, #32]
          break;
 8001e4c:	e024      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	3308      	adds	r3, #8
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e01f      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e01a      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e013      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	611a      	str	r2, [r3, #16]
          break;
 8001e82:	e009      	b.n	8001e98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	615a      	str	r2, [r3, #20]
          break;
 8001e8e:	e003      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          break;
 8001e96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2bff      	cmp	r3, #255	; 0xff
 8001e9c:	d801      	bhi.n	8001ea2 <HAL_GPIO_Init+0x13a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	e001      	b.n	8001ea6 <HAL_GPIO_Init+0x13e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2bff      	cmp	r3, #255	; 0xff
 8001eac:	d802      	bhi.n	8001eb4 <HAL_GPIO_Init+0x14c>
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x152>
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	3b08      	subs	r3, #8
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	210f      	movs	r1, #15
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	401a      	ands	r2, r3
 8001ecc:	6a39      	ldr	r1, [r7, #32]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 80b1 	beq.w	800204a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a4c      	ldr	r2, [pc, #304]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b4a      	ldr	r3, [pc, #296]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f00:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a40      	ldr	r2, [pc, #256]	; (8002028 <HAL_GPIO_Init+0x2c0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <HAL_GPIO_Init+0x1ec>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3f      	ldr	r2, [pc, #252]	; (800202c <HAL_GPIO_Init+0x2c4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00d      	beq.n	8001f50 <HAL_GPIO_Init+0x1e8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3e      	ldr	r2, [pc, #248]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d007      	beq.n	8001f4c <HAL_GPIO_Init+0x1e4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3d      	ldr	r2, [pc, #244]	; (8002034 <HAL_GPIO_Init+0x2cc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_GPIO_Init+0x1e0>
 8001f44:	2303      	movs	r3, #3
 8001f46:	e006      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f48:	2304      	movs	r3, #4
 8001f4a:	e004      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f54:	2300      	movs	r3, #0
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	f002 0203 	and.w	r2, r2, #3
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	4093      	lsls	r3, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f66:	492f      	ldr	r1, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	492c      	ldr	r1, [pc, #176]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4928      	ldr	r1, [pc, #160]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4922      	ldr	r1, [pc, #136]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	491e      	ldr	r1, [pc, #120]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4918      	ldr	r1, [pc, #96]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4914      	ldr	r1, [pc, #80]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d021      	beq.n	800203c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	490e      	ldr	r1, [pc, #56]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	60cb      	str	r3, [r1, #12]
 8002004:	e021      	b.n	800204a <HAL_GPIO_Init+0x2e2>
 8002006:	bf00      	nop
 8002008:	10320000 	.word	0x10320000
 800200c:	10310000 	.word	0x10310000
 8002010:	10220000 	.word	0x10220000
 8002014:	10210000 	.word	0x10210000
 8002018:	10120000 	.word	0x10120000
 800201c:	10110000 	.word	0x10110000
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000
 8002028:	40010800 	.word	0x40010800
 800202c:	40010c00 	.word	0x40010c00
 8002030:	40011000 	.word	0x40011000
 8002034:	40011400 	.word	0x40011400
 8002038:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_GPIO_Init+0x304>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	43db      	mvns	r3, r3
 8002044:	4909      	ldr	r1, [pc, #36]	; (800206c <HAL_GPIO_Init+0x304>)
 8002046:	4013      	ands	r3, r2
 8002048:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	3301      	adds	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	f47f ae8e 	bne.w	8001d7c <HAL_GPIO_Init+0x14>
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	372c      	adds	r7, #44	; 0x2c
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e26c      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8087 	beq.w	800219e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002090:	4b92      	ldr	r3, [pc, #584]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	d00c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800209c:	4b8f      	ldr	r3, [pc, #572]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d112      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
 80020a8:	4b8c      	ldr	r3, [pc, #560]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d10b      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d06c      	beq.n	800219c <HAL_RCC_OscConfig+0x12c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d168      	bne.n	800219c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e246      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x76>
 80020d8:	4b80      	ldr	r3, [pc, #512]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a7f      	ldr	r2, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e02e      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x98>
 80020ee:	4b7b      	ldr	r3, [pc, #492]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7a      	ldr	r2, [pc, #488]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b78      	ldr	r3, [pc, #480]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a77      	ldr	r2, [pc, #476]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e01d      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0xbc>
 8002112:	4b72      	ldr	r3, [pc, #456]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a71      	ldr	r2, [pc, #452]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 800212c:	4b6b      	ldr	r3, [pc, #428]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a6a      	ldr	r2, [pc, #424]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b68      	ldr	r3, [pc, #416]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a67      	ldr	r2, [pc, #412]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7fe ff26 	bl	8000f9c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7fe ff22 	bl	8000f9c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1fa      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b5d      	ldr	r3, [pc, #372]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0xe4>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7fe ff12 	bl	8000f9c <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7fe ff0e 	bl	8000f9c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1e6      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x10c>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d063      	beq.n	8002272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021aa:	4b4c      	ldr	r3, [pc, #304]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021b6:	4b49      	ldr	r3, [pc, #292]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d11c      	bne.n	80021fc <HAL_RCC_OscConfig+0x18c>
 80021c2:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d116      	bne.n	80021fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_RCC_OscConfig+0x176>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e1ba      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4939      	ldr	r1, [pc, #228]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	e03a      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fec7 	bl	8000f9c <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002212:	f7fe fec3 	bl	8000f9c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e19b      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4927      	ldr	r1, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
 8002244:	e015      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fea6 	bl	8000f9c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002254:	f7fe fea2 	bl	8000f9c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e17a      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03a      	beq.n	80022f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d019      	beq.n	80022ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7fe fe86 	bl	8000f9c <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7fe fe82 	bl	8000f9c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e15a      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f000 fad8 	bl	8002868 <RCC_Delay>
 80022b8:	e01c      	b.n	80022f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7fe fe6c 	bl	8000f9c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c6:	e00f      	b.n	80022e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c8:	f7fe fe68 	bl	8000f9c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d908      	bls.n	80022e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e140      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	42420000 	.word	0x42420000
 80022e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4b9e      	ldr	r3, [pc, #632]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e9      	bne.n	80022c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a6 	beq.w	800244e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002306:	4b97      	ldr	r3, [pc, #604]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10d      	bne.n	800232e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	4b94      	ldr	r3, [pc, #592]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a93      	ldr	r2, [pc, #588]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231c:	61d3      	str	r3, [r2, #28]
 800231e:	4b91      	ldr	r3, [pc, #580]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232a:	2301      	movs	r3, #1
 800232c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232e:	4b8e      	ldr	r3, [pc, #568]	; (8002568 <HAL_RCC_OscConfig+0x4f8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d118      	bne.n	800236c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233a:	4b8b      	ldr	r3, [pc, #556]	; (8002568 <HAL_RCC_OscConfig+0x4f8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a8a      	ldr	r2, [pc, #552]	; (8002568 <HAL_RCC_OscConfig+0x4f8>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002346:	f7fe fe29 	bl	8000f9c <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7fe fe25 	bl	8000f9c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0fd      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b81      	ldr	r3, [pc, #516]	; (8002568 <HAL_RCC_OscConfig+0x4f8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x312>
 8002374:	4b7b      	ldr	r3, [pc, #492]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a7a      	ldr	r2, [pc, #488]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	e02d      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x334>
 800238a:	4b76      	ldr	r3, [pc, #472]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a75      	ldr	r2, [pc, #468]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6213      	str	r3, [r2, #32]
 8002396:	4b73      	ldr	r3, [pc, #460]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a72      	ldr	r2, [pc, #456]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	f023 0304 	bic.w	r3, r3, #4
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	e01c      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d10c      	bne.n	80023c6 <HAL_RCC_OscConfig+0x356>
 80023ac:	4b6d      	ldr	r3, [pc, #436]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a6c      	ldr	r2, [pc, #432]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	e00b      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a66      	ldr	r2, [pc, #408]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	4b64      	ldr	r3, [pc, #400]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a63      	ldr	r2, [pc, #396]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d015      	beq.n	8002412 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7fe fdd9 	bl	8000f9c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe fdd5 	bl	8000f9c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0ab      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002404:	4b57      	ldr	r3, [pc, #348]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ee      	beq.n	80023ee <HAL_RCC_OscConfig+0x37e>
 8002410:	e014      	b.n	800243c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7fe fdc3 	bl	8000f9c <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe fdbf 	bl	8000f9c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e095      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002430:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ee      	bne.n	800241a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800243c:	7dfb      	ldrb	r3, [r7, #23]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d105      	bne.n	800244e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002442:	4b48      	ldr	r3, [pc, #288]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a47      	ldr	r2, [pc, #284]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8081 	beq.w	800255a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002458:	4b42      	ldr	r3, [pc, #264]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d061      	beq.n	8002528 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d146      	bne.n	80024fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246c:	4b3f      	ldr	r3, [pc, #252]	; (800256c <HAL_RCC_OscConfig+0x4fc>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fd93 	bl	8000f9c <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fd8f 	bl	8000f9c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e067      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248c:	4b35      	ldr	r3, [pc, #212]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d108      	bne.n	80024b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024a2:	4b30      	ldr	r3, [pc, #192]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	492d      	ldr	r1, [pc, #180]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a19      	ldr	r1, [r3, #32]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	430b      	orrs	r3, r1
 80024c6:	4927      	ldr	r1, [pc, #156]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <HAL_RCC_OscConfig+0x4fc>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe fd63 	bl	8000f9c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe fd5f 	bl	8000f9c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e037      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x46a>
 80024f8:	e02f      	b.n	800255a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	4b1c      	ldr	r3, [pc, #112]	; (800256c <HAL_RCC_OscConfig+0x4fc>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fd4c 	bl	8000f9c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fd48 	bl	8000f9c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e020      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x498>
 8002526:	e018      	b.n	800255a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e013      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_OscConfig+0x4f4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	429a      	cmp	r2, r3
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000
 800256c:	42420060 	.word	0x42420060

08002570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0d0      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002584:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d910      	bls.n	80025b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b67      	ldr	r3, [pc, #412]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 0207 	bic.w	r2, r3, #7
 800259a:	4965      	ldr	r1, [pc, #404]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b63      	ldr	r3, [pc, #396]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0b8      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025cc:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f0:	4b50      	ldr	r3, [pc, #320]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	494d      	ldr	r1, [pc, #308]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d040      	beq.n	8002690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d115      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e07f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e073      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06b      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264e:	4b39      	ldr	r3, [pc, #228]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f023 0203 	bic.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4936      	ldr	r1, [pc, #216]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002660:	f7fe fc9c 	bl	8000f9c <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	e00a      	b.n	800267e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002668:	f7fe fc98 	bl	8000f9c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e053      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 020c 	and.w	r2, r3, #12
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	429a      	cmp	r2, r3
 800268e:	d1eb      	bne.n	8002668 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d210      	bcs.n	80026c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0207 	bic.w	r2, r3, #7
 80026a6:	4922      	ldr	r1, [pc, #136]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e032      	b.n	8002726 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4916      	ldr	r1, [pc, #88]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	490e      	ldr	r1, [pc, #56]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026fe:	f000 f821 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8002702:	4602      	mov	r2, r0
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	5ccb      	ldrb	r3, [r1, r3]
 8002712:	fa22 f303 	lsr.w	r3, r2, r3
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1cc>)
 8002718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1d0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fbfa 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40022000 	.word	0x40022000
 8002734:	40021000 	.word	0x40021000
 8002738:	080036d0 	.word	0x080036d0
 800273c:	20000000 	.word	0x20000000
 8002740:	20000004 	.word	0x20000004

08002744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002744:	b490      	push	{r4, r7}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800274a:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800274c:	1d3c      	adds	r4, r7, #4
 800274e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002754:	f240 2301 	movw	r3, #513	; 0x201
 8002758:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d002      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x40>
 800277e:	2b08      	cmp	r3, #8
 8002780:	d003      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x46>
 8002782:	e02d      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002786:	623b      	str	r3, [r7, #32]
      break;
 8002788:	e02d      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	0c9b      	lsrs	r3, r3, #18
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002796:	4413      	add	r3, r2
 8002798:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800279c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0c5b      	lsrs	r3, r3, #17
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027b6:	4413      	add	r3, r2
 80027b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c2:	fb02 f203 	mul.w	r2, r2, r3
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	e004      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	623b      	str	r3, [r7, #32]
      break;
 80027de:	e002      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e2:	623b      	str	r3, [r7, #32]
      break;
 80027e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e6:	6a3b      	ldr	r3, [r7, #32]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3728      	adds	r7, #40	; 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc90      	pop	{r4, r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	080036c0 	.word	0x080036c0
 80027f8:	40021000 	.word	0x40021000
 80027fc:	007a1200 	.word	0x007a1200
 8002800:	003d0900 	.word	0x003d0900

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b02      	ldr	r3, [pc, #8]	; (8002814 <HAL_RCC_GetHCLKFreq+0x10>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	20000000 	.word	0x20000000

08002818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800281c:	f7ff fff2 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4903      	ldr	r1, [pc, #12]	; (800283c <HAL_RCC_GetPCLK1Freq+0x24>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	080036e0 	.word	0x080036e0

08002840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002844:	f7ff ffde 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	0adb      	lsrs	r3, r3, #11
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	080036e0 	.word	0x080036e0

08002868 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <RCC_Delay+0x34>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <RCC_Delay+0x38>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0a5b      	lsrs	r3, r3, #9
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002884:	bf00      	nop
  }
  while (Delay --);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	60fa      	str	r2, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f9      	bne.n	8002884 <RCC_Delay+0x1c>
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	20000000 	.word	0x20000000
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d07d      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c4:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10d      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d0:	4b4c      	ldr	r3, [pc, #304]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4a4b      	ldr	r2, [pc, #300]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028da:	61d3      	str	r3, [r2, #28]
 80028dc:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e8:	2301      	movs	r3, #1
 80028ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ec:	4b46      	ldr	r3, [pc, #280]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d118      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f8:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a42      	ldr	r2, [pc, #264]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002902:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002904:	f7fe fb4a 	bl	8000f9c <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	e008      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290c:	f7fe fb46 	bl	8000f9c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e06d      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002932:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d02e      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	429a      	cmp	r2, r3
 8002946:	d027      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002948:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002950:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002952:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002958:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800295e:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d014      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7fe fb15 	bl	8000f9c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	e00a      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe fb11 	bl	8000f9c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e036      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0ee      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4917      	ldr	r1, [pc, #92]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d105      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	490b      	ldr	r1, [pc, #44]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	4904      	ldr	r1, [pc, #16]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	42420440 	.word	0x42420440

08002a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e03f      	b.n	8002aa2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe f978 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2224      	movs	r2, #36	; 0x24
 8002a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f905 	bl	8002c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b08a      	sub	sp, #40	; 0x28
 8002aae:	af02      	add	r7, sp, #8
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d17c      	bne.n	8002bc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_UART_Transmit+0x2c>
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e075      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_UART_Transmit+0x3e>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e06e      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2221      	movs	r2, #33	; 0x21
 8002afa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002afe:	f7fe fa4d 	bl	8000f9c <HAL_GetTick>
 8002b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	88fa      	ldrh	r2, [r7, #6]
 8002b08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b18:	d108      	bne.n	8002b2c <HAL_UART_Transmit+0x82>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	e003      	b.n	8002b34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002b3c:	e02a      	b.n	8002b94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f840 	bl	8002bce <UART_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e036      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10b      	bne.n	8002b76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	3302      	adds	r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	e007      	b.n	8002b86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	3301      	adds	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1cf      	bne.n	8002b3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2140      	movs	r1, #64	; 0x40
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f810 	bl	8002bce <UART_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e006      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bde:	e02c      	b.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d028      	beq.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8002bee:	f7fe f9d5 	bl	8000f9c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d21d      	bcs.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c0c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e00f      	b.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4013      	ands	r3, r2
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	bf0c      	ite	eq
 8002c4a:	2301      	moveq	r3, #1
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d0c3      	beq.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c9e:	f023 030c 	bic.w	r3, r3, #12
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <UART_SetConfig+0x114>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d103      	bne.n	8002cd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ccc:	f7ff fdb8 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	e002      	b.n	8002cda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cd4:	f7ff fda0 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8002cd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	0119      	lsls	r1, r3, #4
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009a      	lsls	r2, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <UART_SetConfig+0x118>)
 8002d12:	fba3 0302 	umull	r0, r3, r3, r2
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2064      	movs	r0, #100	; 0x64
 8002d1a:	fb00 f303 	mul.w	r3, r0, r3
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	3332      	adds	r3, #50	; 0x32
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <UART_SetConfig+0x118>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d30:	4419      	add	r1, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009a      	lsls	r2, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <UART_SetConfig+0x118>)
 8002d4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2064      	movs	r0, #100	; 0x64
 8002d52:	fb00 f303 	mul.w	r3, r0, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	3332      	adds	r3, #50	; 0x32
 8002d5c:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <UART_SetConfig+0x118>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	f003 020f 	and.w	r2, r3, #15
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	440a      	add	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	51eb851f 	.word	0x51eb851f

08002d80 <__errno>:
 8002d80:	4b01      	ldr	r3, [pc, #4]	; (8002d88 <__errno+0x8>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	2000000c 	.word	0x2000000c

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2600      	movs	r6, #0
 8002d90:	4d0c      	ldr	r5, [pc, #48]	; (8002dc4 <__libc_init_array+0x38>)
 8002d92:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d94:	1b64      	subs	r4, r4, r5
 8002d96:	10a4      	asrs	r4, r4, #2
 8002d98:	42a6      	cmp	r6, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	f000 fc5c 	bl	8003658 <_init>
 8002da0:	2600      	movs	r6, #0
 8002da2:	4d0a      	ldr	r5, [pc, #40]	; (8002dcc <__libc_init_array+0x40>)
 8002da4:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <__libc_init_array+0x44>)
 8002da6:	1b64      	subs	r4, r4, r5
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	42a6      	cmp	r6, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db4:	4798      	blx	r3
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbe:	4798      	blx	r3
 8002dc0:	3601      	adds	r6, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	0800371c 	.word	0x0800371c
 8002dc8:	0800371c 	.word	0x0800371c
 8002dcc:	0800371c 	.word	0x0800371c
 8002dd0:	08003720 	.word	0x08003720

08002dd4 <memset>:
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4402      	add	r2, r0
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d100      	bne.n	8002dde <memset+0xa>
 8002ddc:	4770      	bx	lr
 8002dde:	f803 1b01 	strb.w	r1, [r3], #1
 8002de2:	e7f9      	b.n	8002dd8 <memset+0x4>

08002de4 <siprintf>:
 8002de4:	b40e      	push	{r1, r2, r3}
 8002de6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dea:	b500      	push	{lr}
 8002dec:	b09c      	sub	sp, #112	; 0x70
 8002dee:	ab1d      	add	r3, sp, #116	; 0x74
 8002df0:	9002      	str	r0, [sp, #8]
 8002df2:	9006      	str	r0, [sp, #24]
 8002df4:	9107      	str	r1, [sp, #28]
 8002df6:	9104      	str	r1, [sp, #16]
 8002df8:	4808      	ldr	r0, [pc, #32]	; (8002e1c <siprintf+0x38>)
 8002dfa:	4909      	ldr	r1, [pc, #36]	; (8002e20 <siprintf+0x3c>)
 8002dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e00:	9105      	str	r1, [sp, #20]
 8002e02:	6800      	ldr	r0, [r0, #0]
 8002e04:	a902      	add	r1, sp, #8
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	f000 f868 	bl	8002edc <_svfiprintf_r>
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	9b02      	ldr	r3, [sp, #8]
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	b01c      	add	sp, #112	; 0x70
 8002e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e18:	b003      	add	sp, #12
 8002e1a:	4770      	bx	lr
 8002e1c:	2000000c 	.word	0x2000000c
 8002e20:	ffff0208 	.word	0xffff0208

08002e24 <__ssputs_r>:
 8002e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e28:	688e      	ldr	r6, [r1, #8]
 8002e2a:	4682      	mov	sl, r0
 8002e2c:	429e      	cmp	r6, r3
 8002e2e:	460c      	mov	r4, r1
 8002e30:	4690      	mov	r8, r2
 8002e32:	461f      	mov	r7, r3
 8002e34:	d838      	bhi.n	8002ea8 <__ssputs_r+0x84>
 8002e36:	898a      	ldrh	r2, [r1, #12]
 8002e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e3c:	d032      	beq.n	8002ea4 <__ssputs_r+0x80>
 8002e3e:	6825      	ldr	r5, [r4, #0]
 8002e40:	6909      	ldr	r1, [r1, #16]
 8002e42:	3301      	adds	r3, #1
 8002e44:	eba5 0901 	sub.w	r9, r5, r1
 8002e48:	6965      	ldr	r5, [r4, #20]
 8002e4a:	444b      	add	r3, r9
 8002e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e54:	106d      	asrs	r5, r5, #1
 8002e56:	429d      	cmp	r5, r3
 8002e58:	bf38      	it	cc
 8002e5a:	461d      	movcc	r5, r3
 8002e5c:	0553      	lsls	r3, r2, #21
 8002e5e:	d531      	bpl.n	8002ec4 <__ssputs_r+0xa0>
 8002e60:	4629      	mov	r1, r5
 8002e62:	f000 fb53 	bl	800350c <_malloc_r>
 8002e66:	4606      	mov	r6, r0
 8002e68:	b950      	cbnz	r0, 8002e80 <__ssputs_r+0x5c>
 8002e6a:	230c      	movs	r3, #12
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	f8ca 3000 	str.w	r3, [sl]
 8002e74:	89a3      	ldrh	r3, [r4, #12]
 8002e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e7a:	81a3      	strh	r3, [r4, #12]
 8002e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e80:	464a      	mov	r2, r9
 8002e82:	6921      	ldr	r1, [r4, #16]
 8002e84:	f000 face 	bl	8003424 <memcpy>
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e92:	81a3      	strh	r3, [r4, #12]
 8002e94:	6126      	str	r6, [r4, #16]
 8002e96:	444e      	add	r6, r9
 8002e98:	6026      	str	r6, [r4, #0]
 8002e9a:	463e      	mov	r6, r7
 8002e9c:	6165      	str	r5, [r4, #20]
 8002e9e:	eba5 0509 	sub.w	r5, r5, r9
 8002ea2:	60a5      	str	r5, [r4, #8]
 8002ea4:	42be      	cmp	r6, r7
 8002ea6:	d900      	bls.n	8002eaa <__ssputs_r+0x86>
 8002ea8:	463e      	mov	r6, r7
 8002eaa:	4632      	mov	r2, r6
 8002eac:	4641      	mov	r1, r8
 8002eae:	6820      	ldr	r0, [r4, #0]
 8002eb0:	f000 fac6 	bl	8003440 <memmove>
 8002eb4:	68a3      	ldr	r3, [r4, #8]
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	1b9b      	subs	r3, r3, r6
 8002eba:	4432      	add	r2, r6
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	60a3      	str	r3, [r4, #8]
 8002ec0:	6022      	str	r2, [r4, #0]
 8002ec2:	e7db      	b.n	8002e7c <__ssputs_r+0x58>
 8002ec4:	462a      	mov	r2, r5
 8002ec6:	f000 fb7b 	bl	80035c0 <_realloc_r>
 8002eca:	4606      	mov	r6, r0
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	d1e1      	bne.n	8002e94 <__ssputs_r+0x70>
 8002ed0:	4650      	mov	r0, sl
 8002ed2:	6921      	ldr	r1, [r4, #16]
 8002ed4:	f000 face 	bl	8003474 <_free_r>
 8002ed8:	e7c7      	b.n	8002e6a <__ssputs_r+0x46>
	...

08002edc <_svfiprintf_r>:
 8002edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee0:	4698      	mov	r8, r3
 8002ee2:	898b      	ldrh	r3, [r1, #12]
 8002ee4:	4607      	mov	r7, r0
 8002ee6:	061b      	lsls	r3, r3, #24
 8002ee8:	460d      	mov	r5, r1
 8002eea:	4614      	mov	r4, r2
 8002eec:	b09d      	sub	sp, #116	; 0x74
 8002eee:	d50e      	bpl.n	8002f0e <_svfiprintf_r+0x32>
 8002ef0:	690b      	ldr	r3, [r1, #16]
 8002ef2:	b963      	cbnz	r3, 8002f0e <_svfiprintf_r+0x32>
 8002ef4:	2140      	movs	r1, #64	; 0x40
 8002ef6:	f000 fb09 	bl	800350c <_malloc_r>
 8002efa:	6028      	str	r0, [r5, #0]
 8002efc:	6128      	str	r0, [r5, #16]
 8002efe:	b920      	cbnz	r0, 8002f0a <_svfiprintf_r+0x2e>
 8002f00:	230c      	movs	r3, #12
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	e0d1      	b.n	80030ae <_svfiprintf_r+0x1d2>
 8002f0a:	2340      	movs	r3, #64	; 0x40
 8002f0c:	616b      	str	r3, [r5, #20]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	9309      	str	r3, [sp, #36]	; 0x24
 8002f12:	2320      	movs	r3, #32
 8002f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f18:	2330      	movs	r3, #48	; 0x30
 8002f1a:	f04f 0901 	mov.w	r9, #1
 8002f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80030c8 <_svfiprintf_r+0x1ec>
 8002f26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	469a      	mov	sl, r3
 8002f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f32:	b10a      	cbz	r2, 8002f38 <_svfiprintf_r+0x5c>
 8002f34:	2a25      	cmp	r2, #37	; 0x25
 8002f36:	d1f9      	bne.n	8002f2c <_svfiprintf_r+0x50>
 8002f38:	ebba 0b04 	subs.w	fp, sl, r4
 8002f3c:	d00b      	beq.n	8002f56 <_svfiprintf_r+0x7a>
 8002f3e:	465b      	mov	r3, fp
 8002f40:	4622      	mov	r2, r4
 8002f42:	4629      	mov	r1, r5
 8002f44:	4638      	mov	r0, r7
 8002f46:	f7ff ff6d 	bl	8002e24 <__ssputs_r>
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	f000 80aa 	beq.w	80030a4 <_svfiprintf_r+0x1c8>
 8002f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f52:	445a      	add	r2, fp
 8002f54:	9209      	str	r2, [sp, #36]	; 0x24
 8002f56:	f89a 3000 	ldrb.w	r3, [sl]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a2 	beq.w	80030a4 <_svfiprintf_r+0x1c8>
 8002f60:	2300      	movs	r3, #0
 8002f62:	f04f 32ff 	mov.w	r2, #4294967295
 8002f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f6a:	f10a 0a01 	add.w	sl, sl, #1
 8002f6e:	9304      	str	r3, [sp, #16]
 8002f70:	9307      	str	r3, [sp, #28]
 8002f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f76:	931a      	str	r3, [sp, #104]	; 0x68
 8002f78:	4654      	mov	r4, sl
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f80:	4851      	ldr	r0, [pc, #324]	; (80030c8 <_svfiprintf_r+0x1ec>)
 8002f82:	f000 fa41 	bl	8003408 <memchr>
 8002f86:	9a04      	ldr	r2, [sp, #16]
 8002f88:	b9d8      	cbnz	r0, 8002fc2 <_svfiprintf_r+0xe6>
 8002f8a:	06d0      	lsls	r0, r2, #27
 8002f8c:	bf44      	itt	mi
 8002f8e:	2320      	movmi	r3, #32
 8002f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f94:	0711      	lsls	r1, r2, #28
 8002f96:	bf44      	itt	mi
 8002f98:	232b      	movmi	r3, #43	; 0x2b
 8002f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8002fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa4:	d015      	beq.n	8002fd2 <_svfiprintf_r+0xf6>
 8002fa6:	4654      	mov	r4, sl
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f04f 0c0a 	mov.w	ip, #10
 8002fae:	9a07      	ldr	r2, [sp, #28]
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fb6:	3b30      	subs	r3, #48	; 0x30
 8002fb8:	2b09      	cmp	r3, #9
 8002fba:	d94e      	bls.n	800305a <_svfiprintf_r+0x17e>
 8002fbc:	b1b0      	cbz	r0, 8002fec <_svfiprintf_r+0x110>
 8002fbe:	9207      	str	r2, [sp, #28]
 8002fc0:	e014      	b.n	8002fec <_svfiprintf_r+0x110>
 8002fc2:	eba0 0308 	sub.w	r3, r0, r8
 8002fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	46a2      	mov	sl, r4
 8002fce:	9304      	str	r3, [sp, #16]
 8002fd0:	e7d2      	b.n	8002f78 <_svfiprintf_r+0x9c>
 8002fd2:	9b03      	ldr	r3, [sp, #12]
 8002fd4:	1d19      	adds	r1, r3, #4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	9103      	str	r1, [sp, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bfbb      	ittet	lt
 8002fde:	425b      	neglt	r3, r3
 8002fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8002fe4:	9307      	strge	r3, [sp, #28]
 8002fe6:	9307      	strlt	r3, [sp, #28]
 8002fe8:	bfb8      	it	lt
 8002fea:	9204      	strlt	r2, [sp, #16]
 8002fec:	7823      	ldrb	r3, [r4, #0]
 8002fee:	2b2e      	cmp	r3, #46	; 0x2e
 8002ff0:	d10c      	bne.n	800300c <_svfiprintf_r+0x130>
 8002ff2:	7863      	ldrb	r3, [r4, #1]
 8002ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ff6:	d135      	bne.n	8003064 <_svfiprintf_r+0x188>
 8002ff8:	9b03      	ldr	r3, [sp, #12]
 8002ffa:	3402      	adds	r4, #2
 8002ffc:	1d1a      	adds	r2, r3, #4
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	9203      	str	r2, [sp, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	bfb8      	it	lt
 8003006:	f04f 33ff 	movlt.w	r3, #4294967295
 800300a:	9305      	str	r3, [sp, #20]
 800300c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030d8 <_svfiprintf_r+0x1fc>
 8003010:	2203      	movs	r2, #3
 8003012:	4650      	mov	r0, sl
 8003014:	7821      	ldrb	r1, [r4, #0]
 8003016:	f000 f9f7 	bl	8003408 <memchr>
 800301a:	b140      	cbz	r0, 800302e <_svfiprintf_r+0x152>
 800301c:	2340      	movs	r3, #64	; 0x40
 800301e:	eba0 000a 	sub.w	r0, r0, sl
 8003022:	fa03 f000 	lsl.w	r0, r3, r0
 8003026:	9b04      	ldr	r3, [sp, #16]
 8003028:	3401      	adds	r4, #1
 800302a:	4303      	orrs	r3, r0
 800302c:	9304      	str	r3, [sp, #16]
 800302e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003032:	2206      	movs	r2, #6
 8003034:	4825      	ldr	r0, [pc, #148]	; (80030cc <_svfiprintf_r+0x1f0>)
 8003036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800303a:	f000 f9e5 	bl	8003408 <memchr>
 800303e:	2800      	cmp	r0, #0
 8003040:	d038      	beq.n	80030b4 <_svfiprintf_r+0x1d8>
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <_svfiprintf_r+0x1f4>)
 8003044:	bb1b      	cbnz	r3, 800308e <_svfiprintf_r+0x1b2>
 8003046:	9b03      	ldr	r3, [sp, #12]
 8003048:	3307      	adds	r3, #7
 800304a:	f023 0307 	bic.w	r3, r3, #7
 800304e:	3308      	adds	r3, #8
 8003050:	9303      	str	r3, [sp, #12]
 8003052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003054:	4433      	add	r3, r6
 8003056:	9309      	str	r3, [sp, #36]	; 0x24
 8003058:	e767      	b.n	8002f2a <_svfiprintf_r+0x4e>
 800305a:	460c      	mov	r4, r1
 800305c:	2001      	movs	r0, #1
 800305e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003062:	e7a5      	b.n	8002fb0 <_svfiprintf_r+0xd4>
 8003064:	2300      	movs	r3, #0
 8003066:	f04f 0c0a 	mov.w	ip, #10
 800306a:	4619      	mov	r1, r3
 800306c:	3401      	adds	r4, #1
 800306e:	9305      	str	r3, [sp, #20]
 8003070:	4620      	mov	r0, r4
 8003072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003076:	3a30      	subs	r2, #48	; 0x30
 8003078:	2a09      	cmp	r2, #9
 800307a:	d903      	bls.n	8003084 <_svfiprintf_r+0x1a8>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0c5      	beq.n	800300c <_svfiprintf_r+0x130>
 8003080:	9105      	str	r1, [sp, #20]
 8003082:	e7c3      	b.n	800300c <_svfiprintf_r+0x130>
 8003084:	4604      	mov	r4, r0
 8003086:	2301      	movs	r3, #1
 8003088:	fb0c 2101 	mla	r1, ip, r1, r2
 800308c:	e7f0      	b.n	8003070 <_svfiprintf_r+0x194>
 800308e:	ab03      	add	r3, sp, #12
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	462a      	mov	r2, r5
 8003094:	4638      	mov	r0, r7
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <_svfiprintf_r+0x1f8>)
 8003098:	a904      	add	r1, sp, #16
 800309a:	f3af 8000 	nop.w
 800309e:	1c42      	adds	r2, r0, #1
 80030a0:	4606      	mov	r6, r0
 80030a2:	d1d6      	bne.n	8003052 <_svfiprintf_r+0x176>
 80030a4:	89ab      	ldrh	r3, [r5, #12]
 80030a6:	065b      	lsls	r3, r3, #25
 80030a8:	f53f af2c 	bmi.w	8002f04 <_svfiprintf_r+0x28>
 80030ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030ae:	b01d      	add	sp, #116	; 0x74
 80030b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030b4:	ab03      	add	r3, sp, #12
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	462a      	mov	r2, r5
 80030ba:	4638      	mov	r0, r7
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <_svfiprintf_r+0x1f8>)
 80030be:	a904      	add	r1, sp, #16
 80030c0:	f000 f87c 	bl	80031bc <_printf_i>
 80030c4:	e7eb      	b.n	800309e <_svfiprintf_r+0x1c2>
 80030c6:	bf00      	nop
 80030c8:	080036e8 	.word	0x080036e8
 80030cc:	080036f2 	.word	0x080036f2
 80030d0:	00000000 	.word	0x00000000
 80030d4:	08002e25 	.word	0x08002e25
 80030d8:	080036ee 	.word	0x080036ee

080030dc <_printf_common>:
 80030dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e0:	4616      	mov	r6, r2
 80030e2:	4699      	mov	r9, r3
 80030e4:	688a      	ldr	r2, [r1, #8]
 80030e6:	690b      	ldr	r3, [r1, #16]
 80030e8:	4607      	mov	r7, r0
 80030ea:	4293      	cmp	r3, r2
 80030ec:	bfb8      	it	lt
 80030ee:	4613      	movlt	r3, r2
 80030f0:	6033      	str	r3, [r6, #0]
 80030f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030f6:	460c      	mov	r4, r1
 80030f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030fc:	b10a      	cbz	r2, 8003102 <_printf_common+0x26>
 80030fe:	3301      	adds	r3, #1
 8003100:	6033      	str	r3, [r6, #0]
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	0699      	lsls	r1, r3, #26
 8003106:	bf42      	ittt	mi
 8003108:	6833      	ldrmi	r3, [r6, #0]
 800310a:	3302      	addmi	r3, #2
 800310c:	6033      	strmi	r3, [r6, #0]
 800310e:	6825      	ldr	r5, [r4, #0]
 8003110:	f015 0506 	ands.w	r5, r5, #6
 8003114:	d106      	bne.n	8003124 <_printf_common+0x48>
 8003116:	f104 0a19 	add.w	sl, r4, #25
 800311a:	68e3      	ldr	r3, [r4, #12]
 800311c:	6832      	ldr	r2, [r6, #0]
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	42ab      	cmp	r3, r5
 8003122:	dc28      	bgt.n	8003176 <_printf_common+0x9a>
 8003124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003128:	1e13      	subs	r3, r2, #0
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	bf18      	it	ne
 800312e:	2301      	movne	r3, #1
 8003130:	0692      	lsls	r2, r2, #26
 8003132:	d42d      	bmi.n	8003190 <_printf_common+0xb4>
 8003134:	4649      	mov	r1, r9
 8003136:	4638      	mov	r0, r7
 8003138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800313c:	47c0      	blx	r8
 800313e:	3001      	adds	r0, #1
 8003140:	d020      	beq.n	8003184 <_printf_common+0xa8>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	68e5      	ldr	r5, [r4, #12]
 8003146:	f003 0306 	and.w	r3, r3, #6
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf18      	it	ne
 800314e:	2500      	movne	r5, #0
 8003150:	6832      	ldr	r2, [r6, #0]
 8003152:	f04f 0600 	mov.w	r6, #0
 8003156:	68a3      	ldr	r3, [r4, #8]
 8003158:	bf08      	it	eq
 800315a:	1aad      	subeq	r5, r5, r2
 800315c:	6922      	ldr	r2, [r4, #16]
 800315e:	bf08      	it	eq
 8003160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003164:	4293      	cmp	r3, r2
 8003166:	bfc4      	itt	gt
 8003168:	1a9b      	subgt	r3, r3, r2
 800316a:	18ed      	addgt	r5, r5, r3
 800316c:	341a      	adds	r4, #26
 800316e:	42b5      	cmp	r5, r6
 8003170:	d11a      	bne.n	80031a8 <_printf_common+0xcc>
 8003172:	2000      	movs	r0, #0
 8003174:	e008      	b.n	8003188 <_printf_common+0xac>
 8003176:	2301      	movs	r3, #1
 8003178:	4652      	mov	r2, sl
 800317a:	4649      	mov	r1, r9
 800317c:	4638      	mov	r0, r7
 800317e:	47c0      	blx	r8
 8003180:	3001      	adds	r0, #1
 8003182:	d103      	bne.n	800318c <_printf_common+0xb0>
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800318c:	3501      	adds	r5, #1
 800318e:	e7c4      	b.n	800311a <_printf_common+0x3e>
 8003190:	2030      	movs	r0, #48	; 0x30
 8003192:	18e1      	adds	r1, r4, r3
 8003194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800319e:	4422      	add	r2, r4
 80031a0:	3302      	adds	r3, #2
 80031a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031a6:	e7c5      	b.n	8003134 <_printf_common+0x58>
 80031a8:	2301      	movs	r3, #1
 80031aa:	4622      	mov	r2, r4
 80031ac:	4649      	mov	r1, r9
 80031ae:	4638      	mov	r0, r7
 80031b0:	47c0      	blx	r8
 80031b2:	3001      	adds	r0, #1
 80031b4:	d0e6      	beq.n	8003184 <_printf_common+0xa8>
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7d9      	b.n	800316e <_printf_common+0x92>
	...

080031bc <_printf_i>:
 80031bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031c0:	460c      	mov	r4, r1
 80031c2:	7e27      	ldrb	r7, [r4, #24]
 80031c4:	4691      	mov	r9, r2
 80031c6:	2f78      	cmp	r7, #120	; 0x78
 80031c8:	4680      	mov	r8, r0
 80031ca:	469a      	mov	sl, r3
 80031cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031d2:	d807      	bhi.n	80031e4 <_printf_i+0x28>
 80031d4:	2f62      	cmp	r7, #98	; 0x62
 80031d6:	d80a      	bhi.n	80031ee <_printf_i+0x32>
 80031d8:	2f00      	cmp	r7, #0
 80031da:	f000 80d9 	beq.w	8003390 <_printf_i+0x1d4>
 80031de:	2f58      	cmp	r7, #88	; 0x58
 80031e0:	f000 80a4 	beq.w	800332c <_printf_i+0x170>
 80031e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031ec:	e03a      	b.n	8003264 <_printf_i+0xa8>
 80031ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031f2:	2b15      	cmp	r3, #21
 80031f4:	d8f6      	bhi.n	80031e4 <_printf_i+0x28>
 80031f6:	a001      	add	r0, pc, #4	; (adr r0, 80031fc <_printf_i+0x40>)
 80031f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80031fc:	08003255 	.word	0x08003255
 8003200:	08003269 	.word	0x08003269
 8003204:	080031e5 	.word	0x080031e5
 8003208:	080031e5 	.word	0x080031e5
 800320c:	080031e5 	.word	0x080031e5
 8003210:	080031e5 	.word	0x080031e5
 8003214:	08003269 	.word	0x08003269
 8003218:	080031e5 	.word	0x080031e5
 800321c:	080031e5 	.word	0x080031e5
 8003220:	080031e5 	.word	0x080031e5
 8003224:	080031e5 	.word	0x080031e5
 8003228:	08003377 	.word	0x08003377
 800322c:	08003299 	.word	0x08003299
 8003230:	08003359 	.word	0x08003359
 8003234:	080031e5 	.word	0x080031e5
 8003238:	080031e5 	.word	0x080031e5
 800323c:	08003399 	.word	0x08003399
 8003240:	080031e5 	.word	0x080031e5
 8003244:	08003299 	.word	0x08003299
 8003248:	080031e5 	.word	0x080031e5
 800324c:	080031e5 	.word	0x080031e5
 8003250:	08003361 	.word	0x08003361
 8003254:	680b      	ldr	r3, [r1, #0]
 8003256:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	600a      	str	r2, [r1, #0]
 8003260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003264:	2301      	movs	r3, #1
 8003266:	e0a4      	b.n	80033b2 <_printf_i+0x1f6>
 8003268:	6825      	ldr	r5, [r4, #0]
 800326a:	6808      	ldr	r0, [r1, #0]
 800326c:	062e      	lsls	r6, r5, #24
 800326e:	f100 0304 	add.w	r3, r0, #4
 8003272:	d50a      	bpl.n	800328a <_printf_i+0xce>
 8003274:	6805      	ldr	r5, [r0, #0]
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	2d00      	cmp	r5, #0
 800327a:	da03      	bge.n	8003284 <_printf_i+0xc8>
 800327c:	232d      	movs	r3, #45	; 0x2d
 800327e:	426d      	negs	r5, r5
 8003280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003284:	230a      	movs	r3, #10
 8003286:	485e      	ldr	r0, [pc, #376]	; (8003400 <_printf_i+0x244>)
 8003288:	e019      	b.n	80032be <_printf_i+0x102>
 800328a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800328e:	6805      	ldr	r5, [r0, #0]
 8003290:	600b      	str	r3, [r1, #0]
 8003292:	bf18      	it	ne
 8003294:	b22d      	sxthne	r5, r5
 8003296:	e7ef      	b.n	8003278 <_printf_i+0xbc>
 8003298:	680b      	ldr	r3, [r1, #0]
 800329a:	6825      	ldr	r5, [r4, #0]
 800329c:	1d18      	adds	r0, r3, #4
 800329e:	6008      	str	r0, [r1, #0]
 80032a0:	0628      	lsls	r0, r5, #24
 80032a2:	d501      	bpl.n	80032a8 <_printf_i+0xec>
 80032a4:	681d      	ldr	r5, [r3, #0]
 80032a6:	e002      	b.n	80032ae <_printf_i+0xf2>
 80032a8:	0669      	lsls	r1, r5, #25
 80032aa:	d5fb      	bpl.n	80032a4 <_printf_i+0xe8>
 80032ac:	881d      	ldrh	r5, [r3, #0]
 80032ae:	2f6f      	cmp	r7, #111	; 0x6f
 80032b0:	bf0c      	ite	eq
 80032b2:	2308      	moveq	r3, #8
 80032b4:	230a      	movne	r3, #10
 80032b6:	4852      	ldr	r0, [pc, #328]	; (8003400 <_printf_i+0x244>)
 80032b8:	2100      	movs	r1, #0
 80032ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032be:	6866      	ldr	r6, [r4, #4]
 80032c0:	2e00      	cmp	r6, #0
 80032c2:	bfa8      	it	ge
 80032c4:	6821      	ldrge	r1, [r4, #0]
 80032c6:	60a6      	str	r6, [r4, #8]
 80032c8:	bfa4      	itt	ge
 80032ca:	f021 0104 	bicge.w	r1, r1, #4
 80032ce:	6021      	strge	r1, [r4, #0]
 80032d0:	b90d      	cbnz	r5, 80032d6 <_printf_i+0x11a>
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d04d      	beq.n	8003372 <_printf_i+0x1b6>
 80032d6:	4616      	mov	r6, r2
 80032d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80032dc:	fb03 5711 	mls	r7, r3, r1, r5
 80032e0:	5dc7      	ldrb	r7, [r0, r7]
 80032e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032e6:	462f      	mov	r7, r5
 80032e8:	42bb      	cmp	r3, r7
 80032ea:	460d      	mov	r5, r1
 80032ec:	d9f4      	bls.n	80032d8 <_printf_i+0x11c>
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d10b      	bne.n	800330a <_printf_i+0x14e>
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	07df      	lsls	r7, r3, #31
 80032f6:	d508      	bpl.n	800330a <_printf_i+0x14e>
 80032f8:	6923      	ldr	r3, [r4, #16]
 80032fa:	6861      	ldr	r1, [r4, #4]
 80032fc:	4299      	cmp	r1, r3
 80032fe:	bfde      	ittt	le
 8003300:	2330      	movle	r3, #48	; 0x30
 8003302:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003306:	f106 36ff 	addle.w	r6, r6, #4294967295
 800330a:	1b92      	subs	r2, r2, r6
 800330c:	6122      	str	r2, [r4, #16]
 800330e:	464b      	mov	r3, r9
 8003310:	4621      	mov	r1, r4
 8003312:	4640      	mov	r0, r8
 8003314:	f8cd a000 	str.w	sl, [sp]
 8003318:	aa03      	add	r2, sp, #12
 800331a:	f7ff fedf 	bl	80030dc <_printf_common>
 800331e:	3001      	adds	r0, #1
 8003320:	d14c      	bne.n	80033bc <_printf_i+0x200>
 8003322:	f04f 30ff 	mov.w	r0, #4294967295
 8003326:	b004      	add	sp, #16
 8003328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332c:	4834      	ldr	r0, [pc, #208]	; (8003400 <_printf_i+0x244>)
 800332e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003332:	680e      	ldr	r6, [r1, #0]
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	f856 5b04 	ldr.w	r5, [r6], #4
 800333a:	061f      	lsls	r7, r3, #24
 800333c:	600e      	str	r6, [r1, #0]
 800333e:	d514      	bpl.n	800336a <_printf_i+0x1ae>
 8003340:	07d9      	lsls	r1, r3, #31
 8003342:	bf44      	itt	mi
 8003344:	f043 0320 	orrmi.w	r3, r3, #32
 8003348:	6023      	strmi	r3, [r4, #0]
 800334a:	b91d      	cbnz	r5, 8003354 <_printf_i+0x198>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	f023 0320 	bic.w	r3, r3, #32
 8003352:	6023      	str	r3, [r4, #0]
 8003354:	2310      	movs	r3, #16
 8003356:	e7af      	b.n	80032b8 <_printf_i+0xfc>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	f043 0320 	orr.w	r3, r3, #32
 800335e:	6023      	str	r3, [r4, #0]
 8003360:	2378      	movs	r3, #120	; 0x78
 8003362:	4828      	ldr	r0, [pc, #160]	; (8003404 <_printf_i+0x248>)
 8003364:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003368:	e7e3      	b.n	8003332 <_printf_i+0x176>
 800336a:	065e      	lsls	r6, r3, #25
 800336c:	bf48      	it	mi
 800336e:	b2ad      	uxthmi	r5, r5
 8003370:	e7e6      	b.n	8003340 <_printf_i+0x184>
 8003372:	4616      	mov	r6, r2
 8003374:	e7bb      	b.n	80032ee <_printf_i+0x132>
 8003376:	680b      	ldr	r3, [r1, #0]
 8003378:	6826      	ldr	r6, [r4, #0]
 800337a:	1d1d      	adds	r5, r3, #4
 800337c:	6960      	ldr	r0, [r4, #20]
 800337e:	600d      	str	r5, [r1, #0]
 8003380:	0635      	lsls	r5, r6, #24
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	d501      	bpl.n	800338a <_printf_i+0x1ce>
 8003386:	6018      	str	r0, [r3, #0]
 8003388:	e002      	b.n	8003390 <_printf_i+0x1d4>
 800338a:	0671      	lsls	r1, r6, #25
 800338c:	d5fb      	bpl.n	8003386 <_printf_i+0x1ca>
 800338e:	8018      	strh	r0, [r3, #0]
 8003390:	2300      	movs	r3, #0
 8003392:	4616      	mov	r6, r2
 8003394:	6123      	str	r3, [r4, #16]
 8003396:	e7ba      	b.n	800330e <_printf_i+0x152>
 8003398:	680b      	ldr	r3, [r1, #0]
 800339a:	1d1a      	adds	r2, r3, #4
 800339c:	600a      	str	r2, [r1, #0]
 800339e:	681e      	ldr	r6, [r3, #0]
 80033a0:	2100      	movs	r1, #0
 80033a2:	4630      	mov	r0, r6
 80033a4:	6862      	ldr	r2, [r4, #4]
 80033a6:	f000 f82f 	bl	8003408 <memchr>
 80033aa:	b108      	cbz	r0, 80033b0 <_printf_i+0x1f4>
 80033ac:	1b80      	subs	r0, r0, r6
 80033ae:	6060      	str	r0, [r4, #4]
 80033b0:	6863      	ldr	r3, [r4, #4]
 80033b2:	6123      	str	r3, [r4, #16]
 80033b4:	2300      	movs	r3, #0
 80033b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ba:	e7a8      	b.n	800330e <_printf_i+0x152>
 80033bc:	4632      	mov	r2, r6
 80033be:	4649      	mov	r1, r9
 80033c0:	4640      	mov	r0, r8
 80033c2:	6923      	ldr	r3, [r4, #16]
 80033c4:	47d0      	blx	sl
 80033c6:	3001      	adds	r0, #1
 80033c8:	d0ab      	beq.n	8003322 <_printf_i+0x166>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	079b      	lsls	r3, r3, #30
 80033ce:	d413      	bmi.n	80033f8 <_printf_i+0x23c>
 80033d0:	68e0      	ldr	r0, [r4, #12]
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	4298      	cmp	r0, r3
 80033d6:	bfb8      	it	lt
 80033d8:	4618      	movlt	r0, r3
 80033da:	e7a4      	b.n	8003326 <_printf_i+0x16a>
 80033dc:	2301      	movs	r3, #1
 80033de:	4632      	mov	r2, r6
 80033e0:	4649      	mov	r1, r9
 80033e2:	4640      	mov	r0, r8
 80033e4:	47d0      	blx	sl
 80033e6:	3001      	adds	r0, #1
 80033e8:	d09b      	beq.n	8003322 <_printf_i+0x166>
 80033ea:	3501      	adds	r5, #1
 80033ec:	68e3      	ldr	r3, [r4, #12]
 80033ee:	9903      	ldr	r1, [sp, #12]
 80033f0:	1a5b      	subs	r3, r3, r1
 80033f2:	42ab      	cmp	r3, r5
 80033f4:	dcf2      	bgt.n	80033dc <_printf_i+0x220>
 80033f6:	e7eb      	b.n	80033d0 <_printf_i+0x214>
 80033f8:	2500      	movs	r5, #0
 80033fa:	f104 0619 	add.w	r6, r4, #25
 80033fe:	e7f5      	b.n	80033ec <_printf_i+0x230>
 8003400:	080036f9 	.word	0x080036f9
 8003404:	0800370a 	.word	0x0800370a

08003408 <memchr>:
 8003408:	4603      	mov	r3, r0
 800340a:	b510      	push	{r4, lr}
 800340c:	b2c9      	uxtb	r1, r1
 800340e:	4402      	add	r2, r0
 8003410:	4293      	cmp	r3, r2
 8003412:	4618      	mov	r0, r3
 8003414:	d101      	bne.n	800341a <memchr+0x12>
 8003416:	2000      	movs	r0, #0
 8003418:	e003      	b.n	8003422 <memchr+0x1a>
 800341a:	7804      	ldrb	r4, [r0, #0]
 800341c:	3301      	adds	r3, #1
 800341e:	428c      	cmp	r4, r1
 8003420:	d1f6      	bne.n	8003410 <memchr+0x8>
 8003422:	bd10      	pop	{r4, pc}

08003424 <memcpy>:
 8003424:	440a      	add	r2, r1
 8003426:	4291      	cmp	r1, r2
 8003428:	f100 33ff 	add.w	r3, r0, #4294967295
 800342c:	d100      	bne.n	8003430 <memcpy+0xc>
 800342e:	4770      	bx	lr
 8003430:	b510      	push	{r4, lr}
 8003432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003436:	4291      	cmp	r1, r2
 8003438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800343c:	d1f9      	bne.n	8003432 <memcpy+0xe>
 800343e:	bd10      	pop	{r4, pc}

08003440 <memmove>:
 8003440:	4288      	cmp	r0, r1
 8003442:	b510      	push	{r4, lr}
 8003444:	eb01 0402 	add.w	r4, r1, r2
 8003448:	d902      	bls.n	8003450 <memmove+0x10>
 800344a:	4284      	cmp	r4, r0
 800344c:	4623      	mov	r3, r4
 800344e:	d807      	bhi.n	8003460 <memmove+0x20>
 8003450:	1e43      	subs	r3, r0, #1
 8003452:	42a1      	cmp	r1, r4
 8003454:	d008      	beq.n	8003468 <memmove+0x28>
 8003456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800345a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800345e:	e7f8      	b.n	8003452 <memmove+0x12>
 8003460:	4601      	mov	r1, r0
 8003462:	4402      	add	r2, r0
 8003464:	428a      	cmp	r2, r1
 8003466:	d100      	bne.n	800346a <memmove+0x2a>
 8003468:	bd10      	pop	{r4, pc}
 800346a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800346e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003472:	e7f7      	b.n	8003464 <memmove+0x24>

08003474 <_free_r>:
 8003474:	b538      	push	{r3, r4, r5, lr}
 8003476:	4605      	mov	r5, r0
 8003478:	2900      	cmp	r1, #0
 800347a:	d043      	beq.n	8003504 <_free_r+0x90>
 800347c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003480:	1f0c      	subs	r4, r1, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	bfb8      	it	lt
 8003486:	18e4      	addlt	r4, r4, r3
 8003488:	f000 f8d0 	bl	800362c <__malloc_lock>
 800348c:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <_free_r+0x94>)
 800348e:	6813      	ldr	r3, [r2, #0]
 8003490:	4610      	mov	r0, r2
 8003492:	b933      	cbnz	r3, 80034a2 <_free_r+0x2e>
 8003494:	6063      	str	r3, [r4, #4]
 8003496:	6014      	str	r4, [r2, #0]
 8003498:	4628      	mov	r0, r5
 800349a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800349e:	f000 b8cb 	b.w	8003638 <__malloc_unlock>
 80034a2:	42a3      	cmp	r3, r4
 80034a4:	d90a      	bls.n	80034bc <_free_r+0x48>
 80034a6:	6821      	ldr	r1, [r4, #0]
 80034a8:	1862      	adds	r2, r4, r1
 80034aa:	4293      	cmp	r3, r2
 80034ac:	bf01      	itttt	eq
 80034ae:	681a      	ldreq	r2, [r3, #0]
 80034b0:	685b      	ldreq	r3, [r3, #4]
 80034b2:	1852      	addeq	r2, r2, r1
 80034b4:	6022      	streq	r2, [r4, #0]
 80034b6:	6063      	str	r3, [r4, #4]
 80034b8:	6004      	str	r4, [r0, #0]
 80034ba:	e7ed      	b.n	8003498 <_free_r+0x24>
 80034bc:	461a      	mov	r2, r3
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	b10b      	cbz	r3, 80034c6 <_free_r+0x52>
 80034c2:	42a3      	cmp	r3, r4
 80034c4:	d9fa      	bls.n	80034bc <_free_r+0x48>
 80034c6:	6811      	ldr	r1, [r2, #0]
 80034c8:	1850      	adds	r0, r2, r1
 80034ca:	42a0      	cmp	r0, r4
 80034cc:	d10b      	bne.n	80034e6 <_free_r+0x72>
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	4401      	add	r1, r0
 80034d2:	1850      	adds	r0, r2, r1
 80034d4:	4283      	cmp	r3, r0
 80034d6:	6011      	str	r1, [r2, #0]
 80034d8:	d1de      	bne.n	8003498 <_free_r+0x24>
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4401      	add	r1, r0
 80034e0:	6011      	str	r1, [r2, #0]
 80034e2:	6053      	str	r3, [r2, #4]
 80034e4:	e7d8      	b.n	8003498 <_free_r+0x24>
 80034e6:	d902      	bls.n	80034ee <_free_r+0x7a>
 80034e8:	230c      	movs	r3, #12
 80034ea:	602b      	str	r3, [r5, #0]
 80034ec:	e7d4      	b.n	8003498 <_free_r+0x24>
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	1821      	adds	r1, r4, r0
 80034f2:	428b      	cmp	r3, r1
 80034f4:	bf01      	itttt	eq
 80034f6:	6819      	ldreq	r1, [r3, #0]
 80034f8:	685b      	ldreq	r3, [r3, #4]
 80034fa:	1809      	addeq	r1, r1, r0
 80034fc:	6021      	streq	r1, [r4, #0]
 80034fe:	6063      	str	r3, [r4, #4]
 8003500:	6054      	str	r4, [r2, #4]
 8003502:	e7c9      	b.n	8003498 <_free_r+0x24>
 8003504:	bd38      	pop	{r3, r4, r5, pc}
 8003506:	bf00      	nop
 8003508:	20000090 	.word	0x20000090

0800350c <_malloc_r>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	1ccd      	adds	r5, r1, #3
 8003510:	f025 0503 	bic.w	r5, r5, #3
 8003514:	3508      	adds	r5, #8
 8003516:	2d0c      	cmp	r5, #12
 8003518:	bf38      	it	cc
 800351a:	250c      	movcc	r5, #12
 800351c:	2d00      	cmp	r5, #0
 800351e:	4606      	mov	r6, r0
 8003520:	db01      	blt.n	8003526 <_malloc_r+0x1a>
 8003522:	42a9      	cmp	r1, r5
 8003524:	d903      	bls.n	800352e <_malloc_r+0x22>
 8003526:	230c      	movs	r3, #12
 8003528:	6033      	str	r3, [r6, #0]
 800352a:	2000      	movs	r0, #0
 800352c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800352e:	f000 f87d 	bl	800362c <__malloc_lock>
 8003532:	4921      	ldr	r1, [pc, #132]	; (80035b8 <_malloc_r+0xac>)
 8003534:	680a      	ldr	r2, [r1, #0]
 8003536:	4614      	mov	r4, r2
 8003538:	b99c      	cbnz	r4, 8003562 <_malloc_r+0x56>
 800353a:	4f20      	ldr	r7, [pc, #128]	; (80035bc <_malloc_r+0xb0>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b923      	cbnz	r3, 800354a <_malloc_r+0x3e>
 8003540:	4621      	mov	r1, r4
 8003542:	4630      	mov	r0, r6
 8003544:	f000 f862 	bl	800360c <_sbrk_r>
 8003548:	6038      	str	r0, [r7, #0]
 800354a:	4629      	mov	r1, r5
 800354c:	4630      	mov	r0, r6
 800354e:	f000 f85d 	bl	800360c <_sbrk_r>
 8003552:	1c43      	adds	r3, r0, #1
 8003554:	d123      	bne.n	800359e <_malloc_r+0x92>
 8003556:	230c      	movs	r3, #12
 8003558:	4630      	mov	r0, r6
 800355a:	6033      	str	r3, [r6, #0]
 800355c:	f000 f86c 	bl	8003638 <__malloc_unlock>
 8003560:	e7e3      	b.n	800352a <_malloc_r+0x1e>
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	1b5b      	subs	r3, r3, r5
 8003566:	d417      	bmi.n	8003598 <_malloc_r+0x8c>
 8003568:	2b0b      	cmp	r3, #11
 800356a:	d903      	bls.n	8003574 <_malloc_r+0x68>
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	441c      	add	r4, r3
 8003570:	6025      	str	r5, [r4, #0]
 8003572:	e004      	b.n	800357e <_malloc_r+0x72>
 8003574:	6863      	ldr	r3, [r4, #4]
 8003576:	42a2      	cmp	r2, r4
 8003578:	bf0c      	ite	eq
 800357a:	600b      	streq	r3, [r1, #0]
 800357c:	6053      	strne	r3, [r2, #4]
 800357e:	4630      	mov	r0, r6
 8003580:	f000 f85a 	bl	8003638 <__malloc_unlock>
 8003584:	f104 000b 	add.w	r0, r4, #11
 8003588:	1d23      	adds	r3, r4, #4
 800358a:	f020 0007 	bic.w	r0, r0, #7
 800358e:	1ac2      	subs	r2, r0, r3
 8003590:	d0cc      	beq.n	800352c <_malloc_r+0x20>
 8003592:	1a1b      	subs	r3, r3, r0
 8003594:	50a3      	str	r3, [r4, r2]
 8003596:	e7c9      	b.n	800352c <_malloc_r+0x20>
 8003598:	4622      	mov	r2, r4
 800359a:	6864      	ldr	r4, [r4, #4]
 800359c:	e7cc      	b.n	8003538 <_malloc_r+0x2c>
 800359e:	1cc4      	adds	r4, r0, #3
 80035a0:	f024 0403 	bic.w	r4, r4, #3
 80035a4:	42a0      	cmp	r0, r4
 80035a6:	d0e3      	beq.n	8003570 <_malloc_r+0x64>
 80035a8:	1a21      	subs	r1, r4, r0
 80035aa:	4630      	mov	r0, r6
 80035ac:	f000 f82e 	bl	800360c <_sbrk_r>
 80035b0:	3001      	adds	r0, #1
 80035b2:	d1dd      	bne.n	8003570 <_malloc_r+0x64>
 80035b4:	e7cf      	b.n	8003556 <_malloc_r+0x4a>
 80035b6:	bf00      	nop
 80035b8:	20000090 	.word	0x20000090
 80035bc:	20000094 	.word	0x20000094

080035c0 <_realloc_r>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	4607      	mov	r7, r0
 80035c4:	4614      	mov	r4, r2
 80035c6:	460e      	mov	r6, r1
 80035c8:	b921      	cbnz	r1, 80035d4 <_realloc_r+0x14>
 80035ca:	4611      	mov	r1, r2
 80035cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035d0:	f7ff bf9c 	b.w	800350c <_malloc_r>
 80035d4:	b922      	cbnz	r2, 80035e0 <_realloc_r+0x20>
 80035d6:	f7ff ff4d 	bl	8003474 <_free_r>
 80035da:	4625      	mov	r5, r4
 80035dc:	4628      	mov	r0, r5
 80035de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e0:	f000 f830 	bl	8003644 <_malloc_usable_size_r>
 80035e4:	42a0      	cmp	r0, r4
 80035e6:	d20f      	bcs.n	8003608 <_realloc_r+0x48>
 80035e8:	4621      	mov	r1, r4
 80035ea:	4638      	mov	r0, r7
 80035ec:	f7ff ff8e 	bl	800350c <_malloc_r>
 80035f0:	4605      	mov	r5, r0
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d0f2      	beq.n	80035dc <_realloc_r+0x1c>
 80035f6:	4631      	mov	r1, r6
 80035f8:	4622      	mov	r2, r4
 80035fa:	f7ff ff13 	bl	8003424 <memcpy>
 80035fe:	4631      	mov	r1, r6
 8003600:	4638      	mov	r0, r7
 8003602:	f7ff ff37 	bl	8003474 <_free_r>
 8003606:	e7e9      	b.n	80035dc <_realloc_r+0x1c>
 8003608:	4635      	mov	r5, r6
 800360a:	e7e7      	b.n	80035dc <_realloc_r+0x1c>

0800360c <_sbrk_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	2300      	movs	r3, #0
 8003610:	4d05      	ldr	r5, [pc, #20]	; (8003628 <_sbrk_r+0x1c>)
 8003612:	4604      	mov	r4, r0
 8003614:	4608      	mov	r0, r1
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	f7fd fc06 	bl	8000e28 <_sbrk>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_sbrk_r+0x1a>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	b103      	cbz	r3, 8003626 <_sbrk_r+0x1a>
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	200001c8 	.word	0x200001c8

0800362c <__malloc_lock>:
 800362c:	4801      	ldr	r0, [pc, #4]	; (8003634 <__malloc_lock+0x8>)
 800362e:	f000 b811 	b.w	8003654 <__retarget_lock_acquire_recursive>
 8003632:	bf00      	nop
 8003634:	200001d0 	.word	0x200001d0

08003638 <__malloc_unlock>:
 8003638:	4801      	ldr	r0, [pc, #4]	; (8003640 <__malloc_unlock+0x8>)
 800363a:	f000 b80c 	b.w	8003656 <__retarget_lock_release_recursive>
 800363e:	bf00      	nop
 8003640:	200001d0 	.word	0x200001d0

08003644 <_malloc_usable_size_r>:
 8003644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003648:	1f18      	subs	r0, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	bfbc      	itt	lt
 800364e:	580b      	ldrlt	r3, [r1, r0]
 8003650:	18c0      	addlt	r0, r0, r3
 8003652:	4770      	bx	lr

08003654 <__retarget_lock_acquire_recursive>:
 8003654:	4770      	bx	lr

08003656 <__retarget_lock_release_recursive>:
 8003656:	4770      	bx	lr

08003658 <_init>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr

08003664 <_fini>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr
