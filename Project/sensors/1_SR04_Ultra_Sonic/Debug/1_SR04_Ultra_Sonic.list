
1_SR04_Ultra_Sonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002f78  08002f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff8  08002ff8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ff8  08002ff8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ff8  08002ff8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  08003070  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003070  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b836  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf6  00000000  00000000  0002b8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002e050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ccf  00000000  00000000  0002eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdf3  00000000  00000000  000467cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a374  00000000  00000000  000525c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d0  00000000  00000000  000dc98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f60 	.word	0x08002f60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f60 	.word	0x08002f60

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <SendConstChar>:
{
	uint8_t l = sprintf(uartBuffer,"%lu",number);
	HAL_UART_Transmit(&huart1, (uint8_t *)uartBuffer, l, 500);
}
void SendConstChar(const char* constChar,UART_HandleTypeDef _huart)
{
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	f107 0014 	add.w	r0, r7, #20
 8000666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_UART_Transmit(&_huart,(uint8_t *)constChar,strlen((const char*)constChar),200);
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff fd6e 	bl	800014c <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	f107 0014 	add.w	r0, r7, #20
 8000678:	23c8      	movs	r3, #200	; 0xc8
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	f001 fe99 	bl	80023b2 <HAL_UART_Transmit>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
	...

08000690 <SendFloat>:
void SendFloat(float num,UART_HandleTypeDef _huart)
{
 8000690:	b084      	sub	sp, #16
 8000692:	b580      	push	{r7, lr}
 8000694:	b086      	sub	sp, #24
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800069e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint16_t intPart = (uint16_t)num;
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ffb8 	bl	8000618 <__aeabi_f2uiz>
 80006a8:	4603      	mov	r3, r0
 80006aa:	82fb      	strh	r3, [r7, #22]
	float  decPart  = (float )num - intPart;
 80006ac:	8afb      	ldrh	r3, [r7, #22]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fe0e 	bl	80002d0 <__aeabi_i2f>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4619      	mov	r1, r3
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff fd53 	bl	8000164 <__aeabi_fsub>
 80006be:	4603      	mov	r3, r0
 80006c0:	613b      	str	r3, [r7, #16]
	uint16_t decPart2 = (decPart*100)/10;
 80006c2:	4915      	ldr	r1, [pc, #84]	; (8000718 <SendFloat+0x88>)
 80006c4:	6938      	ldr	r0, [r7, #16]
 80006c6:	f7ff fe57 	bl	8000378 <__aeabi_fmul>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4913      	ldr	r1, [pc, #76]	; (800071c <SendFloat+0x8c>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff06 	bl	80004e0 <__aeabi_fdiv>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff9e 	bl	8000618 <__aeabi_f2uiz>
 80006dc:	4603      	mov	r3, r0
 80006de:	81fb      	strh	r3, [r7, #14]
	sprintf(uartBuffer,"%d.%d",intPart,decPart2);
 80006e0:	8afa      	ldrh	r2, [r7, #22]
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	490e      	ldr	r1, [pc, #56]	; (8000720 <SendFloat+0x90>)
 80006e6:	480f      	ldr	r0, [pc, #60]	; (8000724 <SendFloat+0x94>)
 80006e8:	f002 f800 	bl	80026ec <siprintf>
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, sprintf(uartBuffer,"%d.%d",intPart,decPart2), 400);
 80006ec:	8afa      	ldrh	r2, [r7, #22]
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	490b      	ldr	r1, [pc, #44]	; (8000720 <SendFloat+0x90>)
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <SendFloat+0x94>)
 80006f4:	f001 fffa 	bl	80026ec <siprintf>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000700:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <SendFloat+0x94>)
 8000706:	f001 fe54 	bl	80023b2 <HAL_UART_Transmit>
}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000714:	b004      	add	sp, #16
 8000716:	4770      	bx	lr
 8000718:	42c80000 	.word	0x42c80000
 800071c:	41200000 	.word	0x41200000
 8000720:	08002f7c 	.word	0x08002f7c
 8000724:	20000118 	.word	0x20000118

08000728 <delay_us>:
/* USER CODE BEGIN 0 */
//	if(htim ->Instance == htim2.Instance)
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
//}
void delay_us (uint16_t us,TIM_HandleTypeDef htim)
{
 8000728:	b084      	sub	sp, #16
 800072a:	b490      	push	{r4, r7}
 800072c:	b084      	sub	sp, #16
 800072e:	af00      	add	r7, sp, #0
 8000730:	4604      	mov	r4, r0
 8000732:	f107 001c 	add.w	r0, r7, #28
 8000736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800073a:	4623      	mov	r3, r4
 800073c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim,0);  // set the counter value a 0
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
	uint16_t counter = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	81fb      	strh	r3, [r7, #14]
	while ((counter = __HAL_TIM_GET_COUNTER(&htim)) != us);  // wait for the counter to reach the us input in the parameter
 8000748:	bf00      	nop
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	81fb      	strh	r3, [r7, #14]
 8000750:	89fa      	ldrh	r2, [r7, #14]
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	429a      	cmp	r2, r3
 8000756:	d1f8      	bne.n	800074a <delay_us+0x22>
	counter = counter;
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bc90      	pop	{r4, r7}
 8000762:	b004      	add	sp, #16
 8000764:	4770      	bx	lr
	...

08000768 <Trigger_10us>:
void Trigger_10us()
{
 8000768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800076a:	b091      	sub	sp, #68	; 0x44
 800076c:	af10      	add	r7, sp, #64	; 0x40
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	4813      	ldr	r0, [pc, #76]	; (80007c0 <Trigger_10us+0x58>)
 8000774:	f000 fe97 	bl	80014a6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fbf1 	bl	8000f60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2101      	movs	r1, #1
 8000782:	480f      	ldr	r0, [pc, #60]	; (80007c0 <Trigger_10us+0x58>)
 8000784:	f000 fe8f 	bl	80014a6 <HAL_GPIO_WritePin>
	delay_us(9,htim1);
 8000788:	4e0e      	ldr	r6, [pc, #56]	; (80007c4 <Trigger_10us+0x5c>)
 800078a:	466d      	mov	r5, sp
 800078c:	f106 040c 	add.w	r4, r6, #12
 8000790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800079a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800079c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007a4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80007a8:	2009      	movs	r0, #9
 80007aa:	f7ff ffbd 	bl	8000728 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2101      	movs	r1, #1
 80007b2:	4803      	ldr	r0, [pc, #12]	; (80007c0 <Trigger_10us+0x58>)
 80007b4:	f000 fe77 	bl	80014a6 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	3704      	adds	r7, #4
 80007bc:	46bd      	mov	sp, r7
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	40010800 	.word	0x40010800
 80007c4:	20000180 	.word	0x20000180

080007c8 <Echo_Read>:
uint16_t Echo_Read()
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
	while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1));
 80007ce:	bf00      	nop
 80007d0:	2102      	movs	r1, #2
 80007d2:	4816      	ldr	r0, [pc, #88]	; (800082c <Echo_Read+0x64>)
 80007d4:	f000 fe50 	bl	8001478 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f8      	beq.n	80007d0 <Echo_Read+0x8>
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <Echo_Read+0x68>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && __HAL_TIM_GET_COUNTER(&htim1) <HC_SR04_Timeout);
 80007e6:	bf00      	nop
 80007e8:	2102      	movs	r1, #2
 80007ea:	4810      	ldr	r0, [pc, #64]	; (800082c <Echo_Read+0x64>)
 80007ec:	f000 fe44 	bl	8001478 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d006      	beq.n	8000804 <Echo_Read+0x3c>
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <Echo_Read+0x68>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fc:	f249 426f 	movw	r2, #37999	; 0x946f
 8000800:	4293      	cmp	r3, r2
 8000802:	d9f1      	bls.n	80007e8 <Echo_Read+0x20>
	uint16_t us = __HAL_TIM_GET_COUNTER(&htim1);
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <Echo_Read+0x68>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	80fb      	strh	r3, [r7, #6]
	if(us<HC_SR04_Min	||	us>HC_SR04_Max ||us == HC_SR04_Timeout)
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	2b95      	cmp	r3, #149	; 0x95
 8000810:	d904      	bls.n	800081c <Echo_Read+0x54>
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	f249 4270 	movw	r2, #38000	; 0x9470
 8000818:	4293      	cmp	r3, r2
 800081a:	d101      	bne.n	8000820 <Echo_Read+0x58>
		return 0;
 800081c:	2300      	movs	r3, #0
 800081e:	e000      	b.n	8000822 <Echo_Read+0x5a>
	else
		return us;
 8000820:	88fb      	ldrh	r3, [r7, #6]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010800 	.word	0x40010800
 8000830:	20000180 	.word	0x20000180

08000834 <Distance_In_Centimeter>:
float Distance_In_Centimeter(uint16_t echo)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
	return 0.034f*echo/2;
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fd45 	bl	80002d0 <__aeabi_i2f>
 8000846:	4603      	mov	r3, r0
 8000848:	4907      	ldr	r1, [pc, #28]	; (8000868 <Distance_In_Centimeter+0x34>)
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fd94 	bl	8000378 <__aeabi_fmul>
 8000850:	4603      	mov	r3, r0
 8000852:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe42 	bl	80004e0 <__aeabi_fdiv>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	3d0b4396 	.word	0x3d0b4396

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086e:	b091      	sub	sp, #68	; 0x44
 8000870:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration------ --------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f000 fb13 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000876:	f000 f85b 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087a:	f000 f965 	bl	8000b48 <MX_GPIO_Init>
  MX_TIM1_Init();
 800087e:	f000 f89d 	bl	80009bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000882:	f000 f8eb 	bl	8000a5c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000886:	f000 f935 	bl	8000af4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 800088a:	4824      	ldr	r0, [pc, #144]	; (800091c <main+0xb0>)
 800088c:	f001 fa8e 	bl	8001dac <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000890:	4823      	ldr	r0, [pc, #140]	; (8000920 <main+0xb4>)
 8000892:	f001 fad5 	bl	8001e40 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Trigger_10us();
 8000896:	f7ff ff67 	bl	8000768 <Trigger_10us>
	  uint16_t pulse = Echo_Read();
 800089a:	f7ff ff95 	bl	80007c8 <Echo_Read>
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
	 float dis = Distance_In_Centimeter( pulse);
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ffc5 	bl	8000834 <Distance_In_Centimeter>
 80008aa:	6038      	str	r0, [r7, #0]
	 SendConstChar("Distance: ",huart1);
 80008ac:	4e1d      	ldr	r6, [pc, #116]	; (8000924 <main+0xb8>)
 80008ae:	466d      	mov	r5, sp
 80008b0:	f106 040c 	add.w	r4, r6, #12
 80008b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	602b      	str	r3, [r5, #0]
 80008c4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80008c8:	4817      	ldr	r0, [pc, #92]	; (8000928 <main+0xbc>)
 80008ca:	f7ff fec5 	bl	8000658 <SendConstChar>
	// SendUnsignedNumber(4294967295,huart1);
	  SendFloat(dis,huart1);
 80008ce:	4e15      	ldr	r6, [pc, #84]	; (8000924 <main+0xb8>)
 80008d0:	466d      	mov	r5, sp
 80008d2:	f106 040c 	add.w	r4, r6, #12
 80008d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	602b      	str	r3, [r5, #0]
 80008e6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80008ea:	6838      	ldr	r0, [r7, #0]
 80008ec:	f7ff fed0 	bl	8000690 <SendFloat>
		 SendConstChar(" cm\n",huart1);
 80008f0:	4e0c      	ldr	r6, [pc, #48]	; (8000924 <main+0xb8>)
 80008f2:	466d      	mov	r5, sp
 80008f4:	f106 040c 	add.w	r4, r6, #12
 80008f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	602b      	str	r3, [r5, #0]
 8000908:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <main+0xc0>)
 800090e:	f7ff fea3 	bl	8000658 <SendConstChar>
	  HAL_Delay(1000);
 8000912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000916:	f000 fb23 	bl	8000f60 <HAL_Delay>
  {
 800091a:	e7bc      	b.n	8000896 <main+0x2a>
 800091c:	20000180 	.word	0x20000180
 8000920:	200001c8 	.word	0x200001c8
 8000924:	20000098 	.word	0x20000098
 8000928:	08002f88 	.word	0x08002f88
 800092c:	08002f94 	.word	0x08002f94

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b090      	sub	sp, #64	; 0x40
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	2228      	movs	r2, #40	; 0x28
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fecc 	bl	80026dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000960:	2301      	movs	r3, #1
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800096e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0318 	add.w	r3, r7, #24
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fdad 	bl	80014d8 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000984:	f000 f94c 	bl	8000c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2102      	movs	r1, #2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 f818 	bl	80019d8 <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009ae:	f000 f937 	bl	8000c20 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3740      	adds	r7, #64	; 0x40
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009da:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <MX_TIM1_Init+0x9c>)
 80009dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009e0:	2247      	movs	r2, #71	; 0x47
 80009e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80009f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_TIM1_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_TIM1_Init+0x98>)
 8000a06:	f001 f981 	bl	8001d0c <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 f906 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM1_Init+0x98>)
 8000a22:	f001 fa5f 	bl	8001ee4 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a2c:	f000 f8f8 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM1_Init+0x98>)
 8000a3e:	f001 fc0d 	bl	800225c <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 f8ea 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000180 	.word	0x20000180
 8000a58:	40012c00 	.word	0x40012c00

08000a5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a82:	2247      	movs	r2, #71	; 0x47
 8000a84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000aa2:	f001 f933 	bl	8001d0c <HAL_TIM_Base_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000aac:	f000 f8b8 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	4619      	mov	r1, r3
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000abe:	f001 fa11 	bl	8001ee4 <HAL_TIM_ConfigClockSource>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ac8:	f000 f8aa 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_TIM2_Init+0x94>)
 8000ada:	f001 fbbf 	bl	800225c <HAL_TIMEx_MasterConfigSynchronization>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 f89c 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200001c8 	.word	0x200001c8

08000af4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_USART1_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	f001 fbf4 	bl	8002318 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 f873 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000098 	.word	0x20000098
 8000b44:	40013800 	.word	0x40013800

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a2c      	ldr	r2, [pc, #176]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000b7a:	f043 0320 	orr.w	r3, r3, #32
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0320 	and.w	r3, r3, #32
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <MX_GPIO_Init+0xcc>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000baa:	481b      	ldr	r0, [pc, #108]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000bac:	f000 fc7b 	bl	80014a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4819      	ldr	r0, [pc, #100]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000bb6:	f000 fc76 	bl	80014a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_GPIO_Init+0xd0>)
 8000bd4:	f000 facc 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	480b      	ldr	r0, [pc, #44]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000bf0:	f000 fabe 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000c08:	f000 fab2 	bl	8001170 <HAL_GPIO_Init>

}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	40010800 	.word	0x40010800

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_MspInit+0x60>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_MspInit+0x60>)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <HAL_TIM_Base_MspInit+0x58>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d10c      	bne.n	8000cbc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000ca8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cba:	e010      	b.n	8000cde <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc4:	d10b      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_TIM_Base_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40012c00 	.word	0x40012c00
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d131      	bne.n	8000d74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4619      	mov	r1, r3
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <HAL_UART_MspInit+0x94>)
 8000d56:	f000 fa0b 	bl	8001170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_UART_MspInit+0x94>)
 8000d70:	f000 f9fe 	bl	8001170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40013800 	.word	0x40013800
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010800 	.word	0x40010800

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dce:	f000 f8ab 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f001 fc3e 	bl	8002688 <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20005000 	.word	0x20005000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	2000008c 	.word	0x2000008c
 8000e40:	20000228 	.word	0x20000228

08000e44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e52:	e003      	b.n	8000e5c <LoopCopyDataInit>

08000e54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e5a:	3104      	adds	r1, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e5c:	480a      	ldr	r0, [pc, #40]	; (8000e88 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e64:	d3f6      	bcc.n	8000e54 <CopyDataInit>
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e68:	e002      	b.n	8000e70 <LoopFillZerobss>

08000e6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e6c:	f842 3b04 	str.w	r3, [r2], #4

08000e70 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e72:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e74:	d3f9      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e76:	f7ff ffe5 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f001 fc0b 	bl	8002694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7e:	f7ff fcf5 	bl	800086c <main>
  bx lr
 8000e82:	4770      	bx	lr
  ldr r3, =_sidata
 8000e84:	08003000 	.word	0x08003000
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e8c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000e90:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000e94:	20000224 	.word	0x20000224

08000e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_2_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x28>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x28>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f92b 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff feb8 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40022000 	.word	0x40022000

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f935 	bl	8001156 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f90b 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x1c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x20>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a03      	ldr	r2, [pc, #12]	; (8000f48 <HAL_IncTick+0x20>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000210 	.word	0x20000210

08000f4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <HAL_GetTick+0x10>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000210 	.word	0x20000210

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff fff0 	bl	8000f4c <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffe0 	bl	8000f4c <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff90 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff49 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff5e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff90 	bl	8001060 <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5f 	bl	800100c <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffb0 	bl	80010c4 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b08b      	sub	sp, #44	; 0x2c
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	e169      	b.n	8001458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001184:	2201      	movs	r2, #1
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8158 	bne.w	8001452 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4a9a      	ldr	r2, [pc, #616]	; (8001410 <HAL_GPIO_Init+0x2a0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d05e      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011ac:	4a98      	ldr	r2, [pc, #608]	; (8001410 <HAL_GPIO_Init+0x2a0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d875      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011b2:	4a98      	ldr	r2, [pc, #608]	; (8001414 <HAL_GPIO_Init+0x2a4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d058      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011b8:	4a96      	ldr	r2, [pc, #600]	; (8001414 <HAL_GPIO_Init+0x2a4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d86f      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011be:	4a96      	ldr	r2, [pc, #600]	; (8001418 <HAL_GPIO_Init+0x2a8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d052      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011c4:	4a94      	ldr	r2, [pc, #592]	; (8001418 <HAL_GPIO_Init+0x2a8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d869      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011ca:	4a94      	ldr	r2, [pc, #592]	; (800141c <HAL_GPIO_Init+0x2ac>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d04c      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011d0:	4a92      	ldr	r2, [pc, #584]	; (800141c <HAL_GPIO_Init+0x2ac>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d863      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011d6:	4a92      	ldr	r2, [pc, #584]	; (8001420 <HAL_GPIO_Init+0x2b0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d046      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011dc:	4a90      	ldr	r2, [pc, #576]	; (8001420 <HAL_GPIO_Init+0x2b0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d85d      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d82a      	bhi.n	800123c <HAL_GPIO_Init+0xcc>
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d859      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011ea:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <HAL_GPIO_Init+0x80>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	0800126b 	.word	0x0800126b
 80011f4:	08001245 	.word	0x08001245
 80011f8:	08001257 	.word	0x08001257
 80011fc:	08001299 	.word	0x08001299
 8001200:	0800129f 	.word	0x0800129f
 8001204:	0800129f 	.word	0x0800129f
 8001208:	0800129f 	.word	0x0800129f
 800120c:	0800129f 	.word	0x0800129f
 8001210:	0800129f 	.word	0x0800129f
 8001214:	0800129f 	.word	0x0800129f
 8001218:	0800129f 	.word	0x0800129f
 800121c:	0800129f 	.word	0x0800129f
 8001220:	0800129f 	.word	0x0800129f
 8001224:	0800129f 	.word	0x0800129f
 8001228:	0800129f 	.word	0x0800129f
 800122c:	0800129f 	.word	0x0800129f
 8001230:	0800129f 	.word	0x0800129f
 8001234:	0800124d 	.word	0x0800124d
 8001238:	08001261 	.word	0x08001261
 800123c:	4a79      	ldr	r2, [pc, #484]	; (8001424 <HAL_GPIO_Init+0x2b4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001242:	e02c      	b.n	800129e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	623b      	str	r3, [r7, #32]
          break;
 800124a:	e029      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	3304      	adds	r3, #4
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e024      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	3308      	adds	r3, #8
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e01f      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	330c      	adds	r3, #12
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e01a      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001272:	2304      	movs	r3, #4
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e013      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d105      	bne.n	800128c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001280:	2308      	movs	r3, #8
 8001282:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	611a      	str	r2, [r3, #16]
          break;
 800128a:	e009      	b.n	80012a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800128c:	2308      	movs	r3, #8
 800128e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	615a      	str	r2, [r3, #20]
          break;
 8001296:	e003      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
          break;
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          break;
 800129e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d801      	bhi.n	80012aa <HAL_GPIO_Init+0x13a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	e001      	b.n	80012ae <HAL_GPIO_Init+0x13e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3304      	adds	r3, #4
 80012ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2bff      	cmp	r3, #255	; 0xff
 80012b4:	d802      	bhi.n	80012bc <HAL_GPIO_Init+0x14c>
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	e002      	b.n	80012c2 <HAL_GPIO_Init+0x152>
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	3b08      	subs	r3, #8
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	210f      	movs	r1, #15
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	6a39      	ldr	r1, [r7, #32]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	431a      	orrs	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80b1 	beq.w	8001452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f0:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x2b8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_GPIO_Init+0x2b8>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_GPIO_Init+0x2b8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001308:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_GPIO_Init+0x2bc>)
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a40      	ldr	r2, [pc, #256]	; (8001430 <HAL_GPIO_Init+0x2c0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d013      	beq.n	800135c <HAL_GPIO_Init+0x1ec>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a3f      	ldr	r2, [pc, #252]	; (8001434 <HAL_GPIO_Init+0x2c4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00d      	beq.n	8001358 <HAL_GPIO_Init+0x1e8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a3e      	ldr	r2, [pc, #248]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0x1e4>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3d      	ldr	r2, [pc, #244]	; (800143c <HAL_GPIO_Init+0x2cc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_GPIO_Init+0x1e0>
 800134c:	2303      	movs	r3, #3
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001350:	2304      	movs	r3, #4
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001354:	2302      	movs	r3, #2
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 800135c:	2300      	movs	r3, #0
 800135e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800136e:	492f      	ldr	r1, [pc, #188]	; (800142c <HAL_GPIO_Init+0x2bc>)
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	492c      	ldr	r1, [pc, #176]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	4928      	ldr	r1, [pc, #160]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4922      	ldr	r1, [pc, #136]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	491e      	ldr	r1, [pc, #120]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	4918      	ldr	r1, [pc, #96]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4914      	ldr	r1, [pc, #80]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d021      	beq.n	8001444 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	490e      	ldr	r1, [pc, #56]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
 800140c:	e021      	b.n	8001452 <HAL_GPIO_Init+0x2e2>
 800140e:	bf00      	nop
 8001410:	10320000 	.word	0x10320000
 8001414:	10310000 	.word	0x10310000
 8001418:	10220000 	.word	0x10220000
 800141c:	10210000 	.word	0x10210000
 8001420:	10120000 	.word	0x10120000
 8001424:	10110000 	.word	0x10110000
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000
 8001430:	40010800 	.word	0x40010800
 8001434:	40010c00 	.word	0x40010c00
 8001438:	40011000 	.word	0x40011000
 800143c:	40011400 	.word	0x40011400
 8001440:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_GPIO_Init+0x304>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	43db      	mvns	r3, r3
 800144c:	4909      	ldr	r1, [pc, #36]	; (8001474 <HAL_GPIO_Init+0x304>)
 800144e:	4013      	ands	r3, r2
 8001450:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	3301      	adds	r3, #1
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	f47f ae8e 	bne.w	8001184 <HAL_GPIO_Init+0x14>
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	372c      	adds	r7, #44	; 0x2c
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e001      	b.n	800149a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	807b      	strh	r3, [r7, #2]
 80014b2:	4613      	mov	r3, r2
 80014b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b6:	787b      	ldrb	r3, [r7, #1]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014bc:	887a      	ldrh	r2, [r7, #2]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014c2:	e003      	b.n	80014cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	041a      	lsls	r2, r3, #16
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	611a      	str	r2, [r3, #16]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e26c      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 8087 	beq.w	8001606 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f8:	4b92      	ldr	r3, [pc, #584]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b04      	cmp	r3, #4
 8001502:	d00c      	beq.n	800151e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001504:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d112      	bne.n	8001536 <HAL_RCC_OscConfig+0x5e>
 8001510:	4b8c      	ldr	r3, [pc, #560]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d10b      	bne.n	8001536 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151e:	4b89      	ldr	r3, [pc, #548]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d06c      	beq.n	8001604 <HAL_RCC_OscConfig+0x12c>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d168      	bne.n	8001604 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e246      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x76>
 8001540:	4b80      	ldr	r3, [pc, #512]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a7f      	ldr	r2, [pc, #508]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e02e      	b.n	80015ac <HAL_RCC_OscConfig+0xd4>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x98>
 8001556:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a7a      	ldr	r2, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800155c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b78      	ldr	r3, [pc, #480]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a77      	ldr	r2, [pc, #476]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e01d      	b.n	80015ac <HAL_RCC_OscConfig+0xd4>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0xbc>
 800157a:	4b72      	ldr	r3, [pc, #456]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a71      	ldr	r2, [pc, #452]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b6f      	ldr	r3, [pc, #444]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0xd4>
 8001594:	4b6b      	ldr	r3, [pc, #428]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a6a      	ldr	r2, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800159a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a67      	ldr	r2, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fcca 	bl	8000f4c <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fcc6 	bl	8000f4c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e1fa      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0xe4>
 80015da:	e014      	b.n	8001606 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fcb6 	bl	8000f4c <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fcb2 	bl	8000f4c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1e6      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x10c>
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d063      	beq.n	80016da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001612:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800161e:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b08      	cmp	r3, #8
 8001628:	d11c      	bne.n	8001664 <HAL_RCC_OscConfig+0x18c>
 800162a:	4b46      	ldr	r3, [pc, #280]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d116      	bne.n	8001664 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	4b43      	ldr	r3, [pc, #268]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x176>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e1ba      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4939      	ldr	r1, [pc, #228]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	e03a      	b.n	80016da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d020      	beq.n	80016ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166c:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fc6b 	bl	8000f4c <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fc67 	bl	8000f4c <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e19b      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4927      	ldr	r1, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fc4a 	bl	8000f4c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016bc:	f7ff fc46 	bl	8000f4c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e17a      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d03a      	beq.n	800175c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d019      	beq.n	8001722 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_RCC_OscConfig+0x274>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff fc2a 	bl	8000f4c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff fc26 	bl	8000f4c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e15a      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_RCC_OscConfig+0x26c>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800171a:	2001      	movs	r0, #1
 800171c:	f000 fad8 	bl	8001cd0 <RCC_Delay>
 8001720:	e01c      	b.n	800175c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_RCC_OscConfig+0x274>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff fc10 	bl	8000f4c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172e:	e00f      	b.n	8001750 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fc0c 	bl	8000f4c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d908      	bls.n	8001750 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e140      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	42420000 	.word	0x42420000
 800174c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	4b9e      	ldr	r3, [pc, #632]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1e9      	bne.n	8001730 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80a6 	beq.w	80018b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176e:	4b97      	ldr	r3, [pc, #604]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10d      	bne.n	8001796 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b94      	ldr	r3, [pc, #592]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a93      	ldr	r2, [pc, #588]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b91      	ldr	r3, [pc, #580]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001792:	2301      	movs	r3, #1
 8001794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001796:	4b8e      	ldr	r3, [pc, #568]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d118      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a2:	4b8b      	ldr	r3, [pc, #556]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a8a      	ldr	r2, [pc, #552]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fbcd 	bl	8000f4c <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b6:	f7ff fbc9 	bl	8000f4c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b64      	cmp	r3, #100	; 0x64
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0fd      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	4b81      	ldr	r3, [pc, #516]	; (80019d0 <HAL_RCC_OscConfig+0x4f8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x312>
 80017dc:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a7a      	ldr	r2, [pc, #488]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	e02d      	b.n	8001846 <HAL_RCC_OscConfig+0x36e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x334>
 80017f2:	4b76      	ldr	r3, [pc, #472]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a75      	ldr	r2, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	4b73      	ldr	r3, [pc, #460]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a72      	ldr	r2, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	6213      	str	r3, [r2, #32]
 800180a:	e01c      	b.n	8001846 <HAL_RCC_OscConfig+0x36e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d10c      	bne.n	800182e <HAL_RCC_OscConfig+0x356>
 8001814:	4b6d      	ldr	r3, [pc, #436]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4a6c      	ldr	r2, [pc, #432]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6213      	str	r3, [r2, #32]
 8001820:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4a69      	ldr	r2, [pc, #420]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	e00b      	b.n	8001846 <HAL_RCC_OscConfig+0x36e>
 800182e:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a66      	ldr	r2, [pc, #408]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	4b64      	ldr	r3, [pc, #400]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a63      	ldr	r2, [pc, #396]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d015      	beq.n	800187a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fb7d 	bl	8000f4c <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff fb79 	bl	8000f4c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0ab      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	4b57      	ldr	r3, [pc, #348]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0ee      	beq.n	8001856 <HAL_RCC_OscConfig+0x37e>
 8001878:	e014      	b.n	80018a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff fb67 	bl	8000f4c <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff fb63 	bl	8000f4c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e095      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	4b4c      	ldr	r3, [pc, #304]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1ee      	bne.n	8001882 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d105      	bne.n	80018b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018aa:	4b48      	ldr	r3, [pc, #288]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a47      	ldr	r2, [pc, #284]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8081 	beq.w	80019c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c0:	4b42      	ldr	r3, [pc, #264]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d061      	beq.n	8001990 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d146      	bne.n	8001962 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d4:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <HAL_RCC_OscConfig+0x4fc>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fb37 	bl	8000f4c <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff fb33 	bl	8000f4c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e067      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f4:	4b35      	ldr	r3, [pc, #212]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d108      	bne.n	800191c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	492d      	ldr	r1, [pc, #180]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a19      	ldr	r1, [r3, #32]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	430b      	orrs	r3, r1
 800192e:	4927      	ldr	r1, [pc, #156]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_RCC_OscConfig+0x4fc>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fb07 	bl	8000f4c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff fb03 	bl	8000f4c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e037      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x46a>
 8001960:	e02f      	b.n	80019c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_RCC_OscConfig+0x4fc>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff faf0 	bl	8000f4c <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff faec 	bl	8000f4c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e020      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x498>
 800198e:	e018      	b.n	80019c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e013      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d106      	bne.n	80019be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40007000 	.word	0x40007000
 80019d4:	42420060 	.word	0x42420060

080019d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0d0      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d910      	bls.n	8001a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0207 	bic.w	r2, r3, #7
 8001a02:	4965      	ldr	r1, [pc, #404]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0b8      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a34:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a58      	ldr	r2, [pc, #352]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	494d      	ldr	r1, [pc, #308]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d040      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d115      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e07f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a96:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e073      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06b      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab6:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f023 0203 	bic.w	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4936      	ldr	r1, [pc, #216]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac8:	f7ff fa40 	bl	8000f4c <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad0:	f7ff fa3c 	bl	8000f4c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e053      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 020c 	and.w	r2, r3, #12
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d1eb      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d210      	bcs.n	8001b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 0207 	bic.w	r2, r3, #7
 8001b0e:	4922      	ldr	r1, [pc, #136]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e032      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4916      	ldr	r1, [pc, #88]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	490e      	ldr	r1, [pc, #56]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b66:	f000 f821 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	490a      	ldr	r1, [pc, #40]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	5ccb      	ldrb	r3, [r1, r3]
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8001b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f99e 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08002fac 	.word	0x08002fac
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	b490      	push	{r4, r7}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bb4:	1d3c      	adds	r4, r7, #4
 8001bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bbc:	f240 2301 	movw	r3, #513	; 0x201
 8001bc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d002      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x40>
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x46>
 8001bea:	e02d      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bee:	623b      	str	r3, [r7, #32]
      break;
 8001bf0:	e02d      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	0c9b      	lsrs	r3, r3, #18
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bfe:	4413      	add	r3, r2
 8001c00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0c5b      	lsrs	r3, r3, #17
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c1e:	4413      	add	r3, r2
 8001c20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2a:	fb02 f203 	mul.w	r2, r2, r3
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
 8001c36:	e004      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	623b      	str	r3, [r7, #32]
      break;
 8001c46:	e002      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c4a:	623b      	str	r3, [r7, #32]
      break;
 8001c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3728      	adds	r7, #40	; 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc90      	pop	{r4, r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	08002f9c 	.word	0x08002f9c
 8001c60:	40021000 	.word	0x40021000
 8001c64:	007a1200 	.word	0x007a1200
 8001c68:	003d0900 	.word	0x003d0900

08001c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	20000000 	.word	0x20000000

08001c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c84:	f7ff fff2 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4903      	ldr	r1, [pc, #12]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08002fbc 	.word	0x08002fbc

08001ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0adb      	lsrs	r3, r3, #11
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4903      	ldr	r1, [pc, #12]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08002fbc 	.word	0x08002fbc

08001cd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <RCC_Delay+0x34>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <RCC_Delay+0x38>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0a5b      	lsrs	r3, r3, #9
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cec:	bf00      	nop
  }
  while (Delay --);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	60fa      	str	r2, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <RCC_Delay+0x1c>
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	20000000 	.word	0x20000000
 8001d08:	10624dd3 	.word	0x10624dd3

08001d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e041      	b.n	8001da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7fe ffac 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f000 f98e 	bl	800206c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d001      	beq.n	8001dc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e032      	b.n	8001e2a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <HAL_TIM_Base_Start+0x88>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_TIM_Base_Start+0x48>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dde:	d009      	beq.n	8001df4 <HAL_TIM_Base_Start+0x48>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_TIM_Base_Start+0x8c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_TIM_Base_Start+0x48>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <HAL_TIM_Base_Start+0x90>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d111      	bne.n	8001e18 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d010      	beq.n	8001e28 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e16:	e007      	b.n	8001e28 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40000800 	.word	0x40000800

08001e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d001      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e03a      	b.n	8001ece <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_TIM_Base_Start_IT+0x98>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00e      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x58>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d009      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x58>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_TIM_Base_Start_IT+0x9c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x58>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d111      	bne.n	8001ebc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d010      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	e007      	b.n	8001ecc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40012c00 	.word	0x40012c00
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40000800 	.word	0x40000800

08001ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_TIM_ConfigClockSource+0x18>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0b3      	b.n	8002064 <HAL_TIM_ConfigClockSource+0x180>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f34:	d03e      	beq.n	8001fb4 <HAL_TIM_ConfigClockSource+0xd0>
 8001f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3a:	f200 8087 	bhi.w	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f42:	f000 8085 	beq.w	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4a:	d87f      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f4c:	2b70      	cmp	r3, #112	; 0x70
 8001f4e:	d01a      	beq.n	8001f86 <HAL_TIM_ConfigClockSource+0xa2>
 8001f50:	2b70      	cmp	r3, #112	; 0x70
 8001f52:	d87b      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f54:	2b60      	cmp	r3, #96	; 0x60
 8001f56:	d050      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x116>
 8001f58:	2b60      	cmp	r3, #96	; 0x60
 8001f5a:	d877      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f5c:	2b50      	cmp	r3, #80	; 0x50
 8001f5e:	d03c      	beq.n	8001fda <HAL_TIM_ConfigClockSource+0xf6>
 8001f60:	2b50      	cmp	r3, #80	; 0x50
 8001f62:	d873      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d058      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x136>
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d86f      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f6c:	2b30      	cmp	r3, #48	; 0x30
 8001f6e:	d064      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
 8001f70:	2b30      	cmp	r3, #48	; 0x30
 8001f72:	d86b      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d060      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d867      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05c      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d05a      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f84:	e062      	b.n	800204c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f000 f942 	bl	800221e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fa8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	609a      	str	r2, [r3, #8]
      break;
 8001fb2:	e04e      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6899      	ldr	r1, [r3, #8]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f000 f92b 	bl	800221e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fd6:	609a      	str	r2, [r3, #8]
      break;
 8001fd8:	e03b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6859      	ldr	r1, [r3, #4]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f000 f8a2 	bl	8002130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2150      	movs	r1, #80	; 0x50
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f8f9 	bl	80021ea <TIM_ITRx_SetConfig>
      break;
 8001ff8:	e02b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	461a      	mov	r2, r3
 8002008:	f000 f8c0 	bl	800218c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2160      	movs	r1, #96	; 0x60
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f8e9 	bl	80021ea <TIM_ITRx_SetConfig>
      break;
 8002018:	e01b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	461a      	mov	r2, r3
 8002028:	f000 f882 	bl	8002130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2140      	movs	r1, #64	; 0x40
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f8d9 	bl	80021ea <TIM_ITRx_SetConfig>
      break;
 8002038:	e00b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4619      	mov	r1, r3
 8002044:	4610      	mov	r0, r2
 8002046:	f000 f8d0 	bl	80021ea <TIM_ITRx_SetConfig>
        break;
 800204a:	e002      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800204c:	bf00      	nop
 800204e:	e000      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002050:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a29      	ldr	r2, [pc, #164]	; (8002124 <TIM_Base_SetConfig+0xb8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00b      	beq.n	800209c <TIM_Base_SetConfig+0x30>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d007      	beq.n	800209c <TIM_Base_SetConfig+0x30>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a26      	ldr	r2, [pc, #152]	; (8002128 <TIM_Base_SetConfig+0xbc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d003      	beq.n	800209c <TIM_Base_SetConfig+0x30>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a25      	ldr	r2, [pc, #148]	; (800212c <TIM_Base_SetConfig+0xc0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d108      	bne.n	80020ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <TIM_Base_SetConfig+0xb8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00b      	beq.n	80020ce <TIM_Base_SetConfig+0x62>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020bc:	d007      	beq.n	80020ce <TIM_Base_SetConfig+0x62>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a19      	ldr	r2, [pc, #100]	; (8002128 <TIM_Base_SetConfig+0xbc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d003      	beq.n	80020ce <TIM_Base_SetConfig+0x62>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a18      	ldr	r2, [pc, #96]	; (800212c <TIM_Base_SetConfig+0xc0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d108      	bne.n	80020e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a07      	ldr	r2, [pc, #28]	; (8002124 <TIM_Base_SetConfig+0xb8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d103      	bne.n	8002114 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	615a      	str	r2, [r3, #20]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40000400 	.word	0x40000400
 800212c:	40000800 	.word	0x40000800

08002130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f023 0201 	bic.w	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800215a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f023 030a 	bic.w	r3, r3, #10
 800216c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	621a      	str	r2, [r3, #32]
}
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f023 0210 	bic.w	r2, r3, #16
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	031b      	lsls	r3, r3, #12
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	621a      	str	r2, [r3, #32]
}
 80021e0:	bf00      	nop
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	f043 0307 	orr.w	r3, r3, #7
 800220c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	609a      	str	r2, [r3, #8]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800221e:	b480      	push	{r7}
 8002220:	b087      	sub	sp, #28
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002238:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	021a      	lsls	r2, r3, #8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	431a      	orrs	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4313      	orrs	r3, r2
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	609a      	str	r2, [r3, #8]
}
 8002252:	bf00      	nop
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002270:	2302      	movs	r3, #2
 8002272:	e046      	b.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00e      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d009      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10c      	bne.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800

08002318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e03f      	b.n	80023aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d106      	bne.n	8002344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fe fcd6 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2224      	movs	r2, #36	; 0x24
 8002348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800235a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f905 	bl	800256c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b08a      	sub	sp, #40	; 0x28
 80023b6:	af02      	add	r7, sp, #8
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d17c      	bne.n	80024cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_UART_Transmit+0x2c>
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e075      	b.n	80024ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_UART_Transmit+0x3e>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e06e      	b.n	80024ce <HAL_UART_Transmit+0x11c>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2221      	movs	r2, #33	; 0x21
 8002402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002406:	f7fe fda1 	bl	8000f4c <HAL_GetTick>
 800240a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	88fa      	ldrh	r2, [r7, #6]
 8002410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002420:	d108      	bne.n	8002434 <HAL_UART_Transmit+0x82>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d104      	bne.n	8002434 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	e003      	b.n	800243c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002444:	e02a      	b.n	800249c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f840 	bl	80024d6 <UART_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e036      	b.n	80024ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10b      	bne.n	800247e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	3302      	adds	r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	e007      	b.n	800248e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	3301      	adds	r3, #1
 800248c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1cf      	bne.n	8002446 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2140      	movs	r1, #64	; 0x40
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f810 	bl	80024d6 <UART_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e006      	b.n	80024ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	4613      	mov	r3, r2
 80024e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e6:	e02c      	b.n	8002542 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	d028      	beq.n	8002542 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <UART_WaitOnFlagUntilTimeout+0x30>
 80024f6:	f7fe fd29 	bl	8000f4c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	429a      	cmp	r2, r3
 8002504:	d21d      	bcs.n	8002542 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002514:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e00f      	b.n	8002562 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4013      	ands	r3, r2
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	429a      	cmp	r2, r3
 8002550:	bf0c      	ite	eq
 8002552:	2301      	moveq	r3, #1
 8002554:	2300      	movne	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	429a      	cmp	r2, r3
 800255e:	d0c3      	beq.n	80024e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025a6:	f023 030c 	bic.w	r3, r3, #12
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2c      	ldr	r2, [pc, #176]	; (8002680 <UART_SetConfig+0x114>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d103      	bne.n	80025dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025d4:	f7ff fb68 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	e002      	b.n	80025e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025dc:	f7ff fb50 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 80025e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009a      	lsls	r2, r3, #2
 80025ec:	441a      	add	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	4a22      	ldr	r2, [pc, #136]	; (8002684 <UART_SetConfig+0x118>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	0119      	lsls	r1, r3, #4
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009a      	lsls	r2, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fbb2 f2f3 	udiv	r2, r2, r3
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <UART_SetConfig+0x118>)
 800261a:	fba3 0302 	umull	r0, r3, r3, r2
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2064      	movs	r0, #100	; 0x64
 8002622:	fb00 f303 	mul.w	r3, r0, r3
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	3332      	adds	r3, #50	; 0x32
 800262c:	4a15      	ldr	r2, [pc, #84]	; (8002684 <UART_SetConfig+0x118>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002638:	4419      	add	r1, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	009a      	lsls	r2, r3, #2
 8002644:	441a      	add	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <UART_SetConfig+0x118>)
 8002652:	fba3 0302 	umull	r0, r3, r3, r2
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2064      	movs	r0, #100	; 0x64
 800265a:	fb00 f303 	mul.w	r3, r0, r3
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	3332      	adds	r3, #50	; 0x32
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <UART_SetConfig+0x118>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	f003 020f 	and.w	r2, r3, #15
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	440a      	add	r2, r1
 8002676:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40013800 	.word	0x40013800
 8002684:	51eb851f 	.word	0x51eb851f

08002688 <__errno>:
 8002688:	4b01      	ldr	r3, [pc, #4]	; (8002690 <__errno+0x8>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	2000000c 	.word	0x2000000c

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	2600      	movs	r6, #0
 8002698:	4d0c      	ldr	r5, [pc, #48]	; (80026cc <__libc_init_array+0x38>)
 800269a:	4c0d      	ldr	r4, [pc, #52]	; (80026d0 <__libc_init_array+0x3c>)
 800269c:	1b64      	subs	r4, r4, r5
 800269e:	10a4      	asrs	r4, r4, #2
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	f000 fc5c 	bl	8002f60 <_init>
 80026a8:	2600      	movs	r6, #0
 80026aa:	4d0a      	ldr	r5, [pc, #40]	; (80026d4 <__libc_init_array+0x40>)
 80026ac:	4c0a      	ldr	r4, [pc, #40]	; (80026d8 <__libc_init_array+0x44>)
 80026ae:	1b64      	subs	r4, r4, r5
 80026b0:	10a4      	asrs	r4, r4, #2
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	08002ff8 	.word	0x08002ff8
 80026d0:	08002ff8 	.word	0x08002ff8
 80026d4:	08002ff8 	.word	0x08002ff8
 80026d8:	08002ffc 	.word	0x08002ffc

080026dc <memset>:
 80026dc:	4603      	mov	r3, r0
 80026de:	4402      	add	r2, r0
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d100      	bne.n	80026e6 <memset+0xa>
 80026e4:	4770      	bx	lr
 80026e6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ea:	e7f9      	b.n	80026e0 <memset+0x4>

080026ec <siprintf>:
 80026ec:	b40e      	push	{r1, r2, r3}
 80026ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026f2:	b500      	push	{lr}
 80026f4:	b09c      	sub	sp, #112	; 0x70
 80026f6:	ab1d      	add	r3, sp, #116	; 0x74
 80026f8:	9002      	str	r0, [sp, #8]
 80026fa:	9006      	str	r0, [sp, #24]
 80026fc:	9107      	str	r1, [sp, #28]
 80026fe:	9104      	str	r1, [sp, #16]
 8002700:	4808      	ldr	r0, [pc, #32]	; (8002724 <siprintf+0x38>)
 8002702:	4909      	ldr	r1, [pc, #36]	; (8002728 <siprintf+0x3c>)
 8002704:	f853 2b04 	ldr.w	r2, [r3], #4
 8002708:	9105      	str	r1, [sp, #20]
 800270a:	6800      	ldr	r0, [r0, #0]
 800270c:	a902      	add	r1, sp, #8
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	f000 f868 	bl	80027e4 <_svfiprintf_r>
 8002714:	2200      	movs	r2, #0
 8002716:	9b02      	ldr	r3, [sp, #8]
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	b01c      	add	sp, #112	; 0x70
 800271c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002720:	b003      	add	sp, #12
 8002722:	4770      	bx	lr
 8002724:	2000000c 	.word	0x2000000c
 8002728:	ffff0208 	.word	0xffff0208

0800272c <__ssputs_r>:
 800272c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002730:	688e      	ldr	r6, [r1, #8]
 8002732:	4682      	mov	sl, r0
 8002734:	429e      	cmp	r6, r3
 8002736:	460c      	mov	r4, r1
 8002738:	4690      	mov	r8, r2
 800273a:	461f      	mov	r7, r3
 800273c:	d838      	bhi.n	80027b0 <__ssputs_r+0x84>
 800273e:	898a      	ldrh	r2, [r1, #12]
 8002740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002744:	d032      	beq.n	80027ac <__ssputs_r+0x80>
 8002746:	6825      	ldr	r5, [r4, #0]
 8002748:	6909      	ldr	r1, [r1, #16]
 800274a:	3301      	adds	r3, #1
 800274c:	eba5 0901 	sub.w	r9, r5, r1
 8002750:	6965      	ldr	r5, [r4, #20]
 8002752:	444b      	add	r3, r9
 8002754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002758:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800275c:	106d      	asrs	r5, r5, #1
 800275e:	429d      	cmp	r5, r3
 8002760:	bf38      	it	cc
 8002762:	461d      	movcc	r5, r3
 8002764:	0553      	lsls	r3, r2, #21
 8002766:	d531      	bpl.n	80027cc <__ssputs_r+0xa0>
 8002768:	4629      	mov	r1, r5
 800276a:	f000 fb53 	bl	8002e14 <_malloc_r>
 800276e:	4606      	mov	r6, r0
 8002770:	b950      	cbnz	r0, 8002788 <__ssputs_r+0x5c>
 8002772:	230c      	movs	r3, #12
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f8ca 3000 	str.w	r3, [sl]
 800277c:	89a3      	ldrh	r3, [r4, #12]
 800277e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002782:	81a3      	strh	r3, [r4, #12]
 8002784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002788:	464a      	mov	r2, r9
 800278a:	6921      	ldr	r1, [r4, #16]
 800278c:	f000 face 	bl	8002d2c <memcpy>
 8002790:	89a3      	ldrh	r3, [r4, #12]
 8002792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279a:	81a3      	strh	r3, [r4, #12]
 800279c:	6126      	str	r6, [r4, #16]
 800279e:	444e      	add	r6, r9
 80027a0:	6026      	str	r6, [r4, #0]
 80027a2:	463e      	mov	r6, r7
 80027a4:	6165      	str	r5, [r4, #20]
 80027a6:	eba5 0509 	sub.w	r5, r5, r9
 80027aa:	60a5      	str	r5, [r4, #8]
 80027ac:	42be      	cmp	r6, r7
 80027ae:	d900      	bls.n	80027b2 <__ssputs_r+0x86>
 80027b0:	463e      	mov	r6, r7
 80027b2:	4632      	mov	r2, r6
 80027b4:	4641      	mov	r1, r8
 80027b6:	6820      	ldr	r0, [r4, #0]
 80027b8:	f000 fac6 	bl	8002d48 <memmove>
 80027bc:	68a3      	ldr	r3, [r4, #8]
 80027be:	6822      	ldr	r2, [r4, #0]
 80027c0:	1b9b      	subs	r3, r3, r6
 80027c2:	4432      	add	r2, r6
 80027c4:	2000      	movs	r0, #0
 80027c6:	60a3      	str	r3, [r4, #8]
 80027c8:	6022      	str	r2, [r4, #0]
 80027ca:	e7db      	b.n	8002784 <__ssputs_r+0x58>
 80027cc:	462a      	mov	r2, r5
 80027ce:	f000 fb7b 	bl	8002ec8 <_realloc_r>
 80027d2:	4606      	mov	r6, r0
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d1e1      	bne.n	800279c <__ssputs_r+0x70>
 80027d8:	4650      	mov	r0, sl
 80027da:	6921      	ldr	r1, [r4, #16]
 80027dc:	f000 face 	bl	8002d7c <_free_r>
 80027e0:	e7c7      	b.n	8002772 <__ssputs_r+0x46>
	...

080027e4 <_svfiprintf_r>:
 80027e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e8:	4698      	mov	r8, r3
 80027ea:	898b      	ldrh	r3, [r1, #12]
 80027ec:	4607      	mov	r7, r0
 80027ee:	061b      	lsls	r3, r3, #24
 80027f0:	460d      	mov	r5, r1
 80027f2:	4614      	mov	r4, r2
 80027f4:	b09d      	sub	sp, #116	; 0x74
 80027f6:	d50e      	bpl.n	8002816 <_svfiprintf_r+0x32>
 80027f8:	690b      	ldr	r3, [r1, #16]
 80027fa:	b963      	cbnz	r3, 8002816 <_svfiprintf_r+0x32>
 80027fc:	2140      	movs	r1, #64	; 0x40
 80027fe:	f000 fb09 	bl	8002e14 <_malloc_r>
 8002802:	6028      	str	r0, [r5, #0]
 8002804:	6128      	str	r0, [r5, #16]
 8002806:	b920      	cbnz	r0, 8002812 <_svfiprintf_r+0x2e>
 8002808:	230c      	movs	r3, #12
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	e0d1      	b.n	80029b6 <_svfiprintf_r+0x1d2>
 8002812:	2340      	movs	r3, #64	; 0x40
 8002814:	616b      	str	r3, [r5, #20]
 8002816:	2300      	movs	r3, #0
 8002818:	9309      	str	r3, [sp, #36]	; 0x24
 800281a:	2320      	movs	r3, #32
 800281c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002820:	2330      	movs	r3, #48	; 0x30
 8002822:	f04f 0901 	mov.w	r9, #1
 8002826:	f8cd 800c 	str.w	r8, [sp, #12]
 800282a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80029d0 <_svfiprintf_r+0x1ec>
 800282e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002832:	4623      	mov	r3, r4
 8002834:	469a      	mov	sl, r3
 8002836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800283a:	b10a      	cbz	r2, 8002840 <_svfiprintf_r+0x5c>
 800283c:	2a25      	cmp	r2, #37	; 0x25
 800283e:	d1f9      	bne.n	8002834 <_svfiprintf_r+0x50>
 8002840:	ebba 0b04 	subs.w	fp, sl, r4
 8002844:	d00b      	beq.n	800285e <_svfiprintf_r+0x7a>
 8002846:	465b      	mov	r3, fp
 8002848:	4622      	mov	r2, r4
 800284a:	4629      	mov	r1, r5
 800284c:	4638      	mov	r0, r7
 800284e:	f7ff ff6d 	bl	800272c <__ssputs_r>
 8002852:	3001      	adds	r0, #1
 8002854:	f000 80aa 	beq.w	80029ac <_svfiprintf_r+0x1c8>
 8002858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800285a:	445a      	add	r2, fp
 800285c:	9209      	str	r2, [sp, #36]	; 0x24
 800285e:	f89a 3000 	ldrb.w	r3, [sl]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80a2 	beq.w	80029ac <_svfiprintf_r+0x1c8>
 8002868:	2300      	movs	r3, #0
 800286a:	f04f 32ff 	mov.w	r2, #4294967295
 800286e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002872:	f10a 0a01 	add.w	sl, sl, #1
 8002876:	9304      	str	r3, [sp, #16]
 8002878:	9307      	str	r3, [sp, #28]
 800287a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800287e:	931a      	str	r3, [sp, #104]	; 0x68
 8002880:	4654      	mov	r4, sl
 8002882:	2205      	movs	r2, #5
 8002884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002888:	4851      	ldr	r0, [pc, #324]	; (80029d0 <_svfiprintf_r+0x1ec>)
 800288a:	f000 fa41 	bl	8002d10 <memchr>
 800288e:	9a04      	ldr	r2, [sp, #16]
 8002890:	b9d8      	cbnz	r0, 80028ca <_svfiprintf_r+0xe6>
 8002892:	06d0      	lsls	r0, r2, #27
 8002894:	bf44      	itt	mi
 8002896:	2320      	movmi	r3, #32
 8002898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800289c:	0711      	lsls	r1, r2, #28
 800289e:	bf44      	itt	mi
 80028a0:	232b      	movmi	r3, #43	; 0x2b
 80028a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028a6:	f89a 3000 	ldrb.w	r3, [sl]
 80028aa:	2b2a      	cmp	r3, #42	; 0x2a
 80028ac:	d015      	beq.n	80028da <_svfiprintf_r+0xf6>
 80028ae:	4654      	mov	r4, sl
 80028b0:	2000      	movs	r0, #0
 80028b2:	f04f 0c0a 	mov.w	ip, #10
 80028b6:	9a07      	ldr	r2, [sp, #28]
 80028b8:	4621      	mov	r1, r4
 80028ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028be:	3b30      	subs	r3, #48	; 0x30
 80028c0:	2b09      	cmp	r3, #9
 80028c2:	d94e      	bls.n	8002962 <_svfiprintf_r+0x17e>
 80028c4:	b1b0      	cbz	r0, 80028f4 <_svfiprintf_r+0x110>
 80028c6:	9207      	str	r2, [sp, #28]
 80028c8:	e014      	b.n	80028f4 <_svfiprintf_r+0x110>
 80028ca:	eba0 0308 	sub.w	r3, r0, r8
 80028ce:	fa09 f303 	lsl.w	r3, r9, r3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	46a2      	mov	sl, r4
 80028d6:	9304      	str	r3, [sp, #16]
 80028d8:	e7d2      	b.n	8002880 <_svfiprintf_r+0x9c>
 80028da:	9b03      	ldr	r3, [sp, #12]
 80028dc:	1d19      	adds	r1, r3, #4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	9103      	str	r1, [sp, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bfbb      	ittet	lt
 80028e6:	425b      	neglt	r3, r3
 80028e8:	f042 0202 	orrlt.w	r2, r2, #2
 80028ec:	9307      	strge	r3, [sp, #28]
 80028ee:	9307      	strlt	r3, [sp, #28]
 80028f0:	bfb8      	it	lt
 80028f2:	9204      	strlt	r2, [sp, #16]
 80028f4:	7823      	ldrb	r3, [r4, #0]
 80028f6:	2b2e      	cmp	r3, #46	; 0x2e
 80028f8:	d10c      	bne.n	8002914 <_svfiprintf_r+0x130>
 80028fa:	7863      	ldrb	r3, [r4, #1]
 80028fc:	2b2a      	cmp	r3, #42	; 0x2a
 80028fe:	d135      	bne.n	800296c <_svfiprintf_r+0x188>
 8002900:	9b03      	ldr	r3, [sp, #12]
 8002902:	3402      	adds	r4, #2
 8002904:	1d1a      	adds	r2, r3, #4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	9203      	str	r2, [sp, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	bfb8      	it	lt
 800290e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002912:	9305      	str	r3, [sp, #20]
 8002914:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80029e0 <_svfiprintf_r+0x1fc>
 8002918:	2203      	movs	r2, #3
 800291a:	4650      	mov	r0, sl
 800291c:	7821      	ldrb	r1, [r4, #0]
 800291e:	f000 f9f7 	bl	8002d10 <memchr>
 8002922:	b140      	cbz	r0, 8002936 <_svfiprintf_r+0x152>
 8002924:	2340      	movs	r3, #64	; 0x40
 8002926:	eba0 000a 	sub.w	r0, r0, sl
 800292a:	fa03 f000 	lsl.w	r0, r3, r0
 800292e:	9b04      	ldr	r3, [sp, #16]
 8002930:	3401      	adds	r4, #1
 8002932:	4303      	orrs	r3, r0
 8002934:	9304      	str	r3, [sp, #16]
 8002936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800293a:	2206      	movs	r2, #6
 800293c:	4825      	ldr	r0, [pc, #148]	; (80029d4 <_svfiprintf_r+0x1f0>)
 800293e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002942:	f000 f9e5 	bl	8002d10 <memchr>
 8002946:	2800      	cmp	r0, #0
 8002948:	d038      	beq.n	80029bc <_svfiprintf_r+0x1d8>
 800294a:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <_svfiprintf_r+0x1f4>)
 800294c:	bb1b      	cbnz	r3, 8002996 <_svfiprintf_r+0x1b2>
 800294e:	9b03      	ldr	r3, [sp, #12]
 8002950:	3307      	adds	r3, #7
 8002952:	f023 0307 	bic.w	r3, r3, #7
 8002956:	3308      	adds	r3, #8
 8002958:	9303      	str	r3, [sp, #12]
 800295a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800295c:	4433      	add	r3, r6
 800295e:	9309      	str	r3, [sp, #36]	; 0x24
 8002960:	e767      	b.n	8002832 <_svfiprintf_r+0x4e>
 8002962:	460c      	mov	r4, r1
 8002964:	2001      	movs	r0, #1
 8002966:	fb0c 3202 	mla	r2, ip, r2, r3
 800296a:	e7a5      	b.n	80028b8 <_svfiprintf_r+0xd4>
 800296c:	2300      	movs	r3, #0
 800296e:	f04f 0c0a 	mov.w	ip, #10
 8002972:	4619      	mov	r1, r3
 8002974:	3401      	adds	r4, #1
 8002976:	9305      	str	r3, [sp, #20]
 8002978:	4620      	mov	r0, r4
 800297a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800297e:	3a30      	subs	r2, #48	; 0x30
 8002980:	2a09      	cmp	r2, #9
 8002982:	d903      	bls.n	800298c <_svfiprintf_r+0x1a8>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0c5      	beq.n	8002914 <_svfiprintf_r+0x130>
 8002988:	9105      	str	r1, [sp, #20]
 800298a:	e7c3      	b.n	8002914 <_svfiprintf_r+0x130>
 800298c:	4604      	mov	r4, r0
 800298e:	2301      	movs	r3, #1
 8002990:	fb0c 2101 	mla	r1, ip, r1, r2
 8002994:	e7f0      	b.n	8002978 <_svfiprintf_r+0x194>
 8002996:	ab03      	add	r3, sp, #12
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	462a      	mov	r2, r5
 800299c:	4638      	mov	r0, r7
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <_svfiprintf_r+0x1f8>)
 80029a0:	a904      	add	r1, sp, #16
 80029a2:	f3af 8000 	nop.w
 80029a6:	1c42      	adds	r2, r0, #1
 80029a8:	4606      	mov	r6, r0
 80029aa:	d1d6      	bne.n	800295a <_svfiprintf_r+0x176>
 80029ac:	89ab      	ldrh	r3, [r5, #12]
 80029ae:	065b      	lsls	r3, r3, #25
 80029b0:	f53f af2c 	bmi.w	800280c <_svfiprintf_r+0x28>
 80029b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029b6:	b01d      	add	sp, #116	; 0x74
 80029b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029bc:	ab03      	add	r3, sp, #12
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	462a      	mov	r2, r5
 80029c2:	4638      	mov	r0, r7
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <_svfiprintf_r+0x1f8>)
 80029c6:	a904      	add	r1, sp, #16
 80029c8:	f000 f87c 	bl	8002ac4 <_printf_i>
 80029cc:	e7eb      	b.n	80029a6 <_svfiprintf_r+0x1c2>
 80029ce:	bf00      	nop
 80029d0:	08002fc4 	.word	0x08002fc4
 80029d4:	08002fce 	.word	0x08002fce
 80029d8:	00000000 	.word	0x00000000
 80029dc:	0800272d 	.word	0x0800272d
 80029e0:	08002fca 	.word	0x08002fca

080029e4 <_printf_common>:
 80029e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e8:	4616      	mov	r6, r2
 80029ea:	4699      	mov	r9, r3
 80029ec:	688a      	ldr	r2, [r1, #8]
 80029ee:	690b      	ldr	r3, [r1, #16]
 80029f0:	4607      	mov	r7, r0
 80029f2:	4293      	cmp	r3, r2
 80029f4:	bfb8      	it	lt
 80029f6:	4613      	movlt	r3, r2
 80029f8:	6033      	str	r3, [r6, #0]
 80029fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029fe:	460c      	mov	r4, r1
 8002a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a04:	b10a      	cbz	r2, 8002a0a <_printf_common+0x26>
 8002a06:	3301      	adds	r3, #1
 8002a08:	6033      	str	r3, [r6, #0]
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	0699      	lsls	r1, r3, #26
 8002a0e:	bf42      	ittt	mi
 8002a10:	6833      	ldrmi	r3, [r6, #0]
 8002a12:	3302      	addmi	r3, #2
 8002a14:	6033      	strmi	r3, [r6, #0]
 8002a16:	6825      	ldr	r5, [r4, #0]
 8002a18:	f015 0506 	ands.w	r5, r5, #6
 8002a1c:	d106      	bne.n	8002a2c <_printf_common+0x48>
 8002a1e:	f104 0a19 	add.w	sl, r4, #25
 8002a22:	68e3      	ldr	r3, [r4, #12]
 8002a24:	6832      	ldr	r2, [r6, #0]
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	42ab      	cmp	r3, r5
 8002a2a:	dc28      	bgt.n	8002a7e <_printf_common+0x9a>
 8002a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a30:	1e13      	subs	r3, r2, #0
 8002a32:	6822      	ldr	r2, [r4, #0]
 8002a34:	bf18      	it	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	0692      	lsls	r2, r2, #26
 8002a3a:	d42d      	bmi.n	8002a98 <_printf_common+0xb4>
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	4638      	mov	r0, r7
 8002a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a44:	47c0      	blx	r8
 8002a46:	3001      	adds	r0, #1
 8002a48:	d020      	beq.n	8002a8c <_printf_common+0xa8>
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	68e5      	ldr	r5, [r4, #12]
 8002a4e:	f003 0306 	and.w	r3, r3, #6
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	bf18      	it	ne
 8002a56:	2500      	movne	r5, #0
 8002a58:	6832      	ldr	r2, [r6, #0]
 8002a5a:	f04f 0600 	mov.w	r6, #0
 8002a5e:	68a3      	ldr	r3, [r4, #8]
 8002a60:	bf08      	it	eq
 8002a62:	1aad      	subeq	r5, r5, r2
 8002a64:	6922      	ldr	r2, [r4, #16]
 8002a66:	bf08      	it	eq
 8002a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	bfc4      	itt	gt
 8002a70:	1a9b      	subgt	r3, r3, r2
 8002a72:	18ed      	addgt	r5, r5, r3
 8002a74:	341a      	adds	r4, #26
 8002a76:	42b5      	cmp	r5, r6
 8002a78:	d11a      	bne.n	8002ab0 <_printf_common+0xcc>
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	e008      	b.n	8002a90 <_printf_common+0xac>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	4652      	mov	r2, sl
 8002a82:	4649      	mov	r1, r9
 8002a84:	4638      	mov	r0, r7
 8002a86:	47c0      	blx	r8
 8002a88:	3001      	adds	r0, #1
 8002a8a:	d103      	bne.n	8002a94 <_printf_common+0xb0>
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a94:	3501      	adds	r5, #1
 8002a96:	e7c4      	b.n	8002a22 <_printf_common+0x3e>
 8002a98:	2030      	movs	r0, #48	; 0x30
 8002a9a:	18e1      	adds	r1, r4, r3
 8002a9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aa6:	4422      	add	r2, r4
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002aae:	e7c5      	b.n	8002a3c <_printf_common+0x58>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	47c0      	blx	r8
 8002aba:	3001      	adds	r0, #1
 8002abc:	d0e6      	beq.n	8002a8c <_printf_common+0xa8>
 8002abe:	3601      	adds	r6, #1
 8002ac0:	e7d9      	b.n	8002a76 <_printf_common+0x92>
	...

08002ac4 <_printf_i>:
 8002ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac8:	460c      	mov	r4, r1
 8002aca:	7e27      	ldrb	r7, [r4, #24]
 8002acc:	4691      	mov	r9, r2
 8002ace:	2f78      	cmp	r7, #120	; 0x78
 8002ad0:	4680      	mov	r8, r0
 8002ad2:	469a      	mov	sl, r3
 8002ad4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ada:	d807      	bhi.n	8002aec <_printf_i+0x28>
 8002adc:	2f62      	cmp	r7, #98	; 0x62
 8002ade:	d80a      	bhi.n	8002af6 <_printf_i+0x32>
 8002ae0:	2f00      	cmp	r7, #0
 8002ae2:	f000 80d9 	beq.w	8002c98 <_printf_i+0x1d4>
 8002ae6:	2f58      	cmp	r7, #88	; 0x58
 8002ae8:	f000 80a4 	beq.w	8002c34 <_printf_i+0x170>
 8002aec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002af4:	e03a      	b.n	8002b6c <_printf_i+0xa8>
 8002af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002afa:	2b15      	cmp	r3, #21
 8002afc:	d8f6      	bhi.n	8002aec <_printf_i+0x28>
 8002afe:	a001      	add	r0, pc, #4	; (adr r0, 8002b04 <_printf_i+0x40>)
 8002b00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002b04:	08002b5d 	.word	0x08002b5d
 8002b08:	08002b71 	.word	0x08002b71
 8002b0c:	08002aed 	.word	0x08002aed
 8002b10:	08002aed 	.word	0x08002aed
 8002b14:	08002aed 	.word	0x08002aed
 8002b18:	08002aed 	.word	0x08002aed
 8002b1c:	08002b71 	.word	0x08002b71
 8002b20:	08002aed 	.word	0x08002aed
 8002b24:	08002aed 	.word	0x08002aed
 8002b28:	08002aed 	.word	0x08002aed
 8002b2c:	08002aed 	.word	0x08002aed
 8002b30:	08002c7f 	.word	0x08002c7f
 8002b34:	08002ba1 	.word	0x08002ba1
 8002b38:	08002c61 	.word	0x08002c61
 8002b3c:	08002aed 	.word	0x08002aed
 8002b40:	08002aed 	.word	0x08002aed
 8002b44:	08002ca1 	.word	0x08002ca1
 8002b48:	08002aed 	.word	0x08002aed
 8002b4c:	08002ba1 	.word	0x08002ba1
 8002b50:	08002aed 	.word	0x08002aed
 8002b54:	08002aed 	.word	0x08002aed
 8002b58:	08002c69 	.word	0x08002c69
 8002b5c:	680b      	ldr	r3, [r1, #0]
 8002b5e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b62:	1d1a      	adds	r2, r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	600a      	str	r2, [r1, #0]
 8002b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0a4      	b.n	8002cba <_printf_i+0x1f6>
 8002b70:	6825      	ldr	r5, [r4, #0]
 8002b72:	6808      	ldr	r0, [r1, #0]
 8002b74:	062e      	lsls	r6, r5, #24
 8002b76:	f100 0304 	add.w	r3, r0, #4
 8002b7a:	d50a      	bpl.n	8002b92 <_printf_i+0xce>
 8002b7c:	6805      	ldr	r5, [r0, #0]
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	2d00      	cmp	r5, #0
 8002b82:	da03      	bge.n	8002b8c <_printf_i+0xc8>
 8002b84:	232d      	movs	r3, #45	; 0x2d
 8002b86:	426d      	negs	r5, r5
 8002b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b8c:	230a      	movs	r3, #10
 8002b8e:	485e      	ldr	r0, [pc, #376]	; (8002d08 <_printf_i+0x244>)
 8002b90:	e019      	b.n	8002bc6 <_printf_i+0x102>
 8002b92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b96:	6805      	ldr	r5, [r0, #0]
 8002b98:	600b      	str	r3, [r1, #0]
 8002b9a:	bf18      	it	ne
 8002b9c:	b22d      	sxthne	r5, r5
 8002b9e:	e7ef      	b.n	8002b80 <_printf_i+0xbc>
 8002ba0:	680b      	ldr	r3, [r1, #0]
 8002ba2:	6825      	ldr	r5, [r4, #0]
 8002ba4:	1d18      	adds	r0, r3, #4
 8002ba6:	6008      	str	r0, [r1, #0]
 8002ba8:	0628      	lsls	r0, r5, #24
 8002baa:	d501      	bpl.n	8002bb0 <_printf_i+0xec>
 8002bac:	681d      	ldr	r5, [r3, #0]
 8002bae:	e002      	b.n	8002bb6 <_printf_i+0xf2>
 8002bb0:	0669      	lsls	r1, r5, #25
 8002bb2:	d5fb      	bpl.n	8002bac <_printf_i+0xe8>
 8002bb4:	881d      	ldrh	r5, [r3, #0]
 8002bb6:	2f6f      	cmp	r7, #111	; 0x6f
 8002bb8:	bf0c      	ite	eq
 8002bba:	2308      	moveq	r3, #8
 8002bbc:	230a      	movne	r3, #10
 8002bbe:	4852      	ldr	r0, [pc, #328]	; (8002d08 <_printf_i+0x244>)
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bc6:	6866      	ldr	r6, [r4, #4]
 8002bc8:	2e00      	cmp	r6, #0
 8002bca:	bfa8      	it	ge
 8002bcc:	6821      	ldrge	r1, [r4, #0]
 8002bce:	60a6      	str	r6, [r4, #8]
 8002bd0:	bfa4      	itt	ge
 8002bd2:	f021 0104 	bicge.w	r1, r1, #4
 8002bd6:	6021      	strge	r1, [r4, #0]
 8002bd8:	b90d      	cbnz	r5, 8002bde <_printf_i+0x11a>
 8002bda:	2e00      	cmp	r6, #0
 8002bdc:	d04d      	beq.n	8002c7a <_printf_i+0x1b6>
 8002bde:	4616      	mov	r6, r2
 8002be0:	fbb5 f1f3 	udiv	r1, r5, r3
 8002be4:	fb03 5711 	mls	r7, r3, r1, r5
 8002be8:	5dc7      	ldrb	r7, [r0, r7]
 8002bea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bee:	462f      	mov	r7, r5
 8002bf0:	42bb      	cmp	r3, r7
 8002bf2:	460d      	mov	r5, r1
 8002bf4:	d9f4      	bls.n	8002be0 <_printf_i+0x11c>
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d10b      	bne.n	8002c12 <_printf_i+0x14e>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	07df      	lsls	r7, r3, #31
 8002bfe:	d508      	bpl.n	8002c12 <_printf_i+0x14e>
 8002c00:	6923      	ldr	r3, [r4, #16]
 8002c02:	6861      	ldr	r1, [r4, #4]
 8002c04:	4299      	cmp	r1, r3
 8002c06:	bfde      	ittt	le
 8002c08:	2330      	movle	r3, #48	; 0x30
 8002c0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c12:	1b92      	subs	r2, r2, r6
 8002c14:	6122      	str	r2, [r4, #16]
 8002c16:	464b      	mov	r3, r9
 8002c18:	4621      	mov	r1, r4
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	f8cd a000 	str.w	sl, [sp]
 8002c20:	aa03      	add	r2, sp, #12
 8002c22:	f7ff fedf 	bl	80029e4 <_printf_common>
 8002c26:	3001      	adds	r0, #1
 8002c28:	d14c      	bne.n	8002cc4 <_printf_i+0x200>
 8002c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2e:	b004      	add	sp, #16
 8002c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c34:	4834      	ldr	r0, [pc, #208]	; (8002d08 <_printf_i+0x244>)
 8002c36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c3a:	680e      	ldr	r6, [r1, #0]
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002c42:	061f      	lsls	r7, r3, #24
 8002c44:	600e      	str	r6, [r1, #0]
 8002c46:	d514      	bpl.n	8002c72 <_printf_i+0x1ae>
 8002c48:	07d9      	lsls	r1, r3, #31
 8002c4a:	bf44      	itt	mi
 8002c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8002c50:	6023      	strmi	r3, [r4, #0]
 8002c52:	b91d      	cbnz	r5, 8002c5c <_printf_i+0x198>
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	f023 0320 	bic.w	r3, r3, #32
 8002c5a:	6023      	str	r3, [r4, #0]
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	e7af      	b.n	8002bc0 <_printf_i+0xfc>
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	f043 0320 	orr.w	r3, r3, #32
 8002c66:	6023      	str	r3, [r4, #0]
 8002c68:	2378      	movs	r3, #120	; 0x78
 8002c6a:	4828      	ldr	r0, [pc, #160]	; (8002d0c <_printf_i+0x248>)
 8002c6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c70:	e7e3      	b.n	8002c3a <_printf_i+0x176>
 8002c72:	065e      	lsls	r6, r3, #25
 8002c74:	bf48      	it	mi
 8002c76:	b2ad      	uxthmi	r5, r5
 8002c78:	e7e6      	b.n	8002c48 <_printf_i+0x184>
 8002c7a:	4616      	mov	r6, r2
 8002c7c:	e7bb      	b.n	8002bf6 <_printf_i+0x132>
 8002c7e:	680b      	ldr	r3, [r1, #0]
 8002c80:	6826      	ldr	r6, [r4, #0]
 8002c82:	1d1d      	adds	r5, r3, #4
 8002c84:	6960      	ldr	r0, [r4, #20]
 8002c86:	600d      	str	r5, [r1, #0]
 8002c88:	0635      	lsls	r5, r6, #24
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	d501      	bpl.n	8002c92 <_printf_i+0x1ce>
 8002c8e:	6018      	str	r0, [r3, #0]
 8002c90:	e002      	b.n	8002c98 <_printf_i+0x1d4>
 8002c92:	0671      	lsls	r1, r6, #25
 8002c94:	d5fb      	bpl.n	8002c8e <_printf_i+0x1ca>
 8002c96:	8018      	strh	r0, [r3, #0]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	4616      	mov	r6, r2
 8002c9c:	6123      	str	r3, [r4, #16]
 8002c9e:	e7ba      	b.n	8002c16 <_printf_i+0x152>
 8002ca0:	680b      	ldr	r3, [r1, #0]
 8002ca2:	1d1a      	adds	r2, r3, #4
 8002ca4:	600a      	str	r2, [r1, #0]
 8002ca6:	681e      	ldr	r6, [r3, #0]
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4630      	mov	r0, r6
 8002cac:	6862      	ldr	r2, [r4, #4]
 8002cae:	f000 f82f 	bl	8002d10 <memchr>
 8002cb2:	b108      	cbz	r0, 8002cb8 <_printf_i+0x1f4>
 8002cb4:	1b80      	subs	r0, r0, r6
 8002cb6:	6060      	str	r0, [r4, #4]
 8002cb8:	6863      	ldr	r3, [r4, #4]
 8002cba:	6123      	str	r3, [r4, #16]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cc2:	e7a8      	b.n	8002c16 <_printf_i+0x152>
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	4640      	mov	r0, r8
 8002cca:	6923      	ldr	r3, [r4, #16]
 8002ccc:	47d0      	blx	sl
 8002cce:	3001      	adds	r0, #1
 8002cd0:	d0ab      	beq.n	8002c2a <_printf_i+0x166>
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	079b      	lsls	r3, r3, #30
 8002cd6:	d413      	bmi.n	8002d00 <_printf_i+0x23c>
 8002cd8:	68e0      	ldr	r0, [r4, #12]
 8002cda:	9b03      	ldr	r3, [sp, #12]
 8002cdc:	4298      	cmp	r0, r3
 8002cde:	bfb8      	it	lt
 8002ce0:	4618      	movlt	r0, r3
 8002ce2:	e7a4      	b.n	8002c2e <_printf_i+0x16a>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	4632      	mov	r2, r6
 8002ce8:	4649      	mov	r1, r9
 8002cea:	4640      	mov	r0, r8
 8002cec:	47d0      	blx	sl
 8002cee:	3001      	adds	r0, #1
 8002cf0:	d09b      	beq.n	8002c2a <_printf_i+0x166>
 8002cf2:	3501      	adds	r5, #1
 8002cf4:	68e3      	ldr	r3, [r4, #12]
 8002cf6:	9903      	ldr	r1, [sp, #12]
 8002cf8:	1a5b      	subs	r3, r3, r1
 8002cfa:	42ab      	cmp	r3, r5
 8002cfc:	dcf2      	bgt.n	8002ce4 <_printf_i+0x220>
 8002cfe:	e7eb      	b.n	8002cd8 <_printf_i+0x214>
 8002d00:	2500      	movs	r5, #0
 8002d02:	f104 0619 	add.w	r6, r4, #25
 8002d06:	e7f5      	b.n	8002cf4 <_printf_i+0x230>
 8002d08:	08002fd5 	.word	0x08002fd5
 8002d0c:	08002fe6 	.word	0x08002fe6

08002d10 <memchr>:
 8002d10:	4603      	mov	r3, r0
 8002d12:	b510      	push	{r4, lr}
 8002d14:	b2c9      	uxtb	r1, r1
 8002d16:	4402      	add	r2, r0
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	d101      	bne.n	8002d22 <memchr+0x12>
 8002d1e:	2000      	movs	r0, #0
 8002d20:	e003      	b.n	8002d2a <memchr+0x1a>
 8002d22:	7804      	ldrb	r4, [r0, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	428c      	cmp	r4, r1
 8002d28:	d1f6      	bne.n	8002d18 <memchr+0x8>
 8002d2a:	bd10      	pop	{r4, pc}

08002d2c <memcpy>:
 8002d2c:	440a      	add	r2, r1
 8002d2e:	4291      	cmp	r1, r2
 8002d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d34:	d100      	bne.n	8002d38 <memcpy+0xc>
 8002d36:	4770      	bx	lr
 8002d38:	b510      	push	{r4, lr}
 8002d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d3e:	4291      	cmp	r1, r2
 8002d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d44:	d1f9      	bne.n	8002d3a <memcpy+0xe>
 8002d46:	bd10      	pop	{r4, pc}

08002d48 <memmove>:
 8002d48:	4288      	cmp	r0, r1
 8002d4a:	b510      	push	{r4, lr}
 8002d4c:	eb01 0402 	add.w	r4, r1, r2
 8002d50:	d902      	bls.n	8002d58 <memmove+0x10>
 8002d52:	4284      	cmp	r4, r0
 8002d54:	4623      	mov	r3, r4
 8002d56:	d807      	bhi.n	8002d68 <memmove+0x20>
 8002d58:	1e43      	subs	r3, r0, #1
 8002d5a:	42a1      	cmp	r1, r4
 8002d5c:	d008      	beq.n	8002d70 <memmove+0x28>
 8002d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d66:	e7f8      	b.n	8002d5a <memmove+0x12>
 8002d68:	4601      	mov	r1, r0
 8002d6a:	4402      	add	r2, r0
 8002d6c:	428a      	cmp	r2, r1
 8002d6e:	d100      	bne.n	8002d72 <memmove+0x2a>
 8002d70:	bd10      	pop	{r4, pc}
 8002d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d7a:	e7f7      	b.n	8002d6c <memmove+0x24>

08002d7c <_free_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	4605      	mov	r5, r0
 8002d80:	2900      	cmp	r1, #0
 8002d82:	d043      	beq.n	8002e0c <_free_r+0x90>
 8002d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d88:	1f0c      	subs	r4, r1, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bfb8      	it	lt
 8002d8e:	18e4      	addlt	r4, r4, r3
 8002d90:	f000 f8d0 	bl	8002f34 <__malloc_lock>
 8002d94:	4a1e      	ldr	r2, [pc, #120]	; (8002e10 <_free_r+0x94>)
 8002d96:	6813      	ldr	r3, [r2, #0]
 8002d98:	4610      	mov	r0, r2
 8002d9a:	b933      	cbnz	r3, 8002daa <_free_r+0x2e>
 8002d9c:	6063      	str	r3, [r4, #4]
 8002d9e:	6014      	str	r4, [r2, #0]
 8002da0:	4628      	mov	r0, r5
 8002da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002da6:	f000 b8cb 	b.w	8002f40 <__malloc_unlock>
 8002daa:	42a3      	cmp	r3, r4
 8002dac:	d90a      	bls.n	8002dc4 <_free_r+0x48>
 8002dae:	6821      	ldr	r1, [r4, #0]
 8002db0:	1862      	adds	r2, r4, r1
 8002db2:	4293      	cmp	r3, r2
 8002db4:	bf01      	itttt	eq
 8002db6:	681a      	ldreq	r2, [r3, #0]
 8002db8:	685b      	ldreq	r3, [r3, #4]
 8002dba:	1852      	addeq	r2, r2, r1
 8002dbc:	6022      	streq	r2, [r4, #0]
 8002dbe:	6063      	str	r3, [r4, #4]
 8002dc0:	6004      	str	r4, [r0, #0]
 8002dc2:	e7ed      	b.n	8002da0 <_free_r+0x24>
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	b10b      	cbz	r3, 8002dce <_free_r+0x52>
 8002dca:	42a3      	cmp	r3, r4
 8002dcc:	d9fa      	bls.n	8002dc4 <_free_r+0x48>
 8002dce:	6811      	ldr	r1, [r2, #0]
 8002dd0:	1850      	adds	r0, r2, r1
 8002dd2:	42a0      	cmp	r0, r4
 8002dd4:	d10b      	bne.n	8002dee <_free_r+0x72>
 8002dd6:	6820      	ldr	r0, [r4, #0]
 8002dd8:	4401      	add	r1, r0
 8002dda:	1850      	adds	r0, r2, r1
 8002ddc:	4283      	cmp	r3, r0
 8002dde:	6011      	str	r1, [r2, #0]
 8002de0:	d1de      	bne.n	8002da0 <_free_r+0x24>
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4401      	add	r1, r0
 8002de8:	6011      	str	r1, [r2, #0]
 8002dea:	6053      	str	r3, [r2, #4]
 8002dec:	e7d8      	b.n	8002da0 <_free_r+0x24>
 8002dee:	d902      	bls.n	8002df6 <_free_r+0x7a>
 8002df0:	230c      	movs	r3, #12
 8002df2:	602b      	str	r3, [r5, #0]
 8002df4:	e7d4      	b.n	8002da0 <_free_r+0x24>
 8002df6:	6820      	ldr	r0, [r4, #0]
 8002df8:	1821      	adds	r1, r4, r0
 8002dfa:	428b      	cmp	r3, r1
 8002dfc:	bf01      	itttt	eq
 8002dfe:	6819      	ldreq	r1, [r3, #0]
 8002e00:	685b      	ldreq	r3, [r3, #4]
 8002e02:	1809      	addeq	r1, r1, r0
 8002e04:	6021      	streq	r1, [r4, #0]
 8002e06:	6063      	str	r3, [r4, #4]
 8002e08:	6054      	str	r4, [r2, #4]
 8002e0a:	e7c9      	b.n	8002da0 <_free_r+0x24>
 8002e0c:	bd38      	pop	{r3, r4, r5, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000090 	.word	0x20000090

08002e14 <_malloc_r>:
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e16:	1ccd      	adds	r5, r1, #3
 8002e18:	f025 0503 	bic.w	r5, r5, #3
 8002e1c:	3508      	adds	r5, #8
 8002e1e:	2d0c      	cmp	r5, #12
 8002e20:	bf38      	it	cc
 8002e22:	250c      	movcc	r5, #12
 8002e24:	2d00      	cmp	r5, #0
 8002e26:	4606      	mov	r6, r0
 8002e28:	db01      	blt.n	8002e2e <_malloc_r+0x1a>
 8002e2a:	42a9      	cmp	r1, r5
 8002e2c:	d903      	bls.n	8002e36 <_malloc_r+0x22>
 8002e2e:	230c      	movs	r3, #12
 8002e30:	6033      	str	r3, [r6, #0]
 8002e32:	2000      	movs	r0, #0
 8002e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e36:	f000 f87d 	bl	8002f34 <__malloc_lock>
 8002e3a:	4921      	ldr	r1, [pc, #132]	; (8002ec0 <_malloc_r+0xac>)
 8002e3c:	680a      	ldr	r2, [r1, #0]
 8002e3e:	4614      	mov	r4, r2
 8002e40:	b99c      	cbnz	r4, 8002e6a <_malloc_r+0x56>
 8002e42:	4f20      	ldr	r7, [pc, #128]	; (8002ec4 <_malloc_r+0xb0>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b923      	cbnz	r3, 8002e52 <_malloc_r+0x3e>
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f000 f862 	bl	8002f14 <_sbrk_r>
 8002e50:	6038      	str	r0, [r7, #0]
 8002e52:	4629      	mov	r1, r5
 8002e54:	4630      	mov	r0, r6
 8002e56:	f000 f85d 	bl	8002f14 <_sbrk_r>
 8002e5a:	1c43      	adds	r3, r0, #1
 8002e5c:	d123      	bne.n	8002ea6 <_malloc_r+0x92>
 8002e5e:	230c      	movs	r3, #12
 8002e60:	4630      	mov	r0, r6
 8002e62:	6033      	str	r3, [r6, #0]
 8002e64:	f000 f86c 	bl	8002f40 <__malloc_unlock>
 8002e68:	e7e3      	b.n	8002e32 <_malloc_r+0x1e>
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	1b5b      	subs	r3, r3, r5
 8002e6e:	d417      	bmi.n	8002ea0 <_malloc_r+0x8c>
 8002e70:	2b0b      	cmp	r3, #11
 8002e72:	d903      	bls.n	8002e7c <_malloc_r+0x68>
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	441c      	add	r4, r3
 8002e78:	6025      	str	r5, [r4, #0]
 8002e7a:	e004      	b.n	8002e86 <_malloc_r+0x72>
 8002e7c:	6863      	ldr	r3, [r4, #4]
 8002e7e:	42a2      	cmp	r2, r4
 8002e80:	bf0c      	ite	eq
 8002e82:	600b      	streq	r3, [r1, #0]
 8002e84:	6053      	strne	r3, [r2, #4]
 8002e86:	4630      	mov	r0, r6
 8002e88:	f000 f85a 	bl	8002f40 <__malloc_unlock>
 8002e8c:	f104 000b 	add.w	r0, r4, #11
 8002e90:	1d23      	adds	r3, r4, #4
 8002e92:	f020 0007 	bic.w	r0, r0, #7
 8002e96:	1ac2      	subs	r2, r0, r3
 8002e98:	d0cc      	beq.n	8002e34 <_malloc_r+0x20>
 8002e9a:	1a1b      	subs	r3, r3, r0
 8002e9c:	50a3      	str	r3, [r4, r2]
 8002e9e:	e7c9      	b.n	8002e34 <_malloc_r+0x20>
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	6864      	ldr	r4, [r4, #4]
 8002ea4:	e7cc      	b.n	8002e40 <_malloc_r+0x2c>
 8002ea6:	1cc4      	adds	r4, r0, #3
 8002ea8:	f024 0403 	bic.w	r4, r4, #3
 8002eac:	42a0      	cmp	r0, r4
 8002eae:	d0e3      	beq.n	8002e78 <_malloc_r+0x64>
 8002eb0:	1a21      	subs	r1, r4, r0
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	f000 f82e 	bl	8002f14 <_sbrk_r>
 8002eb8:	3001      	adds	r0, #1
 8002eba:	d1dd      	bne.n	8002e78 <_malloc_r+0x64>
 8002ebc:	e7cf      	b.n	8002e5e <_malloc_r+0x4a>
 8002ebe:	bf00      	nop
 8002ec0:	20000090 	.word	0x20000090
 8002ec4:	20000094 	.word	0x20000094

08002ec8 <_realloc_r>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	4607      	mov	r7, r0
 8002ecc:	4614      	mov	r4, r2
 8002ece:	460e      	mov	r6, r1
 8002ed0:	b921      	cbnz	r1, 8002edc <_realloc_r+0x14>
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ed8:	f7ff bf9c 	b.w	8002e14 <_malloc_r>
 8002edc:	b922      	cbnz	r2, 8002ee8 <_realloc_r+0x20>
 8002ede:	f7ff ff4d 	bl	8002d7c <_free_r>
 8002ee2:	4625      	mov	r5, r4
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ee8:	f000 f830 	bl	8002f4c <_malloc_usable_size_r>
 8002eec:	42a0      	cmp	r0, r4
 8002eee:	d20f      	bcs.n	8002f10 <_realloc_r+0x48>
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f7ff ff8e 	bl	8002e14 <_malloc_r>
 8002ef8:	4605      	mov	r5, r0
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d0f2      	beq.n	8002ee4 <_realloc_r+0x1c>
 8002efe:	4631      	mov	r1, r6
 8002f00:	4622      	mov	r2, r4
 8002f02:	f7ff ff13 	bl	8002d2c <memcpy>
 8002f06:	4631      	mov	r1, r6
 8002f08:	4638      	mov	r0, r7
 8002f0a:	f7ff ff37 	bl	8002d7c <_free_r>
 8002f0e:	e7e9      	b.n	8002ee4 <_realloc_r+0x1c>
 8002f10:	4635      	mov	r5, r6
 8002f12:	e7e7      	b.n	8002ee4 <_realloc_r+0x1c>

08002f14 <_sbrk_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	2300      	movs	r3, #0
 8002f18:	4d05      	ldr	r5, [pc, #20]	; (8002f30 <_sbrk_r+0x1c>)
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	602b      	str	r3, [r5, #0]
 8002f20:	f7fd ff5a 	bl	8000dd8 <_sbrk>
 8002f24:	1c43      	adds	r3, r0, #1
 8002f26:	d102      	bne.n	8002f2e <_sbrk_r+0x1a>
 8002f28:	682b      	ldr	r3, [r5, #0]
 8002f2a:	b103      	cbz	r3, 8002f2e <_sbrk_r+0x1a>
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	bd38      	pop	{r3, r4, r5, pc}
 8002f30:	20000214 	.word	0x20000214

08002f34 <__malloc_lock>:
 8002f34:	4801      	ldr	r0, [pc, #4]	; (8002f3c <__malloc_lock+0x8>)
 8002f36:	f000 b811 	b.w	8002f5c <__retarget_lock_acquire_recursive>
 8002f3a:	bf00      	nop
 8002f3c:	2000021c 	.word	0x2000021c

08002f40 <__malloc_unlock>:
 8002f40:	4801      	ldr	r0, [pc, #4]	; (8002f48 <__malloc_unlock+0x8>)
 8002f42:	f000 b80c 	b.w	8002f5e <__retarget_lock_release_recursive>
 8002f46:	bf00      	nop
 8002f48:	2000021c 	.word	0x2000021c

08002f4c <_malloc_usable_size_r>:
 8002f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f50:	1f18      	subs	r0, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bfbc      	itt	lt
 8002f56:	580b      	ldrlt	r3, [r1, r0]
 8002f58:	18c0      	addlt	r0, r0, r3
 8002f5a:	4770      	bx	lr

08002f5c <__retarget_lock_acquire_recursive>:
 8002f5c:	4770      	bx	lr

08002f5e <__retarget_lock_release_recursive>:
 8002f5e:	4770      	bx	lr

08002f60 <_init>:
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	bf00      	nop
 8002f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f66:	bc08      	pop	{r3}
 8002f68:	469e      	mov	lr, r3
 8002f6a:	4770      	bx	lr

08002f6c <_fini>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	bf00      	nop
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr
