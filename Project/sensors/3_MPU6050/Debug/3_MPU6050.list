
3_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800410c  0800410c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800410c  0800410c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800410c  0800410c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000070  08004184  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08004184  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbc3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d63  00000000  00000000  0002bc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002d9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b8e  00000000  00000000  0002ec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b92e  00000000  00000000  000467ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000855ae  00000000  00000000  000520dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d768a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b7c  00000000  00000000  000d76e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800403c 	.word	0x0800403c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800403c 	.word	0x0800403c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <i2cReadBytes>:
#include "I2C.h"
#include "math.h"
void i2cReadBytes(uint8_t devAddr,uint8_t regAddr,uint16_t bytes,uint8_t *buffer,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af04      	add	r7, sp, #16
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	460b      	mov	r3, r1
 8000666:	71bb      	strb	r3, [r7, #6]
 8000668:	4613      	mov	r3, r2
 800066a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c, devAddr<<1, regAddr, 1, buffer, bytes, 1000);
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	b29b      	uxth	r3, r3
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	b299      	uxth	r1, r3
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	b29a      	uxth	r2, r3
 8000678:	f107 0014 	add.w	r0, r7, #20
 800067c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	88bb      	ldrh	r3, [r7, #4]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	f001 fcd6 	bl	800203c <HAL_I2C_Mem_Read>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <i2cReadByte>:
uint8_t i2cReadByte(uint8_t devAddr,uint8_t regAddr,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 8000698:	b082      	sub	sp, #8
 800069a:	b580      	push	{r7, lr}
 800069c:	b088      	sub	sp, #32
 800069e:	af04      	add	r7, sp, #16
 80006a0:	61fb      	str	r3, [r7, #28]
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
 80006a6:	460b      	mov	r3, r1
 80006a8:	71bb      	strb	r3, [r7, #6]
 80006aa:	4613      	mov	r3, r2
 80006ac:	80bb      	strh	r3, [r7, #4]
	uint8_t dByte;
	HAL_I2C_Mem_Read(&hi2c, devAddr<<1, regAddr, 1, &dByte, 1, timeout);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	b299      	uxth	r1, r3
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	88bb      	ldrh	r3, [r7, #4]
 80006bc:	f107 001c 	add.w	r0, r7, #28
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2301      	movs	r3, #1
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	f107 030f 	add.w	r3, r7, #15
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2301      	movs	r3, #1
 80006ce:	f001 fcb5 	bl	800203c <HAL_I2C_Mem_Read>
	return dByte;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006de:	b002      	add	sp, #8
 80006e0:	4770      	bx	lr

080006e2 <i2cWriteByte>:
void i2cWriteByte(uint8_t devAddr,uint8_t regAddr,uint8_t data,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 80006e2:	b590      	push	{r4, r7, lr}
 80006e4:	b087      	sub	sp, #28
 80006e6:	af04      	add	r7, sp, #16
 80006e8:	4604      	mov	r4, r0
 80006ea:	4608      	mov	r0, r1
 80006ec:	4611      	mov	r1, r2
 80006ee:	461a      	mov	r2, r3
 80006f0:	4623      	mov	r3, r4
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4603      	mov	r3, r0
 80006f6:	71bb      	strb	r3, [r7, #6]
 80006f8:	460b      	mov	r3, r1
 80006fa:	717b      	strb	r3, [r7, #5]
 80006fc:	4613      	mov	r3, r2
 80006fe:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c, devAddr<<1|1, regAddr, 1, &data, 1, timeout);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	b21b      	sxth	r3, r3
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	b21b      	sxth	r3, r3
 800070c:	b299      	uxth	r1, r3
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	b29a      	uxth	r2, r3
 8000712:	887b      	ldrh	r3, [r7, #2]
 8000714:	9302      	str	r3, [sp, #8]
 8000716:	2301      	movs	r3, #1
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	1d7b      	adds	r3, r7, #5
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	f107 0018 	add.w	r0, r7, #24
 8000724:	f001 fb90 	bl	8001e48 <HAL_I2C_Mem_Write>
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bd90      	pop	{r4, r7, pc}

08000730 <i2cWriteBits>:
void i2cWriteBits(uint8_t devAddr,uint8_t regAddr,uint8_t data,uint8_t bitStart,uint8_t length,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 8000730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000734:	b09a      	sub	sp, #104	; 0x68
 8000736:	af16      	add	r7, sp, #88	; 0x58
 8000738:	4604      	mov	r4, r0
 800073a:	4608      	mov	r0, r1
 800073c:	4611      	mov	r1, r2
 800073e:	461a      	mov	r2, r3
 8000740:	4623      	mov	r3, r4
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	4603      	mov	r3, r0
 8000746:	71bb      	strb	r3, [r7, #6]
 8000748:	460b      	mov	r3, r1
 800074a:	717b      	strb	r3, [r7, #5]
 800074c:	4613      	mov	r3, r2
 800074e:	713b      	strb	r3, [r7, #4]
	uint8_t dByte =  i2cReadByte(devAddr, regAddr, timeout, hi2c);
 8000750:	8dbe      	ldrh	r6, [r7, #44]	; 0x2c
 8000752:	79bd      	ldrb	r5, [r7, #6]
 8000754:	79fc      	ldrb	r4, [r7, #7]
 8000756:	4668      	mov	r0, sp
 8000758:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800075c:	2250      	movs	r2, #80	; 0x50
 800075e:	4619      	mov	r1, r3
 8000760:	f003 f82a 	bl	80037b8 <memcpy>
 8000764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000766:	4632      	mov	r2, r6
 8000768:	4629      	mov	r1, r5
 800076a:	4620      	mov	r0, r4
 800076c:	f7ff ff94 	bl	8000698 <i2cReadByte>
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]
	uint8_t bMask = ((1<<length)-1)<<(bitStart+1-length);// or bMask = (0xff>>(7-bitStart+bitStart-length+1)<<(bitStart-length+1)) &&0xff
 8000774:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000778:	2201      	movs	r2, #1
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	1e5a      	subs	r2, r3, #1
 8000780:	793b      	ldrb	r3, [r7, #4]
 8000782:	1c59      	adds	r1, r3, #1
 8000784:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000788:	1acb      	subs	r3, r1, r3
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	73bb      	strb	r3, [r7, #14]
	data <<=(bitStart-length +1);
 8000790:	797a      	ldrb	r2, [r7, #5]
 8000792:	7939      	ldrb	r1, [r7, #4]
 8000794:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000798:	1acb      	subs	r3, r1, r3
 800079a:	3301      	adds	r3, #1
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	717b      	strb	r3, [r7, #5]
	dByte &= ~bMask;
 80007a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007a6:	43db      	mvns	r3, r3
 80007a8:	b25a      	sxtb	r2, r3
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	4013      	ands	r3, r2
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	73fb      	strb	r3, [r7, #15]
	dByte |= data;
 80007b4:	7bfa      	ldrb	r2, [r7, #15]
 80007b6:	797b      	ldrb	r3, [r7, #5]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	73fb      	strb	r3, [r7, #15]
	i2cWriteByte(devAddr, regAddr, dByte, timeout, hi2c);
 80007bc:	f8b7 802c 	ldrh.w	r8, [r7, #44]	; 0x2c
 80007c0:	7bfe      	ldrb	r6, [r7, #15]
 80007c2:	79bd      	ldrb	r5, [r7, #6]
 80007c4:	79fc      	ldrb	r4, [r7, #7]
 80007c6:	4668      	mov	r0, sp
 80007c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007cc:	2254      	movs	r2, #84	; 0x54
 80007ce:	4619      	mov	r1, r3
 80007d0:	f002 fff2 	bl	80037b8 <memcpy>
 80007d4:	4643      	mov	r3, r8
 80007d6:	4632      	mov	r2, r6
 80007d8:	4629      	mov	r1, r5
 80007da:	4620      	mov	r0, r4
 80007dc:	f7ff ff81 	bl	80006e2 <i2cWriteByte>
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080007ea <i2cWriteBit>:
void i2cWriteBit(uint8_t devAddr,uint8_t regAdd,uint8_t data,uint8_t bitIndex ,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 80007ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ec:	b099      	sub	sp, #100	; 0x64
 80007ee:	af14      	add	r7, sp, #80	; 0x50
 80007f0:	4604      	mov	r4, r0
 80007f2:	4608      	mov	r0, r1
 80007f4:	4611      	mov	r1, r2
 80007f6:	461a      	mov	r2, r3
 80007f8:	4623      	mov	r3, r4
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4603      	mov	r3, r0
 80007fe:	71bb      	strb	r3, [r7, #6]
 8000800:	460b      	mov	r3, r1
 8000802:	717b      	strb	r3, [r7, #5]
 8000804:	4613      	mov	r3, r2
 8000806:	713b      	strb	r3, [r7, #4]
	uint8_t dByte = i2cReadByte(devAddr, regAdd, timeout, hi2c);
 8000808:	8d3e      	ldrh	r6, [r7, #40]	; 0x28
 800080a:	79bd      	ldrb	r5, [r7, #6]
 800080c:	79fc      	ldrb	r4, [r7, #7]
 800080e:	4668      	mov	r0, sp
 8000810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000814:	2250      	movs	r2, #80	; 0x50
 8000816:	4619      	mov	r1, r3
 8000818:	f002 ffce 	bl	80037b8 <memcpy>
 800081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081e:	4632      	mov	r2, r6
 8000820:	4629      	mov	r1, r5
 8000822:	4620      	mov	r0, r4
 8000824:	f7ff ff38 	bl	8000698 <i2cReadByte>
 8000828:	4603      	mov	r3, r0
 800082a:	73fb      	strb	r3, [r7, #15]
	uint8_t bMask = ~(1<<bitIndex);
 800082c:	793b      	ldrb	r3, [r7, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	73bb      	strb	r3, [r7, #14]
	data <<= bitIndex;
 800083a:	797a      	ldrb	r2, [r7, #5]
 800083c:	793b      	ldrb	r3, [r7, #4]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	717b      	strb	r3, [r7, #5]
	dByte &= bMask;
 8000844:	7bfa      	ldrb	r2, [r7, #15]
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	4013      	ands	r3, r2
 800084a:	73fb      	strb	r3, [r7, #15]
	dByte |= data;
 800084c:	7bfa      	ldrb	r2, [r7, #15]
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	4313      	orrs	r3, r2
 8000852:	73fb      	strb	r3, [r7, #15]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800085c <SendUnsignedNumber>:
#include "Uart.h"
void SendUnsignedNumber(uint32_t number,UART_HandleTypeDef _huart)
{
 800085c:	b084      	sub	sp, #16
 800085e:	b580      	push	{r7, lr}
 8000860:	b084      	sub	sp, #16
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	f107 001c 	add.w	r0, r7, #28
 800086a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 800086e:	2232      	movs	r2, #50	; 0x32
 8000870:	2100      	movs	r1, #0
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <SendUnsignedNumber+0x4c>)
 8000874:	f002 ffae 	bl	80037d4 <memset>
	uint8_t l = sprintf(uartBuffer,"%lu",number);
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	490c      	ldr	r1, [pc, #48]	; (80008ac <SendUnsignedNumber+0x50>)
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <SendUnsignedNumber+0x4c>)
 800087e:	f002 ffb1 	bl	80037e4 <siprintf>
 8000882:	4603      	mov	r3, r0
 8000884:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, l, 500);
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	b29a      	uxth	r2, r3
 800088a:	f107 001c 	add.w	r0, r7, #28
 800088e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000892:	4905      	ldr	r1, [pc, #20]	; (80008a8 <SendUnsignedNumber+0x4c>)
 8000894:	f002 fdfb 	bl	800348e <HAL_UART_Transmit>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008a2:	b004      	add	sp, #16
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000138 	.word	0x20000138
 80008ac:	08004054 	.word	0x08004054

080008b0 <SendConstChar>:
void SendConstChar(const char* constChar,UART_HandleTypeDef _huart)
{
 80008b0:	b084      	sub	sp, #16
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	f107 0014 	add.w	r0, r7, #20
 80008be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 80008c2:	2232      	movs	r2, #50	; 0x32
 80008c4:	2100      	movs	r1, #0
 80008c6:	480a      	ldr	r0, [pc, #40]	; (80008f0 <SendConstChar+0x40>)
 80008c8:	f002 ff84 	bl	80037d4 <memset>
	HAL_UART_Transmit(&_huart,(uint8_t *)constChar,strlen((const char*)constChar),200);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fc3d 	bl	800014c <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f107 0014 	add.w	r0, r7, #20
 80008da:	23c8      	movs	r3, #200	; 0xc8
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	f002 fdd6 	bl	800348e <HAL_UART_Transmit>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008ec:	b004      	add	sp, #16
 80008ee:	4770      	bx	lr
 80008f0:	20000138 	.word	0x20000138

080008f4 <SendFloat>:
void SendFloat(float num,UART_HandleTypeDef _huart)
{
 80008f4:	b084      	sub	sp, #16
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 8000906:	2232      	movs	r2, #50	; 0x32
 8000908:	2100      	movs	r1, #0
 800090a:	481f      	ldr	r0, [pc, #124]	; (8000988 <SendFloat+0x94>)
 800090c:	f002 ff62 	bl	80037d4 <memset>
	uint16_t intPart = (uint16_t)num;
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff fe81 	bl	8000618 <__aeabi_f2uiz>
 8000916:	4603      	mov	r3, r0
 8000918:	82fb      	strh	r3, [r7, #22]
	float  decPart  = (float )num - intPart;
 800091a:	8afb      	ldrh	r3, [r7, #22]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fcd7 	bl	80002d0 <__aeabi_i2f>
 8000922:	4603      	mov	r3, r0
 8000924:	4619      	mov	r1, r3
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fc1c 	bl	8000164 <__aeabi_fsub>
 800092c:	4603      	mov	r3, r0
 800092e:	613b      	str	r3, [r7, #16]
	uint16_t decPart2 = (decPart*100)/10;
 8000930:	4916      	ldr	r1, [pc, #88]	; (800098c <SendFloat+0x98>)
 8000932:	6938      	ldr	r0, [r7, #16]
 8000934:	f7ff fd20 	bl	8000378 <__aeabi_fmul>
 8000938:	4603      	mov	r3, r0
 800093a:	4915      	ldr	r1, [pc, #84]	; (8000990 <SendFloat+0x9c>)
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fdcf 	bl	80004e0 <__aeabi_fdiv>
 8000942:	4603      	mov	r3, r0
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe67 	bl	8000618 <__aeabi_f2uiz>
 800094a:	4603      	mov	r3, r0
 800094c:	81fb      	strh	r3, [r7, #14]
	sprintf(uartBuffer,"%d.%d",intPart,decPart2);
 800094e:	8afa      	ldrh	r2, [r7, #22]
 8000950:	89fb      	ldrh	r3, [r7, #14]
 8000952:	4910      	ldr	r1, [pc, #64]	; (8000994 <SendFloat+0xa0>)
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <SendFloat+0x94>)
 8000956:	f002 ff45 	bl	80037e4 <siprintf>
	HAL_UART_Transmit(&_huart, (uint8_t *)uartBuffer, sprintf(uartBuffer,"%d.%d",intPart,decPart2), 400);
 800095a:	8afa      	ldrh	r2, [r7, #22]
 800095c:	89fb      	ldrh	r3, [r7, #14]
 800095e:	490d      	ldr	r1, [pc, #52]	; (8000994 <SendFloat+0xa0>)
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <SendFloat+0x94>)
 8000962:	f002 ff3f 	bl	80037e4 <siprintf>
 8000966:	4603      	mov	r3, r0
 8000968:	b29a      	uxth	r2, r3
 800096a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800096e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000972:	4905      	ldr	r1, [pc, #20]	; (8000988 <SendFloat+0x94>)
 8000974:	f002 fd8b 	bl	800348e <HAL_UART_Transmit>
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000982:	b004      	add	sp, #16
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000138 	.word	0x20000138
 800098c:	42c80000 	.word	0x42c80000
 8000990:	41200000 	.word	0x41200000
 8000994:	08004058 	.word	0x08004058

08000998 <SendFloatLn>:
void SendFloatLn(float num,UART_HandleTypeDef _huart)
{
 8000998:	b084      	sub	sp, #16
 800099a:	b5b0      	push	{r4, r5, r7, lr}
 800099c:	b090      	sub	sp, #64	; 0x40
 800099e:	af0e      	add	r7, sp, #56	; 0x38
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	f107 001c 	add.w	r0, r7, #28
 80009a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memset(uartBuffer,0,50);
 80009aa:	2232      	movs	r2, #50	; 0x32
 80009ac:	2100      	movs	r1, #0
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <SendFloatLn+0x5c>)
 80009b0:	f002 ff10 	bl	80037d4 <memset>
	SendFloat(num,_huart);
 80009b4:	466d      	mov	r5, sp
 80009b6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80009ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	602b      	str	r3, [r5, #0]
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff8f 	bl	80008f4 <SendFloat>
	HAL_UART_Transmit(&_huart, (uint8_t *)"\n", 2, 50);
 80009d6:	f107 001c 	add.w	r0, r7, #28
 80009da:	2332      	movs	r3, #50	; 0x32
 80009dc:	2202      	movs	r2, #2
 80009de:	4906      	ldr	r1, [pc, #24]	; (80009f8 <SendFloatLn+0x60>)
 80009e0:	f002 fd55 	bl	800348e <HAL_UART_Transmit>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80009ee:	b004      	add	sp, #16
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000138 	.word	0x20000138
 80009f8:	08004060 	.word	0x08004060

080009fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b095      	sub	sp, #84	; 0x54
 8000a00:	af12      	add	r7, sp, #72	; 0x48
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a02:	f000 fdef 	bl	80015e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a06:	f000 fa8f 	bl	8000f28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a0a:	f000 fb21 	bl	8001050 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a0e:	f000 fac7 	bl	8000fa0 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000a12:	f000 faf3 	bl	8000ffc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	initI2C(hi2c1);
 8000a16:	4cac      	ldr	r4, [pc, #688]	; (8000cc8 <main+0x2cc>)
 8000a18:	4668      	mov	r0, sp
 8000a1a:	f104 0310 	add.w	r3, r4, #16
 8000a1e:	2244      	movs	r2, #68	; 0x44
 8000a20:	4619      	mov	r1, r3
 8000a22:	f002 fec9 	bl	80037b8 <memcpy>
 8000a26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a2a:	f000 fb45 	bl	80010b8 <initI2C>

	uint8_t a = getRegACCEL_CONFIG();
 8000a2e:	f000 fbe9 	bl	8001204 <getRegACCEL_CONFIG>
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	uint8_t g = getRegGYRO_CONFIG();
 8000a36:	f000 fbcd 	bl	80011d4 <getRegGYRO_CONFIG>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71bb      	strb	r3, [r7, #6]



	SendConstChar("a: ", huart1);
 8000a3e:	4ea3      	ldr	r6, [pc, #652]	; (8000ccc <main+0x2d0>)
 8000a40:	466d      	mov	r5, sp
 8000a42:	f106 040c 	add.w	r4, r6, #12
 8000a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a52:	6823      	ldr	r3, [r4, #0]
 8000a54:	602b      	str	r3, [r5, #0]
 8000a56:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000a5a:	489d      	ldr	r0, [pc, #628]	; (8000cd0 <main+0x2d4>)
 8000a5c:	f7ff ff28 	bl	80008b0 <SendConstChar>
	SendUnsignedNumber((uint32_t) a, huart1);
 8000a60:	f897 c007 	ldrb.w	ip, [r7, #7]
 8000a64:	4e99      	ldr	r6, [pc, #612]	; (8000ccc <main+0x2d0>)
 8000a66:	466d      	mov	r5, sp
 8000a68:	f106 040c 	add.w	r4, r6, #12
 8000a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	602b      	str	r3, [r5, #0]
 8000a7c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000a80:	4660      	mov	r0, ip
 8000a82:	f7ff feeb 	bl	800085c <SendUnsignedNumber>
	SendConstChar("\n", huart1);
 8000a86:	4e91      	ldr	r6, [pc, #580]	; (8000ccc <main+0x2d0>)
 8000a88:	466d      	mov	r5, sp
 8000a8a:	f106 040c 	add.w	r4, r6, #12
 8000a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	602b      	str	r3, [r5, #0]
 8000a9e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000aa2:	488c      	ldr	r0, [pc, #560]	; (8000cd4 <main+0x2d8>)
 8000aa4:	f7ff ff04 	bl	80008b0 <SendConstChar>
	SendConstChar("g: ", huart1);
 8000aa8:	4e88      	ldr	r6, [pc, #544]	; (8000ccc <main+0x2d0>)
 8000aaa:	466d      	mov	r5, sp
 8000aac:	f106 040c 	add.w	r4, r6, #12
 8000ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	602b      	str	r3, [r5, #0]
 8000ac0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000ac4:	4884      	ldr	r0, [pc, #528]	; (8000cd8 <main+0x2dc>)
 8000ac6:	f7ff fef3 	bl	80008b0 <SendConstChar>
	SendUnsignedNumber((uint32_t) g, huart1);
 8000aca:	f897 c006 	ldrb.w	ip, [r7, #6]
 8000ace:	4e7f      	ldr	r6, [pc, #508]	; (8000ccc <main+0x2d0>)
 8000ad0:	466d      	mov	r5, sp
 8000ad2:	f106 040c 	add.w	r4, r6, #12
 8000ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	602b      	str	r3, [r5, #0]
 8000ae6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000aea:	4660      	mov	r0, ip
 8000aec:	f7ff feb6 	bl	800085c <SendUnsignedNumber>
	SendConstChar("\n", huart1);
 8000af0:	4e76      	ldr	r6, [pc, #472]	; (8000ccc <main+0x2d0>)
 8000af2:	466d      	mov	r5, sp
 8000af4:	f106 040c 	add.w	r4, r6, #12
 8000af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	602b      	str	r3, [r5, #0]
 8000b08:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000b0c:	4871      	ldr	r0, [pc, #452]	; (8000cd4 <main+0x2d8>)
 8000b0e:	f7ff fecf 	bl	80008b0 <SendConstChar>
	initialize();
 8000b12:	f000 fbaf 	bl	8001274 <initialize>
//	uint8_t dBytePwr = i2cReadByte(MPU6050_ADDRESS,MPU6050_RA_PWR_MGMT_1, 1000, hi2c1);

	uint8_t a_reg = getRegACCEL_CONFIG();
 8000b16:	f000 fb75 	bl	8001204 <getRegACCEL_CONFIG>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	717b      	strb	r3, [r7, #5]
	uint8_t g_reg = getRegGYRO_CONFIG();
 8000b1e:	f000 fb59 	bl	80011d4 <getRegGYRO_CONFIG>
 8000b22:	4603      	mov	r3, r0
 8000b24:	713b      	strb	r3, [r7, #4]

	SendConstChar("a_reg: ", huart1);
 8000b26:	4e69      	ldr	r6, [pc, #420]	; (8000ccc <main+0x2d0>)
 8000b28:	466d      	mov	r5, sp
 8000b2a:	f106 040c 	add.w	r4, r6, #12
 8000b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	602b      	str	r3, [r5, #0]
 8000b3e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000b42:	4866      	ldr	r0, [pc, #408]	; (8000cdc <main+0x2e0>)
 8000b44:	f7ff feb4 	bl	80008b0 <SendConstChar>
	SendUnsignedNumber((uint32_t)a_reg, huart1);
 8000b48:	f897 c005 	ldrb.w	ip, [r7, #5]
 8000b4c:	4e5f      	ldr	r6, [pc, #380]	; (8000ccc <main+0x2d0>)
 8000b4e:	466d      	mov	r5, sp
 8000b50:	f106 040c 	add.w	r4, r6, #12
 8000b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b60:	6823      	ldr	r3, [r4, #0]
 8000b62:	602b      	str	r3, [r5, #0]
 8000b64:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000b68:	4660      	mov	r0, ip
 8000b6a:	f7ff fe77 	bl	800085c <SendUnsignedNumber>
	SendConstChar("\n", huart1);
 8000b6e:	4e57      	ldr	r6, [pc, #348]	; (8000ccc <main+0x2d0>)
 8000b70:	466d      	mov	r5, sp
 8000b72:	f106 040c 	add.w	r4, r6, #12
 8000b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	602b      	str	r3, [r5, #0]
 8000b86:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000b8a:	4852      	ldr	r0, [pc, #328]	; (8000cd4 <main+0x2d8>)
 8000b8c:	f7ff fe90 	bl	80008b0 <SendConstChar>
	SendConstChar("g_reg: ", huart1);
 8000b90:	4e4e      	ldr	r6, [pc, #312]	; (8000ccc <main+0x2d0>)
 8000b92:	466d      	mov	r5, sp
 8000b94:	f106 040c 	add.w	r4, r6, #12
 8000b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	602b      	str	r3, [r5, #0]
 8000ba8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000bac:	484c      	ldr	r0, [pc, #304]	; (8000ce0 <main+0x2e4>)
 8000bae:	f7ff fe7f 	bl	80008b0 <SendConstChar>
	SendUnsignedNumber((uint32_t)g_reg, huart1);
 8000bb2:	f897 c004 	ldrb.w	ip, [r7, #4]
 8000bb6:	4e45      	ldr	r6, [pc, #276]	; (8000ccc <main+0x2d0>)
 8000bb8:	466d      	mov	r5, sp
 8000bba:	f106 040c 	add.w	r4, r6, #12
 8000bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	602b      	str	r3, [r5, #0]
 8000bce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000bd2:	4660      	mov	r0, ip
 8000bd4:	f7ff fe42 	bl	800085c <SendUnsignedNumber>
	SendConstChar("\n", huart1);
 8000bd8:	4e3c      	ldr	r6, [pc, #240]	; (8000ccc <main+0x2d0>)
 8000bda:	466d      	mov	r5, sp
 8000bdc:	f106 040c 	add.w	r4, r6, #12
 8000be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	602b      	str	r3, [r5, #0]
 8000bf0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000bf4:	4837      	ldr	r0, [pc, #220]	; (8000cd4 <main+0x2d8>)
 8000bf6:	f7ff fe5b 	bl	80008b0 <SendConstChar>

	while(!deviceIsAvailable());
 8000bfa:	bf00      	nop
 8000bfc:	f000 fb1a 	bl	8001234 <deviceIsAvailable>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0fa      	beq.n	8000bfc <main+0x200>

		/* USER CODE BEGIN 3 */
		// HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS<<1, 0x75, 1, &check, 1, 1000);


			HAL_Delay(1);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fd4e 	bl	80016a8 <HAL_Delay>

			getMotion6(&ax_raw, &ay_raw, &az_raw, &gx_raw, &gy_raw, &gz_raw);
 8000c0c:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <main+0x2e8>)
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <main+0x2ec>)
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	4b35      	ldr	r3, [pc, #212]	; (8000cec <main+0x2f0>)
 8000c16:	4a36      	ldr	r2, [pc, #216]	; (8000cf0 <main+0x2f4>)
 8000c18:	4936      	ldr	r1, [pc, #216]	; (8000cf4 <main+0x2f8>)
 8000c1a:	4837      	ldr	r0, [pc, #220]	; (8000cf8 <main+0x2fc>)
 8000c1c:	f000 fb3a 	bl	8001294 <getMotion6>

			ax = ax_raw / 16384.0f;
 8000c20:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <main+0x2fc>)
 8000c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fb52 	bl	80002d0 <__aeabi_i2f>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fc54 	bl	80004e0 <__aeabi_fdiv>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <main+0x300>)
 8000c3e:	601a      	str	r2, [r3, #0]
			ay = ay_raw / 16384.0f;
 8000c40:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <main+0x2f8>)
 8000c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fb42 	bl	80002d0 <__aeabi_i2f>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fc44 	bl	80004e0 <__aeabi_fdiv>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <main+0x304>)
 8000c5e:	601a      	str	r2, [r3, #0]
			az = az_raw / 16384.0f;
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <main+0x2f4>)
 8000c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fb32 	bl	80002d0 <__aeabi_i2f>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fc34 	bl	80004e0 <__aeabi_fdiv>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <main+0x308>)
 8000c7e:	601a      	str	r2, [r3, #0]

			gx = gx_raw / 131.0f;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <main+0x2f0>)
 8000c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fb22 	bl	80002d0 <__aeabi_i2f>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	491e      	ldr	r1, [pc, #120]	; (8000d08 <main+0x30c>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fc25 	bl	80004e0 <__aeabi_fdiv>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <main+0x310>)
 8000c9c:	601a      	str	r2, [r3, #0]
			gy = gy_raw / 131.0f;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <main+0x2ec>)
 8000ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fb13 	bl	80002d0 <__aeabi_i2f>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4916      	ldr	r1, [pc, #88]	; (8000d08 <main+0x30c>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fc16 	bl	80004e0 <__aeabi_fdiv>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <main+0x314>)
 8000cba:	601a      	str	r2, [r3, #0]
			gz = gz_raw / 131.0f;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <main+0x2e8>)
 8000cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	e026      	b.n	8000d14 <main+0x318>
 8000cc6:	bf00      	nop
 8000cc8:	2000016c 	.word	0x2000016c
 8000ccc:	200000b8 	.word	0x200000b8
 8000cd0:	08004064 	.word	0x08004064
 8000cd4:	08004068 	.word	0x08004068
 8000cd8:	0800406c 	.word	0x0800406c
 8000cdc:	08004070 	.word	0x08004070
 8000ce0:	08004078 	.word	0x08004078
 8000ce4:	200001d4 	.word	0x200001d4
 8000ce8:	200001de 	.word	0x200001de
 8000cec:	200001d0 	.word	0x200001d0
 8000cf0:	200001cc 	.word	0x200001cc
 8000cf4:	200001d2 	.word	0x200001d2
 8000cf8:	200001dc 	.word	0x200001dc
 8000cfc:	200001c8 	.word	0x200001c8
 8000d00:	200001e4 	.word	0x200001e4
 8000d04:	200001c4 	.word	0x200001c4
 8000d08:	43030000 	.word	0x43030000
 8000d0c:	200001e0 	.word	0x200001e0
 8000d10:	200001c0 	.word	0x200001c0
 8000d14:	f7ff fadc 	bl	80002d0 <__aeabi_i2f>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4975      	ldr	r1, [pc, #468]	; (8000ef0 <main+0x4f4>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fbdf 	bl	80004e0 <__aeabi_fdiv>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b73      	ldr	r3, [pc, #460]	; (8000ef4 <main+0x4f8>)
 8000d28:	601a      	str	r2, [r3, #0]
			SendConstChar("ax: ", huart1);
 8000d2a:	4e73      	ldr	r6, [pc, #460]	; (8000ef8 <main+0x4fc>)
 8000d2c:	466d      	mov	r5, sp
 8000d2e:	f106 040c 	add.w	r4, r6, #12
 8000d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	602b      	str	r3, [r5, #0]
 8000d42:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d46:	486d      	ldr	r0, [pc, #436]	; (8000efc <main+0x500>)
 8000d48:	f7ff fdb2 	bl	80008b0 <SendConstChar>
			SendFloatLn(ax, huart1);
 8000d4c:	4b6c      	ldr	r3, [pc, #432]	; (8000f00 <main+0x504>)
 8000d4e:	f8d3 c000 	ldr.w	ip, [r3]
 8000d52:	4e69      	ldr	r6, [pc, #420]	; (8000ef8 <main+0x4fc>)
 8000d54:	466d      	mov	r5, sp
 8000d56:	f106 040c 	add.w	r4, r6, #12
 8000d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	602b      	str	r3, [r5, #0]
 8000d6a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d6e:	4660      	mov	r0, ip
 8000d70:	f7ff fe12 	bl	8000998 <SendFloatLn>

			SendConstChar("ay: ", huart1);
 8000d74:	4e60      	ldr	r6, [pc, #384]	; (8000ef8 <main+0x4fc>)
 8000d76:	466d      	mov	r5, sp
 8000d78:	f106 040c 	add.w	r4, r6, #12
 8000d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	602b      	str	r3, [r5, #0]
 8000d8c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d90:	485c      	ldr	r0, [pc, #368]	; (8000f04 <main+0x508>)
 8000d92:	f7ff fd8d 	bl	80008b0 <SendConstChar>
			SendFloatLn(ay, huart1);
 8000d96:	4b5c      	ldr	r3, [pc, #368]	; (8000f08 <main+0x50c>)
 8000d98:	f8d3 c000 	ldr.w	ip, [r3]
 8000d9c:	4e56      	ldr	r6, [pc, #344]	; (8000ef8 <main+0x4fc>)
 8000d9e:	466d      	mov	r5, sp
 8000da0:	f106 040c 	add.w	r4, r6, #12
 8000da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	602b      	str	r3, [r5, #0]
 8000db4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000db8:	4660      	mov	r0, ip
 8000dba:	f7ff fded 	bl	8000998 <SendFloatLn>

			SendConstChar("az: ", huart1);
 8000dbe:	4e4e      	ldr	r6, [pc, #312]	; (8000ef8 <main+0x4fc>)
 8000dc0:	466d      	mov	r5, sp
 8000dc2:	f106 040c 	add.w	r4, r6, #12
 8000dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	602b      	str	r3, [r5, #0]
 8000dd6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000dda:	484c      	ldr	r0, [pc, #304]	; (8000f0c <main+0x510>)
 8000ddc:	f7ff fd68 	bl	80008b0 <SendConstChar>
			SendFloatLn(az, huart1);
 8000de0:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <main+0x514>)
 8000de2:	f8d3 c000 	ldr.w	ip, [r3]
 8000de6:	4e44      	ldr	r6, [pc, #272]	; (8000ef8 <main+0x4fc>)
 8000de8:	466d      	mov	r5, sp
 8000dea:	f106 040c 	add.w	r4, r6, #12
 8000dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	602b      	str	r3, [r5, #0]
 8000dfe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e02:	4660      	mov	r0, ip
 8000e04:	f7ff fdc8 	bl	8000998 <SendFloatLn>

			SendConstChar("gx: ", huart1);
 8000e08:	4e3b      	ldr	r6, [pc, #236]	; (8000ef8 <main+0x4fc>)
 8000e0a:	466d      	mov	r5, sp
 8000e0c:	f106 040c 	add.w	r4, r6, #12
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	602b      	str	r3, [r5, #0]
 8000e20:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e24:	483b      	ldr	r0, [pc, #236]	; (8000f14 <main+0x518>)
 8000e26:	f7ff fd43 	bl	80008b0 <SendConstChar>
			SendFloatLn(gx, huart1);
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <main+0x51c>)
 8000e2c:	f8d3 c000 	ldr.w	ip, [r3]
 8000e30:	4e31      	ldr	r6, [pc, #196]	; (8000ef8 <main+0x4fc>)
 8000e32:	466d      	mov	r5, sp
 8000e34:	f106 040c 	add.w	r4, r6, #12
 8000e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	602b      	str	r3, [r5, #0]
 8000e48:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e4c:	4660      	mov	r0, ip
 8000e4e:	f7ff fda3 	bl	8000998 <SendFloatLn>

			SendConstChar("gy: ", huart1);
 8000e52:	4e29      	ldr	r6, [pc, #164]	; (8000ef8 <main+0x4fc>)
 8000e54:	466d      	mov	r5, sp
 8000e56:	f106 040c 	add.w	r4, r6, #12
 8000e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	602b      	str	r3, [r5, #0]
 8000e6a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e6e:	482b      	ldr	r0, [pc, #172]	; (8000f1c <main+0x520>)
 8000e70:	f7ff fd1e 	bl	80008b0 <SendConstChar>
			SendFloatLn(gy, huart1);
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <main+0x524>)
 8000e76:	f8d3 c000 	ldr.w	ip, [r3]
 8000e7a:	4e1f      	ldr	r6, [pc, #124]	; (8000ef8 <main+0x4fc>)
 8000e7c:	466d      	mov	r5, sp
 8000e7e:	f106 040c 	add.w	r4, r6, #12
 8000e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	602b      	str	r3, [r5, #0]
 8000e92:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e96:	4660      	mov	r0, ip
 8000e98:	f7ff fd7e 	bl	8000998 <SendFloatLn>

			SendConstChar("gz: ", huart1);
 8000e9c:	4e16      	ldr	r6, [pc, #88]	; (8000ef8 <main+0x4fc>)
 8000e9e:	466d      	mov	r5, sp
 8000ea0:	f106 040c 	add.w	r4, r6, #12
 8000ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	602b      	str	r3, [r5, #0]
 8000eb4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000eb8:	481a      	ldr	r0, [pc, #104]	; (8000f24 <main+0x528>)
 8000eba:	f7ff fcf9 	bl	80008b0 <SendConstChar>
			SendFloatLn(gz, huart1);
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <main+0x4f8>)
 8000ec0:	f8d3 c000 	ldr.w	ip, [r3]
 8000ec4:	4e0c      	ldr	r6, [pc, #48]	; (8000ef8 <main+0x4fc>)
 8000ec6:	466d      	mov	r5, sp
 8000ec8:	f106 040c 	add.w	r4, r6, #12
 8000ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	602b      	str	r3, [r5, #0]
 8000edc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000ee0:	4660      	mov	r0, ip
 8000ee2:	f7ff fd59 	bl	8000998 <SendFloatLn>

		//  HAL_I2C_Mem_Write(&hi2c1, DEVIDEADDRESS<<1|WRITE, 0x6B, 1, , Size, Timeout)

		HAL_Delay(1000);
 8000ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eea:	f000 fbdd 	bl	80016a8 <HAL_Delay>
			HAL_Delay(1);
 8000eee:	e68a      	b.n	8000c06 <main+0x20a>
 8000ef0:	43030000 	.word	0x43030000
 8000ef4:	200001d8 	.word	0x200001d8
 8000ef8:	200000b8 	.word	0x200000b8
 8000efc:	08004080 	.word	0x08004080
 8000f00:	200001c8 	.word	0x200001c8
 8000f04:	08004088 	.word	0x08004088
 8000f08:	200001e4 	.word	0x200001e4
 8000f0c:	08004090 	.word	0x08004090
 8000f10:	200001c4 	.word	0x200001c4
 8000f14:	08004098 	.word	0x08004098
 8000f18:	200001e0 	.word	0x200001e0
 8000f1c:	080040a0 	.word	0x080040a0
 8000f20:	200001c0 	.word	0x200001c0
 8000f24:	080040a8 	.word	0x080040a8

08000f28 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b090      	sub	sp, #64	; 0x40
 8000f2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	2228      	movs	r2, #40	; 0x28
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 fc4c 	bl	80037d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f52:	2310      	movs	r3, #16
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fe2e 	bl	8002bc0 <HAL_RCC_OscConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x46>
		Error_Handler();
 8000f6a:	f000 f89f 	bl	80010ac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f6e:	230f      	movs	r3, #15
 8000f70:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 f89a 	bl	80030c0 <HAL_RCC_ClockConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x6e>
		Error_Handler();
 8000f92:	f000 f88b 	bl	80010ac <Error_Handler>
	}
}
 8000f96:	bf00      	nop
 8000f98:	3740      	adds	r7, #64	; 0x40
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fa6:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <MX_I2C1_Init+0x54>)
 8000fa8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_I2C1_Init+0x58>)
 8000fae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fde:	f000 fdef 	bl	8001bc0 <HAL_I2C_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000fe8:	f000 f860 	bl	80010ac <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000016c 	.word	0x2000016c
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	000186a0 	.word	0x000186a0

08000ffc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <MX_USART1_UART_Init+0x50>)
 8001004:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001034:	f002 f9de 	bl	80033f4 <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800103e:	f000 f835 	bl	80010ac <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000b8 	.word	0x200000b8
 800104c:	40013800 	.word	0x40013800

08001050 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_GPIO_Init+0x58>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <MX_GPIO_Init+0x58>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_GPIO_Init+0x58>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_GPIO_Init+0x58>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <MX_GPIO_Init+0x58>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6193      	str	r3, [r2, #24]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_GPIO_Init+0x58>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_GPIO_Init+0x58>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <MX_GPIO_Init+0x58>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6193      	str	r3, [r2, #24]
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <MX_GPIO_Init+0x58>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000

080010ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <initI2C>:
#include "mpu6050.h"
#include "I2C.h"
I2C_HandleTypeDef hi2cx;
extern UART_HandleTypeDef huart1;
void initI2C(I2C_HandleTypeDef _hi2c) {
 80010b8:	b084      	sub	sp, #16
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
 80010be:	f107 0c08 	add.w	ip, r7, #8
 80010c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2cx = _hi2c;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <initI2C+0x2c>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	2254      	movs	r2, #84	; 0x54
 80010d0:	4619      	mov	r1, r3
 80010d2:	f002 fb71 	bl	80037b8 <memcpy>
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010de:	b004      	add	sp, #16
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200001e8 	.word	0x200001e8

080010e8 <setClockSource>:
void setClockSource(uint8_t sourse) {
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b09b      	sub	sp, #108	; 0x6c
 80010ec:	af18      	add	r7, sp, #96	; 0x60
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	i2cWriteBits(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, sourse,MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, 200, hi2cx);
 80010f2:	79fc      	ldrb	r4, [r7, #7]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <setClockSource+0x38>)
 80010f6:	ab02      	add	r3, sp, #8
 80010f8:	4611      	mov	r1, r2
 80010fa:	2254      	movs	r2, #84	; 0x54
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fb5b 	bl	80037b8 <memcpy>
 8001102:	23c8      	movs	r3, #200	; 0xc8
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	2303      	movs	r3, #3
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2302      	movs	r3, #2
 800110c:	4622      	mov	r2, r4
 800110e:	216b      	movs	r1, #107	; 0x6b
 8001110:	2068      	movs	r0, #104	; 0x68
 8001112:	f7ff fb0d 	bl	8000730 <i2cWriteBits>
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bd90      	pop	{r4, r7, pc}
 800111e:	bf00      	nop
 8001120:	200001e8 	.word	0x200001e8

08001124 <setSeepEnable>:
void setSeepEnable(uint8_t permit) {
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b099      	sub	sp, #100	; 0x64
 8001128:	af16      	add	r7, sp, #88	; 0x58
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	i2cWriteBit(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, permit,MPU6050_PWR1_SLEEP_BIT, 200, hi2cx);
 800112e:	79fc      	ldrb	r4, [r7, #7]
 8001130:	4a09      	ldr	r2, [pc, #36]	; (8001158 <setSeepEnable+0x34>)
 8001132:	ab01      	add	r3, sp, #4
 8001134:	4611      	mov	r1, r2
 8001136:	2254      	movs	r2, #84	; 0x54
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fb3d 	bl	80037b8 <memcpy>
 800113e:	23c8      	movs	r3, #200	; 0xc8
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2306      	movs	r3, #6
 8001144:	4622      	mov	r2, r4
 8001146:	216b      	movs	r1, #107	; 0x6b
 8001148:	2068      	movs	r0, #104	; 0x68
 800114a:	f7ff fb4e 	bl	80007ea <i2cWriteBit>
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	bf00      	nop
 8001158:	200001e8 	.word	0x200001e8

0800115c <setFullScaleGyroRange>:
void setFullScaleGyroRange(uint8_t range) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b09b      	sub	sp, #108	; 0x6c
 8001160:	af18      	add	r7, sp, #96	; 0x60
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	i2cWriteBits(MPU6050_ADDRESS, MPU6050_RA_GYR_CONF, range,MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, 200, hi2cx);
 8001166:	79fc      	ldrb	r4, [r7, #7]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <setFullScaleGyroRange+0x38>)
 800116a:	ab02      	add	r3, sp, #8
 800116c:	4611      	mov	r1, r2
 800116e:	2254      	movs	r2, #84	; 0x54
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fb21 	bl	80037b8 <memcpy>
 8001176:	23c8      	movs	r3, #200	; 0xc8
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2302      	movs	r3, #2
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2304      	movs	r3, #4
 8001180:	4622      	mov	r2, r4
 8001182:	211b      	movs	r1, #27
 8001184:	2068      	movs	r0, #104	; 0x68
 8001186:	f7ff fad3 	bl	8000730 <i2cWriteBits>
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	200001e8 	.word	0x200001e8

08001198 <setFullScaleAccelRange>:
uint8_t getScaleGyroRange() {
	return i2cReadBits(MPU6050_ADDRESS, MPU6050_RA_GYR_CONF,MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, 200, hi2cx);
}
void setFullScaleAccelRange(uint8_t range) {
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b09b      	sub	sp, #108	; 0x6c
 800119c:	af18      	add	r7, sp, #96	; 0x60
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	i2cWriteBits(MPU6050_ADDRESS, MPU6050_RA_ACC_CONF, range,MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, 200, hi2cx);
 80011a2:	79fc      	ldrb	r4, [r7, #7]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <setFullScaleAccelRange+0x38>)
 80011a6:	ab02      	add	r3, sp, #8
 80011a8:	4611      	mov	r1, r2
 80011aa:	2254      	movs	r2, #84	; 0x54
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fb03 	bl	80037b8 <memcpy>
 80011b2:	23c8      	movs	r3, #200	; 0xc8
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	2302      	movs	r3, #2
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2304      	movs	r3, #4
 80011bc:	4622      	mov	r2, r4
 80011be:	211c      	movs	r1, #28
 80011c0:	2068      	movs	r0, #104	; 0x68
 80011c2:	f7ff fab5 	bl	8000730 <i2cWriteBits>
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001e8 	.word	0x200001e8

080011d4 <getRegGYRO_CONFIG>:
uint8_t getScaleAccelRange() {
	return i2cReadBits(MPU6050_ADDRESS, MPU6050_RA_ACC_CONF,MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, 200, hi2cx);
}
uint8_t getRegGYRO_CONFIG() {
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b095      	sub	sp, #84	; 0x54
 80011d8:	af14      	add	r7, sp, #80	; 0x50
	return i2cReadByte(MPU6050_ADDRESS, MPU6050_RA_GYR_CONF, 200, hi2cx);
 80011da:	4c09      	ldr	r4, [pc, #36]	; (8001200 <getRegGYRO_CONFIG+0x2c>)
 80011dc:	4668      	mov	r0, sp
 80011de:	1d23      	adds	r3, r4, #4
 80011e0:	2250      	movs	r2, #80	; 0x50
 80011e2:	4619      	mov	r1, r3
 80011e4:	f002 fae8 	bl	80037b8 <memcpy>
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	22c8      	movs	r2, #200	; 0xc8
 80011ec:	211b      	movs	r1, #27
 80011ee:	2068      	movs	r0, #104	; 0x68
 80011f0:	f7ff fa52 	bl	8000698 <i2cReadByte>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3704      	adds	r7, #4
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	200001e8 	.word	0x200001e8

08001204 <getRegACCEL_CONFIG>:
uint8_t getRegACCEL_CONFIG() {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b095      	sub	sp, #84	; 0x54
 8001208:	af14      	add	r7, sp, #80	; 0x50
	return i2cReadByte(MPU6050_ADDRESS, MPU6050_RA_ACC_CONF, 200, hi2cx);
 800120a:	4c09      	ldr	r4, [pc, #36]	; (8001230 <getRegACCEL_CONFIG+0x2c>)
 800120c:	4668      	mov	r0, sp
 800120e:	1d23      	adds	r3, r4, #4
 8001210:	2250      	movs	r2, #80	; 0x50
 8001212:	4619      	mov	r1, r3
 8001214:	f002 fad0 	bl	80037b8 <memcpy>
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	22c8      	movs	r2, #200	; 0xc8
 800121c:	211c      	movs	r1, #28
 800121e:	2068      	movs	r0, #104	; 0x68
 8001220:	f7ff fa3a 	bl	8000698 <i2cReadByte>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3704      	adds	r7, #4
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	200001e8 	.word	0x200001e8

08001234 <deviceIsAvailable>:
uint8_t deviceIsAvailable() {
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b097      	sub	sp, #92	; 0x5c
 8001238:	af14      	add	r7, sp, #80	; 0x50
	uint8_t dByte = i2cReadByte(MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1000,
 800123a:	4c0d      	ldr	r4, [pc, #52]	; (8001270 <deviceIsAvailable+0x3c>)
 800123c:	4668      	mov	r0, sp
 800123e:	1d23      	adds	r3, r4, #4
 8001240:	2250      	movs	r2, #80	; 0x50
 8001242:	4619      	mov	r1, r3
 8001244:	f002 fab8 	bl	80037b8 <memcpy>
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800124e:	2175      	movs	r1, #117	; 0x75
 8001250:	2068      	movs	r0, #104	; 0x68
 8001252:	f7ff fa21 	bl	8000698 <i2cReadByte>
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
			hi2cx);
	//	HAL_I2C_Mem_Write(&hi2cx, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I,MPU6050_RA_WHO_AM_I_SIZE , &dByte, 1, 1000);
	if (dByte == MPU6050_ADDRESS)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b68      	cmp	r3, #104	; 0x68
 800125e:	d101      	bne.n	8001264 <deviceIsAvailable+0x30>
		return 1;
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <deviceIsAvailable+0x32>
	else
		return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	200001e8 	.word	0x200001e8

08001274 <initialize>:
void initialize() {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	uint8_t Data;
	setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff ff35 	bl	80010e8 <setClockSource>
	setSeepEnable(0);
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff ff50 	bl	8001124 <setSeepEnable>
	//HAL_I2C_Mem_Write(&hi2cx, MPU6050_ADDRESS, 0x19, 1, 0x07, 1, 1000);
	setFullScaleGyroRange(MPU6050_GYRO_FS_SEL_250);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff ff69 	bl	800115c <setFullScaleGyroRange>
	setFullScaleAccelRange(MPU6050_ACCL_AFS_SEL_2G);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ff84 	bl	8001198 <setFullScaleAccelRange>

	// Set Gyroscopic configuration in GYRO_CONFIG Register
	// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
//				Data = 0x00;
//				HAL_I2C_Mem_Write(&hi2cx, MPU6050_ADDRESS, MPU6050_RA_GYR_CONF, 1, &Data, 1, 1000);
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <getMotion6>:
void getMotion6(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy,
		int16_t *gz) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b09a      	sub	sp, #104	; 0x68
 8001298:	af16      	add	r7, sp, #88	; 0x58
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
	i2cReadBytes(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 14, i2cBuffer, 2000,hi2cx);
 80012a2:	4a2b      	ldr	r2, [pc, #172]	; (8001350 <getMotion6+0xbc>)
 80012a4:	ab01      	add	r3, sp, #4
 80012a6:	4611      	mov	r1, r2
 80012a8:	2254      	movs	r2, #84	; 0x54
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fa84 	bl	80037b8 <memcpy>
 80012b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <getMotion6+0xc0>)
 80012b8:	220e      	movs	r2, #14
 80012ba:	213b      	movs	r1, #59	; 0x3b
 80012bc:	2068      	movs	r0, #104	; 0x68
 80012be:	f7ff f9cb 	bl	8000658 <i2cReadBytes>
	*ax = (int16_t) (i2cBuffer[0] << 8) | i2cBuffer[1];
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <getMotion6+0xc0>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <getMotion6+0xc0>)
 80012cc:	785b      	ldrb	r3, [r3, #1]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	801a      	strh	r2, [r3, #0]
	*ay = (int16_t) (i2cBuffer[2] << 8) | i2cBuffer[3];
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <getMotion6+0xc0>)
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	b21a      	sxth	r2, r3
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <getMotion6+0xc0>)
 80012e2:	78db      	ldrb	r3, [r3, #3]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	801a      	strh	r2, [r3, #0]
	*az = (int16_t) (i2cBuffer[4] << 8) | i2cBuffer[5];
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <getMotion6+0xc0>)
 80012f0:	791b      	ldrb	r3, [r3, #4]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <getMotion6+0xc0>)
 80012f8:	795b      	ldrb	r3, [r3, #5]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21a      	sxth	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	801a      	strh	r2, [r3, #0]
	//i2cBuffer[6] i2cBuffer[7] temperature
	*gx = (int16_t) (i2cBuffer[8] << 8) | i2cBuffer[9];
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <getMotion6+0xc0>)
 8001306:	7a1b      	ldrb	r3, [r3, #8]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <getMotion6+0xc0>)
 800130e:	7a5b      	ldrb	r3, [r3, #9]
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21a      	sxth	r2, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	801a      	strh	r2, [r3, #0]
	*gy = (int16_t) (i2cBuffer[10] << 8) | i2cBuffer[11];
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <getMotion6+0xc0>)
 800131c:	7a9b      	ldrb	r3, [r3, #10]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <getMotion6+0xc0>)
 8001324:	7adb      	ldrb	r3, [r3, #11]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21a      	sxth	r2, r3
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	801a      	strh	r2, [r3, #0]
	*gz = (int16_t) (i2cBuffer[12] << 8) | i2cBuffer[13];
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <getMotion6+0xc0>)
 8001332:	7b1b      	ldrb	r3, [r3, #12]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <getMotion6+0xc0>)
 800133a:	7b5b      	ldrb	r3, [r3, #13]
 800133c:	b21b      	sxth	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b21a      	sxth	r2, r3
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	801a      	strh	r2, [r3, #0]

}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001e8 	.word	0x200001e8
 8001354:	20000098 	.word	0x20000098

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_MspInit+0x5c>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_MspInit+0x5c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_MspInit+0x5c>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x5c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x5c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x5c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_MspInit+0x60>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_MspInit+0x60>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000

080013bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_I2C_MspInit+0x70>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d123      	bne.n	8001424 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_I2C_MspInit+0x74>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_I2C_MspInit+0x74>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_I2C_MspInit+0x74>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f4:	23c0      	movs	r3, #192	; 0xc0
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f8:	2312      	movs	r3, #18
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	480b      	ldr	r0, [pc, #44]	; (8001434 <HAL_I2C_MspInit+0x78>)
 8001408:	f000 fa56 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_I2C_MspInit+0x74>)
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_I2C_MspInit+0x74>)
 8001412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001416:	61d3      	str	r3, [r2, #28]
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_I2C_MspInit+0x74>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40005400 	.word	0x40005400
 8001430:	40021000 	.word	0x40021000
 8001434:	40010c00 	.word	0x40010c00

08001438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <HAL_UART_MspInit+0x8c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d131      	bne.n	80014bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_UART_MspInit+0x90>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a1a      	ldr	r2, [pc, #104]	; (80014c8 <HAL_UART_MspInit+0x90>)
 800145e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_UART_MspInit+0x90>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_UART_MspInit+0x90>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <HAL_UART_MspInit+0x90>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_UART_MspInit+0x90>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	4619      	mov	r1, r3
 800149c:	480b      	ldr	r0, [pc, #44]	; (80014cc <HAL_UART_MspInit+0x94>)
 800149e:	f000 fa0b 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_UART_MspInit+0x94>)
 80014b8:	f000 f9fe 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010800 	.word	0x40010800

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f8ab 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <_sbrk+0x5c>)
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <_sbrk+0x60>)
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_sbrk+0x64>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <_sbrk+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	429a      	cmp	r2, r3
 800154e:	d207      	bcs.n	8001560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001550:	f002 f908 	bl	8003764 <__errno>
 8001554:	4603      	mov	r3, r0
 8001556:	220c      	movs	r2, #12
 8001558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e009      	b.n	8001574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <_sbrk+0x64>)
 8001570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20005000 	.word	0x20005000
 8001580:	00000400 	.word	0x00000400
 8001584:	2000008c 	.word	0x2000008c
 8001588:	20000250 	.word	0x20000250

0800158c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001598:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800159a:	e003      	b.n	80015a4 <LoopCopyDataInit>

0800159c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800159e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015a2:	3104      	adds	r1, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015a4:	480a      	ldr	r0, [pc, #40]	; (80015d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015ac:	d3f6      	bcc.n	800159c <CopyDataInit>
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015b0:	e002      	b.n	80015b8 <LoopFillZerobss>

080015b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015b4:	f842 3b04 	str.w	r3, [r2], #4

080015b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015bc:	d3f9      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015be:	f7ff ffe5 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c2:	f002 f8d5 	bl	8003770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c6:	f7ff fa19 	bl	80009fc <main>
  bx lr
 80015ca:	4770      	bx	lr
  ldr r3, =_sidata
 80015cc:	08004114 	.word	0x08004114
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015d4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80015d8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80015dc:	20000250 	.word	0x20000250

080015e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_2_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x28>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x28>)
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f92b 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff feaa 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f935 	bl	800189e <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 f90b 	bl	8001866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_IncTick+0x1c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_IncTick+0x20>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a03      	ldr	r2, [pc, #12]	; (8001690 <HAL_IncTick+0x20>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000008 	.word	0x20000008
 8001690:	2000023c 	.word	0x2000023c

08001694 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <HAL_GetTick+0x10>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	2000023c 	.word	0x2000023c

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff fff0 	bl	8001694 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffe0 	bl	8001694 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800181c:	d301      	bcc.n	8001822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181e:	2301      	movs	r3, #1
 8001820:	e00f      	b.n	8001842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <SysTick_Config+0x40>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182a:	210f      	movs	r1, #15
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f7ff ff90 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <SysTick_Config+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Config+0x40>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff49 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff5e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff90 	bl	80017a8 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5f 	bl	8001754 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffb0 	bl	800180c <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b08b      	sub	sp, #44	; 0x2c
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ca:	e169      	b.n	8001ba0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018cc:	2201      	movs	r2, #1
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 8158 	bne.w	8001b9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a9a      	ldr	r2, [pc, #616]	; (8001b58 <HAL_GPIO_Init+0x2a0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d05e      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 80018f4:	4a98      	ldr	r2, [pc, #608]	; (8001b58 <HAL_GPIO_Init+0x2a0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d875      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 80018fa:	4a98      	ldr	r2, [pc, #608]	; (8001b5c <HAL_GPIO_Init+0x2a4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d058      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001900:	4a96      	ldr	r2, [pc, #600]	; (8001b5c <HAL_GPIO_Init+0x2a4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d86f      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001906:	4a96      	ldr	r2, [pc, #600]	; (8001b60 <HAL_GPIO_Init+0x2a8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d052      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 800190c:	4a94      	ldr	r2, [pc, #592]	; (8001b60 <HAL_GPIO_Init+0x2a8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d869      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001912:	4a94      	ldr	r2, [pc, #592]	; (8001b64 <HAL_GPIO_Init+0x2ac>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d04c      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001918:	4a92      	ldr	r2, [pc, #584]	; (8001b64 <HAL_GPIO_Init+0x2ac>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d863      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 800191e:	4a92      	ldr	r2, [pc, #584]	; (8001b68 <HAL_GPIO_Init+0x2b0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d046      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001924:	4a90      	ldr	r2, [pc, #576]	; (8001b68 <HAL_GPIO_Init+0x2b0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d85d      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 800192a:	2b12      	cmp	r3, #18
 800192c:	d82a      	bhi.n	8001984 <HAL_GPIO_Init+0xcc>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d859      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <HAL_GPIO_Init+0x80>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	080019b3 	.word	0x080019b3
 800193c:	0800198d 	.word	0x0800198d
 8001940:	0800199f 	.word	0x0800199f
 8001944:	080019e1 	.word	0x080019e1
 8001948:	080019e7 	.word	0x080019e7
 800194c:	080019e7 	.word	0x080019e7
 8001950:	080019e7 	.word	0x080019e7
 8001954:	080019e7 	.word	0x080019e7
 8001958:	080019e7 	.word	0x080019e7
 800195c:	080019e7 	.word	0x080019e7
 8001960:	080019e7 	.word	0x080019e7
 8001964:	080019e7 	.word	0x080019e7
 8001968:	080019e7 	.word	0x080019e7
 800196c:	080019e7 	.word	0x080019e7
 8001970:	080019e7 	.word	0x080019e7
 8001974:	080019e7 	.word	0x080019e7
 8001978:	080019e7 	.word	0x080019e7
 800197c:	08001995 	.word	0x08001995
 8001980:	080019a9 	.word	0x080019a9
 8001984:	4a79      	ldr	r2, [pc, #484]	; (8001b6c <HAL_GPIO_Init+0x2b4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198a:	e02c      	b.n	80019e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e029      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	3304      	adds	r3, #4
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e024      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	3308      	adds	r3, #8
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e01f      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	330c      	adds	r3, #12
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e01a      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ba:	2304      	movs	r3, #4
 80019bc:	623b      	str	r3, [r7, #32]
          break;
 80019be:	e013      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c8:	2308      	movs	r3, #8
 80019ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	611a      	str	r2, [r3, #16]
          break;
 80019d2:	e009      	b.n	80019e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d4:	2308      	movs	r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	615a      	str	r2, [r3, #20]
          break;
 80019de:	e003      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          break;
 80019e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2bff      	cmp	r3, #255	; 0xff
 80019ec:	d801      	bhi.n	80019f2 <HAL_GPIO_Init+0x13a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	e001      	b.n	80019f6 <HAL_GPIO_Init+0x13e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3304      	adds	r3, #4
 80019f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d802      	bhi.n	8001a04 <HAL_GPIO_Init+0x14c>
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0x152>
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	3b08      	subs	r3, #8
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	210f      	movs	r1, #15
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	6a39      	ldr	r1, [r7, #32]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80b1 	beq.w	8001b9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a4c      	ldr	r2, [pc, #304]	; (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a50:	4a48      	ldr	r2, [pc, #288]	; (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a40      	ldr	r2, [pc, #256]	; (8001b78 <HAL_GPIO_Init+0x2c0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_GPIO_Init+0x1ec>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3f      	ldr	r2, [pc, #252]	; (8001b7c <HAL_GPIO_Init+0x2c4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00d      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3e      	ldr	r2, [pc, #248]	; (8001b80 <HAL_GPIO_Init+0x2c8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_Init+0x1e4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3d      	ldr	r2, [pc, #244]	; (8001b84 <HAL_GPIO_Init+0x2cc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_GPIO_Init+0x1e0>
 8001a94:	2303      	movs	r3, #3
 8001a96:	e006      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001a98:	2304      	movs	r3, #4
 8001a9a:	e004      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e002      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	f002 0203 	and.w	r2, r2, #3
 8001aac:	0092      	lsls	r2, r2, #2
 8001aae:	4093      	lsls	r3, r2
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ab6:	492f      	ldr	r1, [pc, #188]	; (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	492c      	ldr	r1, [pc, #176]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4928      	ldr	r1, [pc, #160]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af8:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4922      	ldr	r1, [pc, #136]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	491e      	ldr	r1, [pc, #120]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4918      	ldr	r1, [pc, #96]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4914      	ldr	r1, [pc, #80]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d021      	beq.n	8001b8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	490e      	ldr	r1, [pc, #56]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e021      	b.n	8001b9a <HAL_GPIO_Init+0x2e2>
 8001b56:	bf00      	nop
 8001b58:	10320000 	.word	0x10320000
 8001b5c:	10310000 	.word	0x10310000
 8001b60:	10220000 	.word	0x10220000
 8001b64:	10210000 	.word	0x10210000
 8001b68:	10120000 	.word	0x10120000
 8001b6c:	10110000 	.word	0x10110000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010000 	.word	0x40010000
 8001b78:	40010800 	.word	0x40010800
 8001b7c:	40010c00 	.word	0x40010c00
 8001b80:	40011000 	.word	0x40011000
 8001b84:	40011400 	.word	0x40011400
 8001b88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_GPIO_Init+0x304>)
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	4909      	ldr	r1, [pc, #36]	; (8001bbc <HAL_GPIO_Init+0x304>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f47f ae8e 	bne.w	80018cc <HAL_GPIO_Init+0x14>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	372c      	adds	r7, #44	; 0x2c
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e12b      	b.n	8001e2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fbe8 	bl	80013bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2224      	movs	r2, #36	; 0x24
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c24:	f001 fba0 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 8001c28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a81      	ldr	r2, [pc, #516]	; (8001e34 <HAL_I2C_Init+0x274>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d807      	bhi.n	8001c44 <HAL_I2C_Init+0x84>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a80      	ldr	r2, [pc, #512]	; (8001e38 <HAL_I2C_Init+0x278>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	bf94      	ite	ls
 8001c3c:	2301      	movls	r3, #1
 8001c3e:	2300      	movhi	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e006      	b.n	8001c52 <HAL_I2C_Init+0x92>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a7d      	ldr	r2, [pc, #500]	; (8001e3c <HAL_I2C_Init+0x27c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	bf94      	ite	ls
 8001c4c:	2301      	movls	r3, #1
 8001c4e:	2300      	movhi	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e0e7      	b.n	8001e2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4a78      	ldr	r2, [pc, #480]	; (8001e40 <HAL_I2C_Init+0x280>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0c9b      	lsrs	r3, r3, #18
 8001c64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a6a      	ldr	r2, [pc, #424]	; (8001e34 <HAL_I2C_Init+0x274>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d802      	bhi.n	8001c94 <HAL_I2C_Init+0xd4>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3301      	adds	r3, #1
 8001c92:	e009      	b.n	8001ca8 <HAL_I2C_Init+0xe8>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	4a69      	ldr	r2, [pc, #420]	; (8001e44 <HAL_I2C_Init+0x284>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	430b      	orrs	r3, r1
 8001cae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	495c      	ldr	r1, [pc, #368]	; (8001e34 <HAL_I2C_Init+0x274>)
 8001cc4:	428b      	cmp	r3, r1
 8001cc6:	d819      	bhi.n	8001cfc <HAL_I2C_Init+0x13c>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e59      	subs	r1, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd6:	1c59      	adds	r1, r3, #1
 8001cd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cdc:	400b      	ands	r3, r1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_I2C_Init+0x138>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1e59      	subs	r1, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf6:	e051      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	e04f      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d111      	bne.n	8001d28 <HAL_I2C_Init+0x168>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1e58      	subs	r0, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	440b      	add	r3, r1
 8001d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e012      	b.n	8001d4e <HAL_I2C_Init+0x18e>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1e58      	subs	r0, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	0099      	lsls	r1, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Init+0x196>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e022      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10e      	bne.n	8001d7c <HAL_I2C_Init+0x1bc>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1e58      	subs	r0, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6859      	ldr	r1, [r3, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	440b      	add	r3, r1
 8001d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7a:	e00f      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1e58      	subs	r0, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	0099      	lsls	r1, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	6809      	ldr	r1, [r1, #0]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6911      	ldr	r1, [r2, #16]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68d2      	ldr	r2, [r2, #12]
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	000186a0 	.word	0x000186a0
 8001e38:	001e847f 	.word	0x001e847f
 8001e3c:	003d08ff 	.word	0x003d08ff
 8001e40:	431bde83 	.word	0x431bde83
 8001e44:	10624dd3 	.word	0x10624dd3

08001e48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	817b      	strh	r3, [r7, #10]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	813b      	strh	r3, [r7, #8]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e62:	f7ff fc17 	bl	8001694 <HAL_GetTick>
 8001e66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	f040 80d9 	bne.w	8002028 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2319      	movs	r3, #25
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	496d      	ldr	r1, [pc, #436]	; (8002034 <HAL_I2C_Mem_Write+0x1ec>)
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fcc1 	bl	8002808 <I2C_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e0cc      	b.n	800202a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_I2C_Mem_Write+0x56>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e0c5      	b.n	800202a <HAL_I2C_Mem_Write+0x1e2>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d007      	beq.n	8001ec4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2221      	movs	r2, #33	; 0x21
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2240      	movs	r2, #64	; 0x40
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a3a      	ldr	r2, [r7, #32]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4a4d      	ldr	r2, [pc, #308]	; (8002038 <HAL_I2C_Mem_Write+0x1f0>)
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f06:	88f8      	ldrh	r0, [r7, #6]
 8001f08:	893a      	ldrh	r2, [r7, #8]
 8001f0a:	8979      	ldrh	r1, [r7, #10]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	4603      	mov	r3, r0
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 faf8 	bl	800250c <I2C_RequestMemoryWrite>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d052      	beq.n	8001fc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e081      	b.n	800202a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 fd42 	bl	80029b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00d      	beq.n	8001f52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d107      	bne.n	8001f4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06b      	b.n	800202a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_I2C_Mem_Write+0x180>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d017      	beq.n	8001fc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1aa      	bne.n	8001f26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fd2e 	bl	8002a36 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00d      	beq.n	8001ffc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d107      	bne.n	8001ff8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e016      	b.n	800202a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	e000      	b.n	800202a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	00100002 	.word	0x00100002
 8002038:	ffff0000 	.word	0xffff0000

0800203c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	4608      	mov	r0, r1
 8002046:	4611      	mov	r1, r2
 8002048:	461a      	mov	r2, r3
 800204a:	4603      	mov	r3, r0
 800204c:	817b      	strh	r3, [r7, #10]
 800204e:	460b      	mov	r3, r1
 8002050:	813b      	strh	r3, [r7, #8]
 8002052:	4613      	mov	r3, r2
 8002054:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800205a:	f7ff fb1b 	bl	8001694 <HAL_GetTick>
 800205e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b20      	cmp	r3, #32
 800206a:	f040 8244 	bne.w	80024f6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2319      	movs	r3, #25
 8002074:	2201      	movs	r2, #1
 8002076:	4982      	ldr	r1, [pc, #520]	; (8002280 <HAL_I2C_Mem_Read+0x244>)
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 fbc5 	bl	8002808 <I2C_WaitOnFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002084:	2302      	movs	r3, #2
 8002086:	e237      	b.n	80024f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_I2C_Mem_Read+0x5a>
 8002092:	2302      	movs	r3, #2
 8002094:	e230      	b.n	80024f8 <HAL_I2C_Mem_Read+0x4bc>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d007      	beq.n	80020bc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2222      	movs	r2, #34	; 0x22
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2240      	movs	r2, #64	; 0x40
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80020ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4a62      	ldr	r2, [pc, #392]	; (8002284 <HAL_I2C_Mem_Read+0x248>)
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020fe:	88f8      	ldrh	r0, [r7, #6]
 8002100:	893a      	ldrh	r2, [r7, #8]
 8002102:	8979      	ldrh	r1, [r7, #10]
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	4603      	mov	r3, r0
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa92 	bl	8002638 <I2C_RequestMemoryRead>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e1ec      	b.n	80024f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	2b00      	cmp	r3, #0
 8002124:	d113      	bne.n	800214e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e1c0      	b.n	80024d0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	2b01      	cmp	r3, #1
 8002154:	d11e      	bne.n	8002194 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002164:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002166:	b672      	cpsid	i
}
 8002168:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002190:	b662      	cpsie	i
}
 8002192:	e035      	b.n	8002200 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	2b02      	cmp	r3, #2
 800219a:	d11e      	bne.n	80021da <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021ac:	b672      	cpsid	i
}
 80021ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021d6:	b662      	cpsie	i
}
 80021d8:	e012      	b.n	8002200 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021e8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002200:	e166      	b.n	80024d0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002206:	2b03      	cmp	r3, #3
 8002208:	f200 811f 	bhi.w	800244a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	2b01      	cmp	r3, #1
 8002212:	d123      	bne.n	800225c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fc4d 	bl	8002ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e167      	b.n	80024f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a
 800225a:	e139      	b.n	80024d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	2b02      	cmp	r3, #2
 8002262:	d152      	bne.n	800230a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	2200      	movs	r2, #0
 800226c:	4906      	ldr	r1, [pc, #24]	; (8002288 <HAL_I2C_Mem_Read+0x24c>)
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 faca 	bl	8002808 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e13c      	b.n	80024f8 <HAL_I2C_Mem_Read+0x4bc>
 800227e:	bf00      	nop
 8002280:	00100002 	.word	0x00100002
 8002284:	ffff0000 	.word	0xffff0000
 8002288:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022d2:	b662      	cpsie	i
}
 80022d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002308:	e0e2      	b.n	80024d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002310:	2200      	movs	r2, #0
 8002312:	497b      	ldr	r1, [pc, #492]	; (8002500 <HAL_I2C_Mem_Read+0x4c4>)
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fa77 	bl	8002808 <I2C_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0e9      	b.n	80024f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002332:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002334:	b672      	cpsid	i
}
 8002336:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800236a:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_I2C_Mem_Read+0x4c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	08db      	lsrs	r3, r3, #3
 8002370:	4a65      	ldr	r2, [pc, #404]	; (8002508 <HAL_I2C_Mem_Read+0x4cc>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0a1a      	lsrs	r2, r3, #8
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00da      	lsls	r2, r3, #3
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	3b01      	subs	r3, #1
 8002388:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d118      	bne.n	80023c2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f043 0220 	orr.w	r2, r3, #32
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80023b2:	b662      	cpsie	i
}
 80023b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e09a      	b.n	80024f8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d1d9      	bne.n	8002384 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002412:	b662      	cpsie	i
}
 8002414:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002448:	e042      	b.n	80024d0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fb32 	bl	8002ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e04c      	b.n	80024f8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b04      	cmp	r3, #4
 800249c:	d118      	bne.n	80024d0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f47f ae94 	bne.w	8002202 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
  }
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3728      	adds	r7, #40	; 0x28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	00010004 	.word	0x00010004
 8002504:	20000000 	.word	0x20000000
 8002508:	14f8b589 	.word	0x14f8b589

0800250c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	4608      	mov	r0, r1
 8002516:	4611      	mov	r1, r2
 8002518:	461a      	mov	r2, r3
 800251a:	4603      	mov	r3, r0
 800251c:	817b      	strh	r3, [r7, #10]
 800251e:	460b      	mov	r3, r1
 8002520:	813b      	strh	r3, [r7, #8]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	2200      	movs	r2, #0
 800253e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f960 	bl	8002808 <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00d      	beq.n	800256a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255c:	d103      	bne.n	8002566 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e05f      	b.n	800262a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800256a:	897b      	ldrh	r3, [r7, #10]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	6a3a      	ldr	r2, [r7, #32]
 800257e:	492d      	ldr	r1, [pc, #180]	; (8002634 <I2C_RequestMemoryWrite+0x128>)
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f998 	bl	80028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e04c      	b.n	800262a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	6a39      	ldr	r1, [r7, #32]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fa02 	bl	80029b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d107      	bne.n	80025ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e02b      	b.n	800262a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025d8:	893b      	ldrh	r3, [r7, #8]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	611a      	str	r2, [r3, #16]
 80025e2:	e021      	b.n	8002628 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025e4:	893b      	ldrh	r3, [r7, #8]
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	6a39      	ldr	r1, [r7, #32]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f9dc 	bl	80029b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00d      	beq.n	800261e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b04      	cmp	r3, #4
 8002608:	d107      	bne.n	800261a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e005      	b.n	800262a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800261e:	893b      	ldrh	r3, [r7, #8]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	00010002 	.word	0x00010002

08002638 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	817b      	strh	r3, [r7, #10]
 800264a:	460b      	mov	r3, r1
 800264c:	813b      	strh	r3, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002660:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002670:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	2200      	movs	r2, #0
 800267a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f8c2 	bl	8002808 <I2C_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002698:	d103      	bne.n	80026a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0aa      	b.n	80027fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026a6:	897b      	ldrh	r3, [r7, #10]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	6a3a      	ldr	r2, [r7, #32]
 80026ba:	4952      	ldr	r1, [pc, #328]	; (8002804 <I2C_RequestMemoryRead+0x1cc>)
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f8fa 	bl	80028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e097      	b.n	80027fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e4:	6a39      	ldr	r1, [r7, #32]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f964 	bl	80029b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d107      	bne.n	800270a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002708:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e076      	b.n	80027fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002714:	893b      	ldrh	r3, [r7, #8]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	611a      	str	r2, [r3, #16]
 800271e:	e021      	b.n	8002764 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002720:	893b      	ldrh	r3, [r7, #8]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	b29b      	uxth	r3, r3
 8002726:	b2da      	uxtb	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800272e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002730:	6a39      	ldr	r1, [r7, #32]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f93e 	bl	80029b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00d      	beq.n	800275a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b04      	cmp	r3, #4
 8002744:	d107      	bne.n	8002756 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002754:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e050      	b.n	80027fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800275a:	893b      	ldrh	r3, [r7, #8]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	6a39      	ldr	r1, [r7, #32]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f923 	bl	80029b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00d      	beq.n	8002790 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2b04      	cmp	r3, #4
 800277a:	d107      	bne.n	800278c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e035      	b.n	80027fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800279e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f82b 	bl	8002808 <I2C_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c6:	d103      	bne.n	80027d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e013      	b.n	80027fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027d4:	897b      	ldrh	r3, [r7, #10]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	6a3a      	ldr	r2, [r7, #32]
 80027e8:	4906      	ldr	r1, [pc, #24]	; (8002804 <I2C_RequestMemoryRead+0x1cc>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f863 	bl	80028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	00010002 	.word	0x00010002

08002808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	4613      	mov	r3, r2
 8002816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002818:	e025      	b.n	8002866 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d021      	beq.n	8002866 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002822:	f7fe ff37 	bl	8001694 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d116      	bne.n	8002866 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e023      	b.n	80028ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d10d      	bne.n	800288c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4013      	ands	r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf0c      	ite	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	2300      	movne	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	e00c      	b.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d0b6      	beq.n	800281a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c4:	e051      	b.n	800296a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d4:	d123      	bne.n	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f043 0204 	orr.w	r2, r3, #4
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e046      	b.n	80029ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d021      	beq.n	800296a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7fe feb5 	bl	8001694 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d116      	bne.n	800296a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e020      	b.n	80029ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	0c1b      	lsrs	r3, r3, #16
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d10c      	bne.n	800298e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	e00b      	b.n	80029a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	43da      	mvns	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4013      	ands	r3, r2
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d18d      	bne.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c0:	e02d      	b.n	8002a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f8ce 	bl	8002b64 <I2C_IsAcknowledgeFailed>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e02d      	b.n	8002a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d021      	beq.n	8002a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029da:	f7fe fe5b 	bl	8001694 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d302      	bcc.n	80029f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d116      	bne.n	8002a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0220 	orr.w	r2, r3, #32
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e007      	b.n	8002a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d1ca      	bne.n	80029c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a42:	e02d      	b.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f88d 	bl	8002b64 <I2C_IsAcknowledgeFailed>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e02d      	b.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5a:	d021      	beq.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5c:	f7fe fe1a 	bl	8001694 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d302      	bcc.n	8002a72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d116      	bne.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e007      	b.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d1ca      	bne.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ac4:	e042      	b.n	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d119      	bne.n	8002b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e029      	b.n	8002b5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7fe fdc4 	bl	8001694 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f043 0220 	orr.w	r2, r3, #32
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e007      	b.n	8002b5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b56:	2b40      	cmp	r3, #64	; 0x40
 8002b58:	d1b5      	bne.n	8002ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d11b      	bne.n	8002bb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0204 	orr.w	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e26c      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8087 	beq.w	8002cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be0:	4b92      	ldr	r3, [pc, #584]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d00c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bec:	4b8f      	ldr	r3, [pc, #572]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d112      	bne.n	8002c1e <HAL_RCC_OscConfig+0x5e>
 8002bf8:	4b8c      	ldr	r3, [pc, #560]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d10b      	bne.n	8002c1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c06:	4b89      	ldr	r3, [pc, #548]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d06c      	beq.n	8002cec <HAL_RCC_OscConfig+0x12c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d168      	bne.n	8002cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e246      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x76>
 8002c28:	4b80      	ldr	r3, [pc, #512]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a7f      	ldr	r2, [pc, #508]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	e02e      	b.n	8002c94 <HAL_RCC_OscConfig+0xd4>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x98>
 8002c3e:	4b7b      	ldr	r3, [pc, #492]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7a      	ldr	r2, [pc, #488]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b78      	ldr	r3, [pc, #480]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a77      	ldr	r2, [pc, #476]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e01d      	b.n	8002c94 <HAL_RCC_OscConfig+0xd4>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0xbc>
 8002c62:	4b72      	ldr	r3, [pc, #456]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a71      	ldr	r2, [pc, #452]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a6e      	ldr	r2, [pc, #440]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCC_OscConfig+0xd4>
 8002c7c:	4b6b      	ldr	r3, [pc, #428]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6a      	ldr	r2, [pc, #424]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a67      	ldr	r2, [pc, #412]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fcfa 	bl	8001694 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fcf6 	bl	8001694 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1fa      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b5d      	ldr	r3, [pc, #372]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xe4>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fce6 	bl	8001694 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fe fce2 	bl	8001694 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e1e6      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x10c>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d063      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cfa:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d06:	4b49      	ldr	r3, [pc, #292]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d11c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x18c>
 8002d12:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d116      	bne.n	8002d4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_RCC_OscConfig+0x176>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d001      	beq.n	8002d36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e1ba      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4939      	ldr	r1, [pc, #228]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	e03a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d020      	beq.n	8002d96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d54:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCC_OscConfig+0x270>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7fe fc9b 	bl	8001694 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d62:	f7fe fc97 	bl	8001694 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e19b      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4927      	ldr	r1, [pc, #156]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
 8002d94:	e015      	b.n	8002dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <HAL_RCC_OscConfig+0x270>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fc7a 	bl	8001694 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da4:	f7fe fc76 	bl	8001694 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e17a      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d03a      	beq.n	8002e44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d019      	beq.n	8002e0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd6:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fc5a 	bl	8001694 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fe fc56 	bl	8001694 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e15a      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_RCC_OscConfig+0x26c>)
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f000 fad8 	bl	80033b8 <RCC_Delay>
 8002e08:	e01c      	b.n	8002e44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e10:	f7fe fc40 	bl	8001694 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e16:	e00f      	b.n	8002e38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e18:	f7fe fc3c 	bl	8001694 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d908      	bls.n	8002e38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e140      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	42420000 	.word	0x42420000
 8002e34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	4b9e      	ldr	r3, [pc, #632]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1e9      	bne.n	8002e18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80a6 	beq.w	8002f9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b97      	ldr	r3, [pc, #604]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b94      	ldr	r3, [pc, #592]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4a93      	ldr	r2, [pc, #588]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	61d3      	str	r3, [r2, #28]
 8002e6e:	4b91      	ldr	r3, [pc, #580]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b8e      	ldr	r3, [pc, #568]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8a:	4b8b      	ldr	r3, [pc, #556]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a8a      	ldr	r2, [pc, #552]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe fbfd 	bl	8001694 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe fbf9 	bl	8001694 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b64      	cmp	r3, #100	; 0x64
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0fd      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x312>
 8002ec4:	4b7b      	ldr	r3, [pc, #492]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a7a      	ldr	r2, [pc, #488]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	e02d      	b.n	8002f2e <HAL_RCC_OscConfig+0x36e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x334>
 8002eda:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a75      	ldr	r2, [pc, #468]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	4b73      	ldr	r3, [pc, #460]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a72      	ldr	r2, [pc, #456]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6213      	str	r3, [r2, #32]
 8002ef2:	e01c      	b.n	8002f2e <HAL_RCC_OscConfig+0x36e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0x356>
 8002efc:	4b6d      	ldr	r3, [pc, #436]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a6c      	ldr	r2, [pc, #432]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a69      	ldr	r2, [pc, #420]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	e00b      	b.n	8002f2e <HAL_RCC_OscConfig+0x36e>
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a66      	ldr	r2, [pc, #408]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	6213      	str	r3, [r2, #32]
 8002f22:	4b64      	ldr	r3, [pc, #400]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a63      	ldr	r2, [pc, #396]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d015      	beq.n	8002f62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe fbad 	bl	8001694 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe fba9 	bl	8001694 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0ab      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	4b57      	ldr	r3, [pc, #348]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ee      	beq.n	8002f3e <HAL_RCC_OscConfig+0x37e>
 8002f60:	e014      	b.n	8002f8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7fe fb97 	bl	8001694 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe fb93 	bl	8001694 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e095      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f80:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ee      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b48      	ldr	r3, [pc, #288]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	4a47      	ldr	r2, [pc, #284]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 8081 	beq.w	80030aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa8:	4b42      	ldr	r3, [pc, #264]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d061      	beq.n	8003078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d146      	bne.n	800304a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCC_OscConfig+0x4fc>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fb67 	bl	8001694 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fe fb63 	bl	8001694 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e067      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fdc:	4b35      	ldr	r3, [pc, #212]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f0      	bne.n	8002fca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d108      	bne.n	8003004 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	492d      	ldr	r1, [pc, #180]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a19      	ldr	r1, [r3, #32]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	430b      	orrs	r3, r1
 8003016:	4927      	ldr	r1, [pc, #156]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_RCC_OscConfig+0x4fc>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe fb37 	bl	8001694 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302a:	f7fe fb33 	bl	8001694 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e037      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x46a>
 8003048:	e02f      	b.n	80030aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <HAL_RCC_OscConfig+0x4fc>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fb20 	bl	8001694 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe fb1c 	bl	8001694 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e020      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x498>
 8003076:	e018      	b.n	80030aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e013      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_OscConfig+0x4f4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	429a      	cmp	r2, r3
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40007000 	.word	0x40007000
 80030bc:	42420060 	.word	0x42420060

080030c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0d0      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d910      	bls.n	8003104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b67      	ldr	r3, [pc, #412]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0207 	bic.w	r2, r3, #7
 80030ea:	4965      	ldr	r1, [pc, #404]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b63      	ldr	r3, [pc, #396]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0b8      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800311c:	4b59      	ldr	r3, [pc, #356]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a58      	ldr	r2, [pc, #352]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a52      	ldr	r2, [pc, #328]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800313e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	4b50      	ldr	r3, [pc, #320]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	494d      	ldr	r1, [pc, #308]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d040      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d115      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e073      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06b      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319e:	4b39      	ldr	r3, [pc, #228]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4936      	ldr	r1, [pc, #216]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b0:	f7fe fa70 	bl	8001694 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fe fa6c 	bl	8001694 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e053      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 020c 	and.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d1eb      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b27      	ldr	r3, [pc, #156]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d210      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 0207 	bic.w	r2, r3, #7
 80031f6:	4922      	ldr	r1, [pc, #136]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e032      	b.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800321c:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4916      	ldr	r1, [pc, #88]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	490e      	ldr	r1, [pc, #56]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800324e:	f000 f821 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8003252:	4602      	mov	r2, r0
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	490a      	ldr	r1, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	4a09      	ldr	r2, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1cc>)
 8003268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1d0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe f9ce 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40022000 	.word	0x40022000
 8003284:	40021000 	.word	0x40021000
 8003288:	080040c0 	.word	0x080040c0
 800328c:	20000000 	.word	0x20000000
 8003290:	20000004 	.word	0x20000004

08003294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	b490      	push	{r4, r7}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800329a:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_RCC_GetSysClockFreq+0xb0>)
 800329c:	1d3c      	adds	r4, r7, #4
 800329e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032a4:	f240 2301 	movw	r3, #513	; 0x201
 80032a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x40>
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d003      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x46>
 80032d2:	e02d      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d6:	623b      	str	r3, [r7, #32]
      break;
 80032d8:	e02d      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	0c9b      	lsrs	r3, r3, #18
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032e6:	4413      	add	r3, r2
 80032e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d013      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0c5b      	lsrs	r3, r3, #17
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003306:	4413      	add	r3, r2
 8003308:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800330c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	4a0e      	ldr	r2, [pc, #56]	; (800334c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003312:	fb02 f203 	mul.w	r2, r2, r3
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	e004      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003324:	fb02 f303 	mul.w	r3, r2, r3
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	623b      	str	r3, [r7, #32]
      break;
 800332e:	e002      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003332:	623b      	str	r3, [r7, #32]
      break;
 8003334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003336:	6a3b      	ldr	r3, [r7, #32]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3728      	adds	r7, #40	; 0x28
 800333c:	46bd      	mov	sp, r7
 800333e:	bc90      	pop	{r4, r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	080040b0 	.word	0x080040b0
 8003348:	40021000 	.word	0x40021000
 800334c:	007a1200 	.word	0x007a1200
 8003350:	003d0900 	.word	0x003d0900

08003354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b02      	ldr	r3, [pc, #8]	; (8003364 <HAL_RCC_GetHCLKFreq+0x10>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	20000000 	.word	0x20000000

08003368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800336c:	f7ff fff2 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4903      	ldr	r1, [pc, #12]	; (800338c <HAL_RCC_GetPCLK1Freq+0x24>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	080040d0 	.word	0x080040d0

08003390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003394:	f7ff ffde 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	0adb      	lsrs	r3, r3, #11
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4903      	ldr	r1, [pc, #12]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	080040d0 	.word	0x080040d0

080033b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <RCC_Delay+0x34>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <RCC_Delay+0x38>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	0a5b      	lsrs	r3, r3, #9
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033d4:	bf00      	nop
  }
  while (Delay --);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1e5a      	subs	r2, r3, #1
 80033da:	60fa      	str	r2, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f9      	bne.n	80033d4 <RCC_Delay+0x1c>
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	20000000 	.word	0x20000000
 80033f0:	10624dd3 	.word	0x10624dd3

080033f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e03f      	b.n	8003486 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fe f80c 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003436:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f905 	bl	8003648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800344c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800345c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800346c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08a      	sub	sp, #40	; 0x28
 8003492:	af02      	add	r7, sp, #8
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d17c      	bne.n	80035a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_UART_Transmit+0x2c>
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e075      	b.n	80035aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_UART_Transmit+0x3e>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e06e      	b.n	80035aa <HAL_UART_Transmit+0x11c>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2221      	movs	r2, #33	; 0x21
 80034de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034e2:	f7fe f8d7 	bl	8001694 <HAL_GetTick>
 80034e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fc:	d108      	bne.n	8003510 <HAL_UART_Transmit+0x82>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d104      	bne.n	8003510 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	e003      	b.n	8003518 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003520:	e02a      	b.n	8003578 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f840 	bl	80035b2 <UART_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e036      	b.n	80035aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003550:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	3302      	adds	r3, #2
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e007      	b.n	800356a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	3301      	adds	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1cf      	bne.n	8003522 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2200      	movs	r2, #0
 800358a:	2140      	movs	r1, #64	; 0x40
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f810 	bl	80035b2 <UART_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e006      	b.n	80035aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	4613      	mov	r3, r2
 80035c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c2:	e02c      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d028      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035d2:	f7fe f85f 	bl	8001694 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d21d      	bcs.n	800361e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e00f      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	429a      	cmp	r2, r3
 800363a:	d0c3      	beq.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003682:	f023 030c 	bic.w	r3, r3, #12
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	430b      	orrs	r3, r1
 800368e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2c      	ldr	r2, [pc, #176]	; (800375c <UART_SetConfig+0x114>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d103      	bne.n	80036b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036b0:	f7ff fe6e 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	e002      	b.n	80036be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036b8:	f7ff fe56 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 80036bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009a      	lsls	r2, r3, #2
 80036c8:	441a      	add	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	4a22      	ldr	r2, [pc, #136]	; (8003760 <UART_SetConfig+0x118>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	0119      	lsls	r1, r3, #4
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009a      	lsls	r2, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <UART_SetConfig+0x118>)
 80036f6:	fba3 0302 	umull	r0, r3, r3, r2
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	2064      	movs	r0, #100	; 0x64
 80036fe:	fb00 f303 	mul.w	r3, r0, r3
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	3332      	adds	r3, #50	; 0x32
 8003708:	4a15      	ldr	r2, [pc, #84]	; (8003760 <UART_SetConfig+0x118>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003714:	4419      	add	r1, r3
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	009a      	lsls	r2, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	fbb2 f2f3 	udiv	r2, r2, r3
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <UART_SetConfig+0x118>)
 800372e:	fba3 0302 	umull	r0, r3, r3, r2
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2064      	movs	r0, #100	; 0x64
 8003736:	fb00 f303 	mul.w	r3, r0, r3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	3332      	adds	r3, #50	; 0x32
 8003740:	4a07      	ldr	r2, [pc, #28]	; (8003760 <UART_SetConfig+0x118>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	f003 020f 	and.w	r2, r3, #15
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	440a      	add	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40013800 	.word	0x40013800
 8003760:	51eb851f 	.word	0x51eb851f

08003764 <__errno>:
 8003764:	4b01      	ldr	r3, [pc, #4]	; (800376c <__errno+0x8>)
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	2000000c 	.word	0x2000000c

08003770 <__libc_init_array>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	2600      	movs	r6, #0
 8003774:	4d0c      	ldr	r5, [pc, #48]	; (80037a8 <__libc_init_array+0x38>)
 8003776:	4c0d      	ldr	r4, [pc, #52]	; (80037ac <__libc_init_array+0x3c>)
 8003778:	1b64      	subs	r4, r4, r5
 800377a:	10a4      	asrs	r4, r4, #2
 800377c:	42a6      	cmp	r6, r4
 800377e:	d109      	bne.n	8003794 <__libc_init_array+0x24>
 8003780:	f000 fc5c 	bl	800403c <_init>
 8003784:	2600      	movs	r6, #0
 8003786:	4d0a      	ldr	r5, [pc, #40]	; (80037b0 <__libc_init_array+0x40>)
 8003788:	4c0a      	ldr	r4, [pc, #40]	; (80037b4 <__libc_init_array+0x44>)
 800378a:	1b64      	subs	r4, r4, r5
 800378c:	10a4      	asrs	r4, r4, #2
 800378e:	42a6      	cmp	r6, r4
 8003790:	d105      	bne.n	800379e <__libc_init_array+0x2e>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	f855 3b04 	ldr.w	r3, [r5], #4
 8003798:	4798      	blx	r3
 800379a:	3601      	adds	r6, #1
 800379c:	e7ee      	b.n	800377c <__libc_init_array+0xc>
 800379e:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a2:	4798      	blx	r3
 80037a4:	3601      	adds	r6, #1
 80037a6:	e7f2      	b.n	800378e <__libc_init_array+0x1e>
 80037a8:	0800410c 	.word	0x0800410c
 80037ac:	0800410c 	.word	0x0800410c
 80037b0:	0800410c 	.word	0x0800410c
 80037b4:	08004110 	.word	0x08004110

080037b8 <memcpy>:
 80037b8:	440a      	add	r2, r1
 80037ba:	4291      	cmp	r1, r2
 80037bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80037c0:	d100      	bne.n	80037c4 <memcpy+0xc>
 80037c2:	4770      	bx	lr
 80037c4:	b510      	push	{r4, lr}
 80037c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ca:	4291      	cmp	r1, r2
 80037cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d0:	d1f9      	bne.n	80037c6 <memcpy+0xe>
 80037d2:	bd10      	pop	{r4, pc}

080037d4 <memset>:
 80037d4:	4603      	mov	r3, r0
 80037d6:	4402      	add	r2, r0
 80037d8:	4293      	cmp	r3, r2
 80037da:	d100      	bne.n	80037de <memset+0xa>
 80037dc:	4770      	bx	lr
 80037de:	f803 1b01 	strb.w	r1, [r3], #1
 80037e2:	e7f9      	b.n	80037d8 <memset+0x4>

080037e4 <siprintf>:
 80037e4:	b40e      	push	{r1, r2, r3}
 80037e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037ea:	b500      	push	{lr}
 80037ec:	b09c      	sub	sp, #112	; 0x70
 80037ee:	ab1d      	add	r3, sp, #116	; 0x74
 80037f0:	9002      	str	r0, [sp, #8]
 80037f2:	9006      	str	r0, [sp, #24]
 80037f4:	9107      	str	r1, [sp, #28]
 80037f6:	9104      	str	r1, [sp, #16]
 80037f8:	4808      	ldr	r0, [pc, #32]	; (800381c <siprintf+0x38>)
 80037fa:	4909      	ldr	r1, [pc, #36]	; (8003820 <siprintf+0x3c>)
 80037fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003800:	9105      	str	r1, [sp, #20]
 8003802:	6800      	ldr	r0, [r0, #0]
 8003804:	a902      	add	r1, sp, #8
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	f000 f868 	bl	80038dc <_svfiprintf_r>
 800380c:	2200      	movs	r2, #0
 800380e:	9b02      	ldr	r3, [sp, #8]
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	b01c      	add	sp, #112	; 0x70
 8003814:	f85d eb04 	ldr.w	lr, [sp], #4
 8003818:	b003      	add	sp, #12
 800381a:	4770      	bx	lr
 800381c:	2000000c 	.word	0x2000000c
 8003820:	ffff0208 	.word	0xffff0208

08003824 <__ssputs_r>:
 8003824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003828:	688e      	ldr	r6, [r1, #8]
 800382a:	4682      	mov	sl, r0
 800382c:	429e      	cmp	r6, r3
 800382e:	460c      	mov	r4, r1
 8003830:	4690      	mov	r8, r2
 8003832:	461f      	mov	r7, r3
 8003834:	d838      	bhi.n	80038a8 <__ssputs_r+0x84>
 8003836:	898a      	ldrh	r2, [r1, #12]
 8003838:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800383c:	d032      	beq.n	80038a4 <__ssputs_r+0x80>
 800383e:	6825      	ldr	r5, [r4, #0]
 8003840:	6909      	ldr	r1, [r1, #16]
 8003842:	3301      	adds	r3, #1
 8003844:	eba5 0901 	sub.w	r9, r5, r1
 8003848:	6965      	ldr	r5, [r4, #20]
 800384a:	444b      	add	r3, r9
 800384c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003850:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003854:	106d      	asrs	r5, r5, #1
 8003856:	429d      	cmp	r5, r3
 8003858:	bf38      	it	cc
 800385a:	461d      	movcc	r5, r3
 800385c:	0553      	lsls	r3, r2, #21
 800385e:	d531      	bpl.n	80038c4 <__ssputs_r+0xa0>
 8003860:	4629      	mov	r1, r5
 8003862:	f000 fb45 	bl	8003ef0 <_malloc_r>
 8003866:	4606      	mov	r6, r0
 8003868:	b950      	cbnz	r0, 8003880 <__ssputs_r+0x5c>
 800386a:	230c      	movs	r3, #12
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f8ca 3000 	str.w	r3, [sl]
 8003874:	89a3      	ldrh	r3, [r4, #12]
 8003876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800387a:	81a3      	strh	r3, [r4, #12]
 800387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003880:	464a      	mov	r2, r9
 8003882:	6921      	ldr	r1, [r4, #16]
 8003884:	f7ff ff98 	bl	80037b8 <memcpy>
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800388e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003892:	81a3      	strh	r3, [r4, #12]
 8003894:	6126      	str	r6, [r4, #16]
 8003896:	444e      	add	r6, r9
 8003898:	6026      	str	r6, [r4, #0]
 800389a:	463e      	mov	r6, r7
 800389c:	6165      	str	r5, [r4, #20]
 800389e:	eba5 0509 	sub.w	r5, r5, r9
 80038a2:	60a5      	str	r5, [r4, #8]
 80038a4:	42be      	cmp	r6, r7
 80038a6:	d900      	bls.n	80038aa <__ssputs_r+0x86>
 80038a8:	463e      	mov	r6, r7
 80038aa:	4632      	mov	r2, r6
 80038ac:	4641      	mov	r1, r8
 80038ae:	6820      	ldr	r0, [r4, #0]
 80038b0:	f000 fab8 	bl	8003e24 <memmove>
 80038b4:	68a3      	ldr	r3, [r4, #8]
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	1b9b      	subs	r3, r3, r6
 80038ba:	4432      	add	r2, r6
 80038bc:	2000      	movs	r0, #0
 80038be:	60a3      	str	r3, [r4, #8]
 80038c0:	6022      	str	r2, [r4, #0]
 80038c2:	e7db      	b.n	800387c <__ssputs_r+0x58>
 80038c4:	462a      	mov	r2, r5
 80038c6:	f000 fb6d 	bl	8003fa4 <_realloc_r>
 80038ca:	4606      	mov	r6, r0
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d1e1      	bne.n	8003894 <__ssputs_r+0x70>
 80038d0:	4650      	mov	r0, sl
 80038d2:	6921      	ldr	r1, [r4, #16]
 80038d4:	f000 fac0 	bl	8003e58 <_free_r>
 80038d8:	e7c7      	b.n	800386a <__ssputs_r+0x46>
	...

080038dc <_svfiprintf_r>:
 80038dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	4698      	mov	r8, r3
 80038e2:	898b      	ldrh	r3, [r1, #12]
 80038e4:	4607      	mov	r7, r0
 80038e6:	061b      	lsls	r3, r3, #24
 80038e8:	460d      	mov	r5, r1
 80038ea:	4614      	mov	r4, r2
 80038ec:	b09d      	sub	sp, #116	; 0x74
 80038ee:	d50e      	bpl.n	800390e <_svfiprintf_r+0x32>
 80038f0:	690b      	ldr	r3, [r1, #16]
 80038f2:	b963      	cbnz	r3, 800390e <_svfiprintf_r+0x32>
 80038f4:	2140      	movs	r1, #64	; 0x40
 80038f6:	f000 fafb 	bl	8003ef0 <_malloc_r>
 80038fa:	6028      	str	r0, [r5, #0]
 80038fc:	6128      	str	r0, [r5, #16]
 80038fe:	b920      	cbnz	r0, 800390a <_svfiprintf_r+0x2e>
 8003900:	230c      	movs	r3, #12
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	e0d1      	b.n	8003aae <_svfiprintf_r+0x1d2>
 800390a:	2340      	movs	r3, #64	; 0x40
 800390c:	616b      	str	r3, [r5, #20]
 800390e:	2300      	movs	r3, #0
 8003910:	9309      	str	r3, [sp, #36]	; 0x24
 8003912:	2320      	movs	r3, #32
 8003914:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003918:	2330      	movs	r3, #48	; 0x30
 800391a:	f04f 0901 	mov.w	r9, #1
 800391e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003922:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ac8 <_svfiprintf_r+0x1ec>
 8003926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800392a:	4623      	mov	r3, r4
 800392c:	469a      	mov	sl, r3
 800392e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003932:	b10a      	cbz	r2, 8003938 <_svfiprintf_r+0x5c>
 8003934:	2a25      	cmp	r2, #37	; 0x25
 8003936:	d1f9      	bne.n	800392c <_svfiprintf_r+0x50>
 8003938:	ebba 0b04 	subs.w	fp, sl, r4
 800393c:	d00b      	beq.n	8003956 <_svfiprintf_r+0x7a>
 800393e:	465b      	mov	r3, fp
 8003940:	4622      	mov	r2, r4
 8003942:	4629      	mov	r1, r5
 8003944:	4638      	mov	r0, r7
 8003946:	f7ff ff6d 	bl	8003824 <__ssputs_r>
 800394a:	3001      	adds	r0, #1
 800394c:	f000 80aa 	beq.w	8003aa4 <_svfiprintf_r+0x1c8>
 8003950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003952:	445a      	add	r2, fp
 8003954:	9209      	str	r2, [sp, #36]	; 0x24
 8003956:	f89a 3000 	ldrb.w	r3, [sl]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80a2 	beq.w	8003aa4 <_svfiprintf_r+0x1c8>
 8003960:	2300      	movs	r3, #0
 8003962:	f04f 32ff 	mov.w	r2, #4294967295
 8003966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800396a:	f10a 0a01 	add.w	sl, sl, #1
 800396e:	9304      	str	r3, [sp, #16]
 8003970:	9307      	str	r3, [sp, #28]
 8003972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003976:	931a      	str	r3, [sp, #104]	; 0x68
 8003978:	4654      	mov	r4, sl
 800397a:	2205      	movs	r2, #5
 800397c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003980:	4851      	ldr	r0, [pc, #324]	; (8003ac8 <_svfiprintf_r+0x1ec>)
 8003982:	f000 fa41 	bl	8003e08 <memchr>
 8003986:	9a04      	ldr	r2, [sp, #16]
 8003988:	b9d8      	cbnz	r0, 80039c2 <_svfiprintf_r+0xe6>
 800398a:	06d0      	lsls	r0, r2, #27
 800398c:	bf44      	itt	mi
 800398e:	2320      	movmi	r3, #32
 8003990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003994:	0711      	lsls	r1, r2, #28
 8003996:	bf44      	itt	mi
 8003998:	232b      	movmi	r3, #43	; 0x2b
 800399a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800399e:	f89a 3000 	ldrb.w	r3, [sl]
 80039a2:	2b2a      	cmp	r3, #42	; 0x2a
 80039a4:	d015      	beq.n	80039d2 <_svfiprintf_r+0xf6>
 80039a6:	4654      	mov	r4, sl
 80039a8:	2000      	movs	r0, #0
 80039aa:	f04f 0c0a 	mov.w	ip, #10
 80039ae:	9a07      	ldr	r2, [sp, #28]
 80039b0:	4621      	mov	r1, r4
 80039b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039b6:	3b30      	subs	r3, #48	; 0x30
 80039b8:	2b09      	cmp	r3, #9
 80039ba:	d94e      	bls.n	8003a5a <_svfiprintf_r+0x17e>
 80039bc:	b1b0      	cbz	r0, 80039ec <_svfiprintf_r+0x110>
 80039be:	9207      	str	r2, [sp, #28]
 80039c0:	e014      	b.n	80039ec <_svfiprintf_r+0x110>
 80039c2:	eba0 0308 	sub.w	r3, r0, r8
 80039c6:	fa09 f303 	lsl.w	r3, r9, r3
 80039ca:	4313      	orrs	r3, r2
 80039cc:	46a2      	mov	sl, r4
 80039ce:	9304      	str	r3, [sp, #16]
 80039d0:	e7d2      	b.n	8003978 <_svfiprintf_r+0x9c>
 80039d2:	9b03      	ldr	r3, [sp, #12]
 80039d4:	1d19      	adds	r1, r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	9103      	str	r1, [sp, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bfbb      	ittet	lt
 80039de:	425b      	neglt	r3, r3
 80039e0:	f042 0202 	orrlt.w	r2, r2, #2
 80039e4:	9307      	strge	r3, [sp, #28]
 80039e6:	9307      	strlt	r3, [sp, #28]
 80039e8:	bfb8      	it	lt
 80039ea:	9204      	strlt	r2, [sp, #16]
 80039ec:	7823      	ldrb	r3, [r4, #0]
 80039ee:	2b2e      	cmp	r3, #46	; 0x2e
 80039f0:	d10c      	bne.n	8003a0c <_svfiprintf_r+0x130>
 80039f2:	7863      	ldrb	r3, [r4, #1]
 80039f4:	2b2a      	cmp	r3, #42	; 0x2a
 80039f6:	d135      	bne.n	8003a64 <_svfiprintf_r+0x188>
 80039f8:	9b03      	ldr	r3, [sp, #12]
 80039fa:	3402      	adds	r4, #2
 80039fc:	1d1a      	adds	r2, r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	9203      	str	r2, [sp, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfb8      	it	lt
 8003a06:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a0a:	9305      	str	r3, [sp, #20]
 8003a0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ad8 <_svfiprintf_r+0x1fc>
 8003a10:	2203      	movs	r2, #3
 8003a12:	4650      	mov	r0, sl
 8003a14:	7821      	ldrb	r1, [r4, #0]
 8003a16:	f000 f9f7 	bl	8003e08 <memchr>
 8003a1a:	b140      	cbz	r0, 8003a2e <_svfiprintf_r+0x152>
 8003a1c:	2340      	movs	r3, #64	; 0x40
 8003a1e:	eba0 000a 	sub.w	r0, r0, sl
 8003a22:	fa03 f000 	lsl.w	r0, r3, r0
 8003a26:	9b04      	ldr	r3, [sp, #16]
 8003a28:	3401      	adds	r4, #1
 8003a2a:	4303      	orrs	r3, r0
 8003a2c:	9304      	str	r3, [sp, #16]
 8003a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a32:	2206      	movs	r2, #6
 8003a34:	4825      	ldr	r0, [pc, #148]	; (8003acc <_svfiprintf_r+0x1f0>)
 8003a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a3a:	f000 f9e5 	bl	8003e08 <memchr>
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d038      	beq.n	8003ab4 <_svfiprintf_r+0x1d8>
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <_svfiprintf_r+0x1f4>)
 8003a44:	bb1b      	cbnz	r3, 8003a8e <_svfiprintf_r+0x1b2>
 8003a46:	9b03      	ldr	r3, [sp, #12]
 8003a48:	3307      	adds	r3, #7
 8003a4a:	f023 0307 	bic.w	r3, r3, #7
 8003a4e:	3308      	adds	r3, #8
 8003a50:	9303      	str	r3, [sp, #12]
 8003a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a54:	4433      	add	r3, r6
 8003a56:	9309      	str	r3, [sp, #36]	; 0x24
 8003a58:	e767      	b.n	800392a <_svfiprintf_r+0x4e>
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a62:	e7a5      	b.n	80039b0 <_svfiprintf_r+0xd4>
 8003a64:	2300      	movs	r3, #0
 8003a66:	f04f 0c0a 	mov.w	ip, #10
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	3401      	adds	r4, #1
 8003a6e:	9305      	str	r3, [sp, #20]
 8003a70:	4620      	mov	r0, r4
 8003a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a76:	3a30      	subs	r2, #48	; 0x30
 8003a78:	2a09      	cmp	r2, #9
 8003a7a:	d903      	bls.n	8003a84 <_svfiprintf_r+0x1a8>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0c5      	beq.n	8003a0c <_svfiprintf_r+0x130>
 8003a80:	9105      	str	r1, [sp, #20]
 8003a82:	e7c3      	b.n	8003a0c <_svfiprintf_r+0x130>
 8003a84:	4604      	mov	r4, r0
 8003a86:	2301      	movs	r3, #1
 8003a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a8c:	e7f0      	b.n	8003a70 <_svfiprintf_r+0x194>
 8003a8e:	ab03      	add	r3, sp, #12
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	462a      	mov	r2, r5
 8003a94:	4638      	mov	r0, r7
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <_svfiprintf_r+0x1f8>)
 8003a98:	a904      	add	r1, sp, #16
 8003a9a:	f3af 8000 	nop.w
 8003a9e:	1c42      	adds	r2, r0, #1
 8003aa0:	4606      	mov	r6, r0
 8003aa2:	d1d6      	bne.n	8003a52 <_svfiprintf_r+0x176>
 8003aa4:	89ab      	ldrh	r3, [r5, #12]
 8003aa6:	065b      	lsls	r3, r3, #25
 8003aa8:	f53f af2c 	bmi.w	8003904 <_svfiprintf_r+0x28>
 8003aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aae:	b01d      	add	sp, #116	; 0x74
 8003ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab4:	ab03      	add	r3, sp, #12
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	462a      	mov	r2, r5
 8003aba:	4638      	mov	r0, r7
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <_svfiprintf_r+0x1f8>)
 8003abe:	a904      	add	r1, sp, #16
 8003ac0:	f000 f87c 	bl	8003bbc <_printf_i>
 8003ac4:	e7eb      	b.n	8003a9e <_svfiprintf_r+0x1c2>
 8003ac6:	bf00      	nop
 8003ac8:	080040d8 	.word	0x080040d8
 8003acc:	080040e2 	.word	0x080040e2
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	08003825 	.word	0x08003825
 8003ad8:	080040de 	.word	0x080040de

08003adc <_printf_common>:
 8003adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae0:	4616      	mov	r6, r2
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	688a      	ldr	r2, [r1, #8]
 8003ae6:	690b      	ldr	r3, [r1, #16]
 8003ae8:	4607      	mov	r7, r0
 8003aea:	4293      	cmp	r3, r2
 8003aec:	bfb8      	it	lt
 8003aee:	4613      	movlt	r3, r2
 8003af0:	6033      	str	r3, [r6, #0]
 8003af2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003af6:	460c      	mov	r4, r1
 8003af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003afc:	b10a      	cbz	r2, 8003b02 <_printf_common+0x26>
 8003afe:	3301      	adds	r3, #1
 8003b00:	6033      	str	r3, [r6, #0]
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	0699      	lsls	r1, r3, #26
 8003b06:	bf42      	ittt	mi
 8003b08:	6833      	ldrmi	r3, [r6, #0]
 8003b0a:	3302      	addmi	r3, #2
 8003b0c:	6033      	strmi	r3, [r6, #0]
 8003b0e:	6825      	ldr	r5, [r4, #0]
 8003b10:	f015 0506 	ands.w	r5, r5, #6
 8003b14:	d106      	bne.n	8003b24 <_printf_common+0x48>
 8003b16:	f104 0a19 	add.w	sl, r4, #25
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	6832      	ldr	r2, [r6, #0]
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	42ab      	cmp	r3, r5
 8003b22:	dc28      	bgt.n	8003b76 <_printf_common+0x9a>
 8003b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b28:	1e13      	subs	r3, r2, #0
 8003b2a:	6822      	ldr	r2, [r4, #0]
 8003b2c:	bf18      	it	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	0692      	lsls	r2, r2, #26
 8003b32:	d42d      	bmi.n	8003b90 <_printf_common+0xb4>
 8003b34:	4649      	mov	r1, r9
 8003b36:	4638      	mov	r0, r7
 8003b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b3c:	47c0      	blx	r8
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d020      	beq.n	8003b84 <_printf_common+0xa8>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	68e5      	ldr	r5, [r4, #12]
 8003b46:	f003 0306 	and.w	r3, r3, #6
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	bf18      	it	ne
 8003b4e:	2500      	movne	r5, #0
 8003b50:	6832      	ldr	r2, [r6, #0]
 8003b52:	f04f 0600 	mov.w	r6, #0
 8003b56:	68a3      	ldr	r3, [r4, #8]
 8003b58:	bf08      	it	eq
 8003b5a:	1aad      	subeq	r5, r5, r2
 8003b5c:	6922      	ldr	r2, [r4, #16]
 8003b5e:	bf08      	it	eq
 8003b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b64:	4293      	cmp	r3, r2
 8003b66:	bfc4      	itt	gt
 8003b68:	1a9b      	subgt	r3, r3, r2
 8003b6a:	18ed      	addgt	r5, r5, r3
 8003b6c:	341a      	adds	r4, #26
 8003b6e:	42b5      	cmp	r5, r6
 8003b70:	d11a      	bne.n	8003ba8 <_printf_common+0xcc>
 8003b72:	2000      	movs	r0, #0
 8003b74:	e008      	b.n	8003b88 <_printf_common+0xac>
 8003b76:	2301      	movs	r3, #1
 8003b78:	4652      	mov	r2, sl
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	47c0      	blx	r8
 8003b80:	3001      	adds	r0, #1
 8003b82:	d103      	bne.n	8003b8c <_printf_common+0xb0>
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8c:	3501      	adds	r5, #1
 8003b8e:	e7c4      	b.n	8003b1a <_printf_common+0x3e>
 8003b90:	2030      	movs	r0, #48	; 0x30
 8003b92:	18e1      	adds	r1, r4, r3
 8003b94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b9e:	4422      	add	r2, r4
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba6:	e7c5      	b.n	8003b34 <_printf_common+0x58>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	4622      	mov	r2, r4
 8003bac:	4649      	mov	r1, r9
 8003bae:	4638      	mov	r0, r7
 8003bb0:	47c0      	blx	r8
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d0e6      	beq.n	8003b84 <_printf_common+0xa8>
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	e7d9      	b.n	8003b6e <_printf_common+0x92>
	...

08003bbc <_printf_i>:
 8003bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	7e27      	ldrb	r7, [r4, #24]
 8003bc4:	4691      	mov	r9, r2
 8003bc6:	2f78      	cmp	r7, #120	; 0x78
 8003bc8:	4680      	mov	r8, r0
 8003bca:	469a      	mov	sl, r3
 8003bcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003bce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bd2:	d807      	bhi.n	8003be4 <_printf_i+0x28>
 8003bd4:	2f62      	cmp	r7, #98	; 0x62
 8003bd6:	d80a      	bhi.n	8003bee <_printf_i+0x32>
 8003bd8:	2f00      	cmp	r7, #0
 8003bda:	f000 80d9 	beq.w	8003d90 <_printf_i+0x1d4>
 8003bde:	2f58      	cmp	r7, #88	; 0x58
 8003be0:	f000 80a4 	beq.w	8003d2c <_printf_i+0x170>
 8003be4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bec:	e03a      	b.n	8003c64 <_printf_i+0xa8>
 8003bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bf2:	2b15      	cmp	r3, #21
 8003bf4:	d8f6      	bhi.n	8003be4 <_printf_i+0x28>
 8003bf6:	a001      	add	r0, pc, #4	; (adr r0, 8003bfc <_printf_i+0x40>)
 8003bf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003bfc:	08003c55 	.word	0x08003c55
 8003c00:	08003c69 	.word	0x08003c69
 8003c04:	08003be5 	.word	0x08003be5
 8003c08:	08003be5 	.word	0x08003be5
 8003c0c:	08003be5 	.word	0x08003be5
 8003c10:	08003be5 	.word	0x08003be5
 8003c14:	08003c69 	.word	0x08003c69
 8003c18:	08003be5 	.word	0x08003be5
 8003c1c:	08003be5 	.word	0x08003be5
 8003c20:	08003be5 	.word	0x08003be5
 8003c24:	08003be5 	.word	0x08003be5
 8003c28:	08003d77 	.word	0x08003d77
 8003c2c:	08003c99 	.word	0x08003c99
 8003c30:	08003d59 	.word	0x08003d59
 8003c34:	08003be5 	.word	0x08003be5
 8003c38:	08003be5 	.word	0x08003be5
 8003c3c:	08003d99 	.word	0x08003d99
 8003c40:	08003be5 	.word	0x08003be5
 8003c44:	08003c99 	.word	0x08003c99
 8003c48:	08003be5 	.word	0x08003be5
 8003c4c:	08003be5 	.word	0x08003be5
 8003c50:	08003d61 	.word	0x08003d61
 8003c54:	680b      	ldr	r3, [r1, #0]
 8003c56:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	600a      	str	r2, [r1, #0]
 8003c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0a4      	b.n	8003db2 <_printf_i+0x1f6>
 8003c68:	6825      	ldr	r5, [r4, #0]
 8003c6a:	6808      	ldr	r0, [r1, #0]
 8003c6c:	062e      	lsls	r6, r5, #24
 8003c6e:	f100 0304 	add.w	r3, r0, #4
 8003c72:	d50a      	bpl.n	8003c8a <_printf_i+0xce>
 8003c74:	6805      	ldr	r5, [r0, #0]
 8003c76:	600b      	str	r3, [r1, #0]
 8003c78:	2d00      	cmp	r5, #0
 8003c7a:	da03      	bge.n	8003c84 <_printf_i+0xc8>
 8003c7c:	232d      	movs	r3, #45	; 0x2d
 8003c7e:	426d      	negs	r5, r5
 8003c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c84:	230a      	movs	r3, #10
 8003c86:	485e      	ldr	r0, [pc, #376]	; (8003e00 <_printf_i+0x244>)
 8003c88:	e019      	b.n	8003cbe <_printf_i+0x102>
 8003c8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c8e:	6805      	ldr	r5, [r0, #0]
 8003c90:	600b      	str	r3, [r1, #0]
 8003c92:	bf18      	it	ne
 8003c94:	b22d      	sxthne	r5, r5
 8003c96:	e7ef      	b.n	8003c78 <_printf_i+0xbc>
 8003c98:	680b      	ldr	r3, [r1, #0]
 8003c9a:	6825      	ldr	r5, [r4, #0]
 8003c9c:	1d18      	adds	r0, r3, #4
 8003c9e:	6008      	str	r0, [r1, #0]
 8003ca0:	0628      	lsls	r0, r5, #24
 8003ca2:	d501      	bpl.n	8003ca8 <_printf_i+0xec>
 8003ca4:	681d      	ldr	r5, [r3, #0]
 8003ca6:	e002      	b.n	8003cae <_printf_i+0xf2>
 8003ca8:	0669      	lsls	r1, r5, #25
 8003caa:	d5fb      	bpl.n	8003ca4 <_printf_i+0xe8>
 8003cac:	881d      	ldrh	r5, [r3, #0]
 8003cae:	2f6f      	cmp	r7, #111	; 0x6f
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2308      	moveq	r3, #8
 8003cb4:	230a      	movne	r3, #10
 8003cb6:	4852      	ldr	r0, [pc, #328]	; (8003e00 <_printf_i+0x244>)
 8003cb8:	2100      	movs	r1, #0
 8003cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cbe:	6866      	ldr	r6, [r4, #4]
 8003cc0:	2e00      	cmp	r6, #0
 8003cc2:	bfa8      	it	ge
 8003cc4:	6821      	ldrge	r1, [r4, #0]
 8003cc6:	60a6      	str	r6, [r4, #8]
 8003cc8:	bfa4      	itt	ge
 8003cca:	f021 0104 	bicge.w	r1, r1, #4
 8003cce:	6021      	strge	r1, [r4, #0]
 8003cd0:	b90d      	cbnz	r5, 8003cd6 <_printf_i+0x11a>
 8003cd2:	2e00      	cmp	r6, #0
 8003cd4:	d04d      	beq.n	8003d72 <_printf_i+0x1b6>
 8003cd6:	4616      	mov	r6, r2
 8003cd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cdc:	fb03 5711 	mls	r7, r3, r1, r5
 8003ce0:	5dc7      	ldrb	r7, [r0, r7]
 8003ce2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ce6:	462f      	mov	r7, r5
 8003ce8:	42bb      	cmp	r3, r7
 8003cea:	460d      	mov	r5, r1
 8003cec:	d9f4      	bls.n	8003cd8 <_printf_i+0x11c>
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d10b      	bne.n	8003d0a <_printf_i+0x14e>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	07df      	lsls	r7, r3, #31
 8003cf6:	d508      	bpl.n	8003d0a <_printf_i+0x14e>
 8003cf8:	6923      	ldr	r3, [r4, #16]
 8003cfa:	6861      	ldr	r1, [r4, #4]
 8003cfc:	4299      	cmp	r1, r3
 8003cfe:	bfde      	ittt	le
 8003d00:	2330      	movle	r3, #48	; 0x30
 8003d02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d0a:	1b92      	subs	r2, r2, r6
 8003d0c:	6122      	str	r2, [r4, #16]
 8003d0e:	464b      	mov	r3, r9
 8003d10:	4621      	mov	r1, r4
 8003d12:	4640      	mov	r0, r8
 8003d14:	f8cd a000 	str.w	sl, [sp]
 8003d18:	aa03      	add	r2, sp, #12
 8003d1a:	f7ff fedf 	bl	8003adc <_printf_common>
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d14c      	bne.n	8003dbc <_printf_i+0x200>
 8003d22:	f04f 30ff 	mov.w	r0, #4294967295
 8003d26:	b004      	add	sp, #16
 8003d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2c:	4834      	ldr	r0, [pc, #208]	; (8003e00 <_printf_i+0x244>)
 8003d2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d32:	680e      	ldr	r6, [r1, #0]
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d3a:	061f      	lsls	r7, r3, #24
 8003d3c:	600e      	str	r6, [r1, #0]
 8003d3e:	d514      	bpl.n	8003d6a <_printf_i+0x1ae>
 8003d40:	07d9      	lsls	r1, r3, #31
 8003d42:	bf44      	itt	mi
 8003d44:	f043 0320 	orrmi.w	r3, r3, #32
 8003d48:	6023      	strmi	r3, [r4, #0]
 8003d4a:	b91d      	cbnz	r5, 8003d54 <_printf_i+0x198>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	f023 0320 	bic.w	r3, r3, #32
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	2310      	movs	r3, #16
 8003d56:	e7af      	b.n	8003cb8 <_printf_i+0xfc>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	f043 0320 	orr.w	r3, r3, #32
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	2378      	movs	r3, #120	; 0x78
 8003d62:	4828      	ldr	r0, [pc, #160]	; (8003e04 <_printf_i+0x248>)
 8003d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d68:	e7e3      	b.n	8003d32 <_printf_i+0x176>
 8003d6a:	065e      	lsls	r6, r3, #25
 8003d6c:	bf48      	it	mi
 8003d6e:	b2ad      	uxthmi	r5, r5
 8003d70:	e7e6      	b.n	8003d40 <_printf_i+0x184>
 8003d72:	4616      	mov	r6, r2
 8003d74:	e7bb      	b.n	8003cee <_printf_i+0x132>
 8003d76:	680b      	ldr	r3, [r1, #0]
 8003d78:	6826      	ldr	r6, [r4, #0]
 8003d7a:	1d1d      	adds	r5, r3, #4
 8003d7c:	6960      	ldr	r0, [r4, #20]
 8003d7e:	600d      	str	r5, [r1, #0]
 8003d80:	0635      	lsls	r5, r6, #24
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	d501      	bpl.n	8003d8a <_printf_i+0x1ce>
 8003d86:	6018      	str	r0, [r3, #0]
 8003d88:	e002      	b.n	8003d90 <_printf_i+0x1d4>
 8003d8a:	0671      	lsls	r1, r6, #25
 8003d8c:	d5fb      	bpl.n	8003d86 <_printf_i+0x1ca>
 8003d8e:	8018      	strh	r0, [r3, #0]
 8003d90:	2300      	movs	r3, #0
 8003d92:	4616      	mov	r6, r2
 8003d94:	6123      	str	r3, [r4, #16]
 8003d96:	e7ba      	b.n	8003d0e <_printf_i+0x152>
 8003d98:	680b      	ldr	r3, [r1, #0]
 8003d9a:	1d1a      	adds	r2, r3, #4
 8003d9c:	600a      	str	r2, [r1, #0]
 8003d9e:	681e      	ldr	r6, [r3, #0]
 8003da0:	2100      	movs	r1, #0
 8003da2:	4630      	mov	r0, r6
 8003da4:	6862      	ldr	r2, [r4, #4]
 8003da6:	f000 f82f 	bl	8003e08 <memchr>
 8003daa:	b108      	cbz	r0, 8003db0 <_printf_i+0x1f4>
 8003dac:	1b80      	subs	r0, r0, r6
 8003dae:	6060      	str	r0, [r4, #4]
 8003db0:	6863      	ldr	r3, [r4, #4]
 8003db2:	6123      	str	r3, [r4, #16]
 8003db4:	2300      	movs	r3, #0
 8003db6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dba:	e7a8      	b.n	8003d0e <_printf_i+0x152>
 8003dbc:	4632      	mov	r2, r6
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	6923      	ldr	r3, [r4, #16]
 8003dc4:	47d0      	blx	sl
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d0ab      	beq.n	8003d22 <_printf_i+0x166>
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	079b      	lsls	r3, r3, #30
 8003dce:	d413      	bmi.n	8003df8 <_printf_i+0x23c>
 8003dd0:	68e0      	ldr	r0, [r4, #12]
 8003dd2:	9b03      	ldr	r3, [sp, #12]
 8003dd4:	4298      	cmp	r0, r3
 8003dd6:	bfb8      	it	lt
 8003dd8:	4618      	movlt	r0, r3
 8003dda:	e7a4      	b.n	8003d26 <_printf_i+0x16a>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	4632      	mov	r2, r6
 8003de0:	4649      	mov	r1, r9
 8003de2:	4640      	mov	r0, r8
 8003de4:	47d0      	blx	sl
 8003de6:	3001      	adds	r0, #1
 8003de8:	d09b      	beq.n	8003d22 <_printf_i+0x166>
 8003dea:	3501      	adds	r5, #1
 8003dec:	68e3      	ldr	r3, [r4, #12]
 8003dee:	9903      	ldr	r1, [sp, #12]
 8003df0:	1a5b      	subs	r3, r3, r1
 8003df2:	42ab      	cmp	r3, r5
 8003df4:	dcf2      	bgt.n	8003ddc <_printf_i+0x220>
 8003df6:	e7eb      	b.n	8003dd0 <_printf_i+0x214>
 8003df8:	2500      	movs	r5, #0
 8003dfa:	f104 0619 	add.w	r6, r4, #25
 8003dfe:	e7f5      	b.n	8003dec <_printf_i+0x230>
 8003e00:	080040e9 	.word	0x080040e9
 8003e04:	080040fa 	.word	0x080040fa

08003e08 <memchr>:
 8003e08:	4603      	mov	r3, r0
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	b2c9      	uxtb	r1, r1
 8003e0e:	4402      	add	r2, r0
 8003e10:	4293      	cmp	r3, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	d101      	bne.n	8003e1a <memchr+0x12>
 8003e16:	2000      	movs	r0, #0
 8003e18:	e003      	b.n	8003e22 <memchr+0x1a>
 8003e1a:	7804      	ldrb	r4, [r0, #0]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	428c      	cmp	r4, r1
 8003e20:	d1f6      	bne.n	8003e10 <memchr+0x8>
 8003e22:	bd10      	pop	{r4, pc}

08003e24 <memmove>:
 8003e24:	4288      	cmp	r0, r1
 8003e26:	b510      	push	{r4, lr}
 8003e28:	eb01 0402 	add.w	r4, r1, r2
 8003e2c:	d902      	bls.n	8003e34 <memmove+0x10>
 8003e2e:	4284      	cmp	r4, r0
 8003e30:	4623      	mov	r3, r4
 8003e32:	d807      	bhi.n	8003e44 <memmove+0x20>
 8003e34:	1e43      	subs	r3, r0, #1
 8003e36:	42a1      	cmp	r1, r4
 8003e38:	d008      	beq.n	8003e4c <memmove+0x28>
 8003e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e42:	e7f8      	b.n	8003e36 <memmove+0x12>
 8003e44:	4601      	mov	r1, r0
 8003e46:	4402      	add	r2, r0
 8003e48:	428a      	cmp	r2, r1
 8003e4a:	d100      	bne.n	8003e4e <memmove+0x2a>
 8003e4c:	bd10      	pop	{r4, pc}
 8003e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e56:	e7f7      	b.n	8003e48 <memmove+0x24>

08003e58 <_free_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d043      	beq.n	8003ee8 <_free_r+0x90>
 8003e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e64:	1f0c      	subs	r4, r1, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfb8      	it	lt
 8003e6a:	18e4      	addlt	r4, r4, r3
 8003e6c:	f000 f8d0 	bl	8004010 <__malloc_lock>
 8003e70:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <_free_r+0x94>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	4610      	mov	r0, r2
 8003e76:	b933      	cbnz	r3, 8003e86 <_free_r+0x2e>
 8003e78:	6063      	str	r3, [r4, #4]
 8003e7a:	6014      	str	r4, [r2, #0]
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e82:	f000 b8cb 	b.w	800401c <__malloc_unlock>
 8003e86:	42a3      	cmp	r3, r4
 8003e88:	d90a      	bls.n	8003ea0 <_free_r+0x48>
 8003e8a:	6821      	ldr	r1, [r4, #0]
 8003e8c:	1862      	adds	r2, r4, r1
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	bf01      	itttt	eq
 8003e92:	681a      	ldreq	r2, [r3, #0]
 8003e94:	685b      	ldreq	r3, [r3, #4]
 8003e96:	1852      	addeq	r2, r2, r1
 8003e98:	6022      	streq	r2, [r4, #0]
 8003e9a:	6063      	str	r3, [r4, #4]
 8003e9c:	6004      	str	r4, [r0, #0]
 8003e9e:	e7ed      	b.n	8003e7c <_free_r+0x24>
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	b10b      	cbz	r3, 8003eaa <_free_r+0x52>
 8003ea6:	42a3      	cmp	r3, r4
 8003ea8:	d9fa      	bls.n	8003ea0 <_free_r+0x48>
 8003eaa:	6811      	ldr	r1, [r2, #0]
 8003eac:	1850      	adds	r0, r2, r1
 8003eae:	42a0      	cmp	r0, r4
 8003eb0:	d10b      	bne.n	8003eca <_free_r+0x72>
 8003eb2:	6820      	ldr	r0, [r4, #0]
 8003eb4:	4401      	add	r1, r0
 8003eb6:	1850      	adds	r0, r2, r1
 8003eb8:	4283      	cmp	r3, r0
 8003eba:	6011      	str	r1, [r2, #0]
 8003ebc:	d1de      	bne.n	8003e7c <_free_r+0x24>
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4401      	add	r1, r0
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	6053      	str	r3, [r2, #4]
 8003ec8:	e7d8      	b.n	8003e7c <_free_r+0x24>
 8003eca:	d902      	bls.n	8003ed2 <_free_r+0x7a>
 8003ecc:	230c      	movs	r3, #12
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	e7d4      	b.n	8003e7c <_free_r+0x24>
 8003ed2:	6820      	ldr	r0, [r4, #0]
 8003ed4:	1821      	adds	r1, r4, r0
 8003ed6:	428b      	cmp	r3, r1
 8003ed8:	bf01      	itttt	eq
 8003eda:	6819      	ldreq	r1, [r3, #0]
 8003edc:	685b      	ldreq	r3, [r3, #4]
 8003ede:	1809      	addeq	r1, r1, r0
 8003ee0:	6021      	streq	r1, [r4, #0]
 8003ee2:	6063      	str	r3, [r4, #4]
 8003ee4:	6054      	str	r4, [r2, #4]
 8003ee6:	e7c9      	b.n	8003e7c <_free_r+0x24>
 8003ee8:	bd38      	pop	{r3, r4, r5, pc}
 8003eea:	bf00      	nop
 8003eec:	20000090 	.word	0x20000090

08003ef0 <_malloc_r>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	1ccd      	adds	r5, r1, #3
 8003ef4:	f025 0503 	bic.w	r5, r5, #3
 8003ef8:	3508      	adds	r5, #8
 8003efa:	2d0c      	cmp	r5, #12
 8003efc:	bf38      	it	cc
 8003efe:	250c      	movcc	r5, #12
 8003f00:	2d00      	cmp	r5, #0
 8003f02:	4606      	mov	r6, r0
 8003f04:	db01      	blt.n	8003f0a <_malloc_r+0x1a>
 8003f06:	42a9      	cmp	r1, r5
 8003f08:	d903      	bls.n	8003f12 <_malloc_r+0x22>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	2000      	movs	r0, #0
 8003f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f12:	f000 f87d 	bl	8004010 <__malloc_lock>
 8003f16:	4921      	ldr	r1, [pc, #132]	; (8003f9c <_malloc_r+0xac>)
 8003f18:	680a      	ldr	r2, [r1, #0]
 8003f1a:	4614      	mov	r4, r2
 8003f1c:	b99c      	cbnz	r4, 8003f46 <_malloc_r+0x56>
 8003f1e:	4f20      	ldr	r7, [pc, #128]	; (8003fa0 <_malloc_r+0xb0>)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	b923      	cbnz	r3, 8003f2e <_malloc_r+0x3e>
 8003f24:	4621      	mov	r1, r4
 8003f26:	4630      	mov	r0, r6
 8003f28:	f000 f862 	bl	8003ff0 <_sbrk_r>
 8003f2c:	6038      	str	r0, [r7, #0]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	4630      	mov	r0, r6
 8003f32:	f000 f85d 	bl	8003ff0 <_sbrk_r>
 8003f36:	1c43      	adds	r3, r0, #1
 8003f38:	d123      	bne.n	8003f82 <_malloc_r+0x92>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	6033      	str	r3, [r6, #0]
 8003f40:	f000 f86c 	bl	800401c <__malloc_unlock>
 8003f44:	e7e3      	b.n	8003f0e <_malloc_r+0x1e>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	1b5b      	subs	r3, r3, r5
 8003f4a:	d417      	bmi.n	8003f7c <_malloc_r+0x8c>
 8003f4c:	2b0b      	cmp	r3, #11
 8003f4e:	d903      	bls.n	8003f58 <_malloc_r+0x68>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	441c      	add	r4, r3
 8003f54:	6025      	str	r5, [r4, #0]
 8003f56:	e004      	b.n	8003f62 <_malloc_r+0x72>
 8003f58:	6863      	ldr	r3, [r4, #4]
 8003f5a:	42a2      	cmp	r2, r4
 8003f5c:	bf0c      	ite	eq
 8003f5e:	600b      	streq	r3, [r1, #0]
 8003f60:	6053      	strne	r3, [r2, #4]
 8003f62:	4630      	mov	r0, r6
 8003f64:	f000 f85a 	bl	800401c <__malloc_unlock>
 8003f68:	f104 000b 	add.w	r0, r4, #11
 8003f6c:	1d23      	adds	r3, r4, #4
 8003f6e:	f020 0007 	bic.w	r0, r0, #7
 8003f72:	1ac2      	subs	r2, r0, r3
 8003f74:	d0cc      	beq.n	8003f10 <_malloc_r+0x20>
 8003f76:	1a1b      	subs	r3, r3, r0
 8003f78:	50a3      	str	r3, [r4, r2]
 8003f7a:	e7c9      	b.n	8003f10 <_malloc_r+0x20>
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	6864      	ldr	r4, [r4, #4]
 8003f80:	e7cc      	b.n	8003f1c <_malloc_r+0x2c>
 8003f82:	1cc4      	adds	r4, r0, #3
 8003f84:	f024 0403 	bic.w	r4, r4, #3
 8003f88:	42a0      	cmp	r0, r4
 8003f8a:	d0e3      	beq.n	8003f54 <_malloc_r+0x64>
 8003f8c:	1a21      	subs	r1, r4, r0
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f000 f82e 	bl	8003ff0 <_sbrk_r>
 8003f94:	3001      	adds	r0, #1
 8003f96:	d1dd      	bne.n	8003f54 <_malloc_r+0x64>
 8003f98:	e7cf      	b.n	8003f3a <_malloc_r+0x4a>
 8003f9a:	bf00      	nop
 8003f9c:	20000090 	.word	0x20000090
 8003fa0:	20000094 	.word	0x20000094

08003fa4 <_realloc_r>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	4607      	mov	r7, r0
 8003fa8:	4614      	mov	r4, r2
 8003faa:	460e      	mov	r6, r1
 8003fac:	b921      	cbnz	r1, 8003fb8 <_realloc_r+0x14>
 8003fae:	4611      	mov	r1, r2
 8003fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fb4:	f7ff bf9c 	b.w	8003ef0 <_malloc_r>
 8003fb8:	b922      	cbnz	r2, 8003fc4 <_realloc_r+0x20>
 8003fba:	f7ff ff4d 	bl	8003e58 <_free_r>
 8003fbe:	4625      	mov	r5, r4
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc4:	f000 f830 	bl	8004028 <_malloc_usable_size_r>
 8003fc8:	42a0      	cmp	r0, r4
 8003fca:	d20f      	bcs.n	8003fec <_realloc_r+0x48>
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4638      	mov	r0, r7
 8003fd0:	f7ff ff8e 	bl	8003ef0 <_malloc_r>
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d0f2      	beq.n	8003fc0 <_realloc_r+0x1c>
 8003fda:	4631      	mov	r1, r6
 8003fdc:	4622      	mov	r2, r4
 8003fde:	f7ff fbeb 	bl	80037b8 <memcpy>
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	f7ff ff37 	bl	8003e58 <_free_r>
 8003fea:	e7e9      	b.n	8003fc0 <_realloc_r+0x1c>
 8003fec:	4635      	mov	r5, r6
 8003fee:	e7e7      	b.n	8003fc0 <_realloc_r+0x1c>

08003ff0 <_sbrk_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	4d05      	ldr	r5, [pc, #20]	; (800400c <_sbrk_r+0x1c>)
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	602b      	str	r3, [r5, #0]
 8003ffc:	f7fd fa90 	bl	8001520 <_sbrk>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d102      	bne.n	800400a <_sbrk_r+0x1a>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	b103      	cbz	r3, 800400a <_sbrk_r+0x1a>
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	20000240 	.word	0x20000240

08004010 <__malloc_lock>:
 8004010:	4801      	ldr	r0, [pc, #4]	; (8004018 <__malloc_lock+0x8>)
 8004012:	f000 b811 	b.w	8004038 <__retarget_lock_acquire_recursive>
 8004016:	bf00      	nop
 8004018:	20000248 	.word	0x20000248

0800401c <__malloc_unlock>:
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <__malloc_unlock+0x8>)
 800401e:	f000 b80c 	b.w	800403a <__retarget_lock_release_recursive>
 8004022:	bf00      	nop
 8004024:	20000248 	.word	0x20000248

08004028 <_malloc_usable_size_r>:
 8004028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800402c:	1f18      	subs	r0, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	bfbc      	itt	lt
 8004032:	580b      	ldrlt	r3, [r1, r0]
 8004034:	18c0      	addlt	r0, r0, r3
 8004036:	4770      	bx	lr

08004038 <__retarget_lock_acquire_recursive>:
 8004038:	4770      	bx	lr

0800403a <__retarget_lock_release_recursive>:
 800403a:	4770      	bx	lr

0800403c <_init>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr

08004048 <_fini>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr
