
3_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d20  08002d20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d20  08002d20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d20  08002d20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08002d34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002d34  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e37  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000162f  00000000  00000000  00027e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  000294a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  00029bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016afe  00000000  00000000  0002a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f6d  00000000  00000000  00040d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081dbd  00000000  00000000  00049cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cba98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d20  00000000  00000000  000cbaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ce0 	.word	0x08002ce0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002ce0 	.word	0x08002ce0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <i2cReadBytes>:
#include "I2C.h"
#include "math.h"
void i2cReadBytes(uint8_t devAddr,uint8_t regAddr,uint16_t bytes,uint8_t *buffer,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af04      	add	r7, sp, #16
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	4603      	mov	r3, r0
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	460b      	mov	r3, r1
 8000616:	71bb      	strb	r3, [r7, #6]
 8000618:	4613      	mov	r3, r2
 800061a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c, devAddr<<1, regAddr, 1, buffer, bytes, 1000);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	b29b      	uxth	r3, r3
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	b299      	uxth	r1, r3
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	b29a      	uxth	r2, r3
 8000628:	f107 0014 	add.w	r0, r7, #20
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	9302      	str	r3, [sp, #8]
 8000632:	88bb      	ldrh	r3, [r7, #4]
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	f001 f94e 	bl	80018dc <HAL_I2C_Mem_Read>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <i2cReadByte>:
uint8_t i2cReadByte(uint8_t devAddr,uint8_t regAddr,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 8000648:	b082      	sub	sp, #8
 800064a:	b580      	push	{r7, lr}
 800064c:	b088      	sub	sp, #32
 800064e:	af04      	add	r7, sp, #16
 8000650:	61fb      	str	r3, [r7, #28]
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	460b      	mov	r3, r1
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	4613      	mov	r3, r2
 800065c:	80bb      	strh	r3, [r7, #4]
	uint8_t dByte;
	HAL_I2C_Mem_Read(&hi2c, devAddr<<1, regAddr, 1, &dByte, 1, timeout);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	b29b      	uxth	r3, r3
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	b299      	uxth	r1, r3
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	b29a      	uxth	r2, r3
 800066a:	88bb      	ldrh	r3, [r7, #4]
 800066c:	f107 001c 	add.w	r0, r7, #28
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2301      	movs	r3, #1
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 030f 	add.w	r3, r7, #15
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	f001 f92d 	bl	80018dc <HAL_I2C_Mem_Read>
	return dByte;
 8000682:	7bfb      	ldrb	r3, [r7, #15]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068e:	b002      	add	sp, #8
 8000690:	4770      	bx	lr

08000692 <i2cWriteByte>:
void i2cWriteByte(uint8_t devAddr,uint8_t regAddr,uint8_t data,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 8000692:	b590      	push	{r4, r7, lr}
 8000694:	b087      	sub	sp, #28
 8000696:	af04      	add	r7, sp, #16
 8000698:	4604      	mov	r4, r0
 800069a:	4608      	mov	r0, r1
 800069c:	4611      	mov	r1, r2
 800069e:	461a      	mov	r2, r3
 80006a0:	4623      	mov	r3, r4
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4603      	mov	r3, r0
 80006a6:	71bb      	strb	r3, [r7, #6]
 80006a8:	460b      	mov	r3, r1
 80006aa:	717b      	strb	r3, [r7, #5]
 80006ac:	4613      	mov	r3, r2
 80006ae:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c, devAddr<<1|1, regAddr, 1, &data, 1, timeout);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	b299      	uxth	r1, r3
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	887b      	ldrh	r3, [r7, #2]
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	1d7b      	adds	r3, r7, #5
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	f107 0018 	add.w	r0, r7, #24
 80006d4:	f001 f808 	bl	80016e8 <HAL_I2C_Mem_Write>
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd90      	pop	{r4, r7, pc}

080006e0 <i2cWriteBits>:
void i2cWriteBits(uint8_t devAddr,uint8_t regAddr,uint8_t data,uint8_t bitStart,uint8_t length,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 80006e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006e4:	b09a      	sub	sp, #104	; 0x68
 80006e6:	af16      	add	r7, sp, #88	; 0x58
 80006e8:	4604      	mov	r4, r0
 80006ea:	4608      	mov	r0, r1
 80006ec:	4611      	mov	r1, r2
 80006ee:	461a      	mov	r2, r3
 80006f0:	4623      	mov	r3, r4
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4603      	mov	r3, r0
 80006f6:	71bb      	strb	r3, [r7, #6]
 80006f8:	460b      	mov	r3, r1
 80006fa:	717b      	strb	r3, [r7, #5]
 80006fc:	4613      	mov	r3, r2
 80006fe:	713b      	strb	r3, [r7, #4]
	uint8_t dByte =  i2cReadByte(devAddr<<1, regAddr, timeout, hi2c);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	b2dc      	uxtb	r4, r3
 8000706:	8dbe      	ldrh	r6, [r7, #44]	; 0x2c
 8000708:	79bd      	ldrb	r5, [r7, #6]
 800070a:	4668      	mov	r0, sp
 800070c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000710:	2250      	movs	r2, #80	; 0x50
 8000712:	4619      	mov	r1, r3
 8000714:	f002 face 	bl	8002cb4 <memcpy>
 8000718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800071a:	4632      	mov	r2, r6
 800071c:	4629      	mov	r1, r5
 800071e:	4620      	mov	r0, r4
 8000720:	f7ff ff92 	bl	8000648 <i2cReadByte>
 8000724:	4603      	mov	r3, r0
 8000726:	73fb      	strb	r3, [r7, #15]
	uint8_t bMask = ((1<<length)-1)<<(bitStart+1-length);// or bMask = (0xff>>(7-bitStart+bitStart-length+1)<<(bitStart-length+1)) &&0xff
 8000728:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800072c:	2201      	movs	r2, #1
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	1e5a      	subs	r2, r3, #1
 8000734:	793b      	ldrb	r3, [r7, #4]
 8000736:	1c59      	adds	r1, r3, #1
 8000738:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800073c:	1acb      	subs	r3, r1, r3
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	73bb      	strb	r3, [r7, #14]
	data <<=(bitStart-length +1);
 8000744:	797a      	ldrb	r2, [r7, #5]
 8000746:	7939      	ldrb	r1, [r7, #4]
 8000748:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800074c:	1acb      	subs	r3, r1, r3
 800074e:	3301      	adds	r3, #1
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	717b      	strb	r3, [r7, #5]
	dByte &= bMask;
 8000756:	7bfa      	ldrb	r2, [r7, #15]
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	4013      	ands	r3, r2
 800075c:	73fb      	strb	r3, [r7, #15]
	dByte |= data;
 800075e:	7bfa      	ldrb	r2, [r7, #15]
 8000760:	797b      	ldrb	r3, [r7, #5]
 8000762:	4313      	orrs	r3, r2
 8000764:	73fb      	strb	r3, [r7, #15]
	i2cWriteByte(devAddr, regAddr, dByte, timeout, hi2c);
 8000766:	f8b7 802c 	ldrh.w	r8, [r7, #44]	; 0x2c
 800076a:	7bfe      	ldrb	r6, [r7, #15]
 800076c:	79bd      	ldrb	r5, [r7, #6]
 800076e:	79fc      	ldrb	r4, [r7, #7]
 8000770:	4668      	mov	r0, sp
 8000772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000776:	2254      	movs	r2, #84	; 0x54
 8000778:	4619      	mov	r1, r3
 800077a:	f002 fa9b 	bl	8002cb4 <memcpy>
 800077e:	4643      	mov	r3, r8
 8000780:	4632      	mov	r2, r6
 8000782:	4629      	mov	r1, r5
 8000784:	4620      	mov	r0, r4
 8000786:	f7ff ff84 	bl	8000692 <i2cWriteByte>
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000794 <i2cWriteBit>:
void i2cWriteBit(uint8_t devAddr,uint8_t regAdd,uint8_t data,uint8_t bitIndex ,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000796:	b099      	sub	sp, #100	; 0x64
 8000798:	af14      	add	r7, sp, #80	; 0x50
 800079a:	4604      	mov	r4, r0
 800079c:	4608      	mov	r0, r1
 800079e:	4611      	mov	r1, r2
 80007a0:	461a      	mov	r2, r3
 80007a2:	4623      	mov	r3, r4
 80007a4:	71fb      	strb	r3, [r7, #7]
 80007a6:	4603      	mov	r3, r0
 80007a8:	71bb      	strb	r3, [r7, #6]
 80007aa:	460b      	mov	r3, r1
 80007ac:	717b      	strb	r3, [r7, #5]
 80007ae:	4613      	mov	r3, r2
 80007b0:	713b      	strb	r3, [r7, #4]
	uint8_t dByte = i2cReadByte(devAddr, regAdd, timeout, hi2c);
 80007b2:	8d3e      	ldrh	r6, [r7, #40]	; 0x28
 80007b4:	79bd      	ldrb	r5, [r7, #6]
 80007b6:	79fc      	ldrb	r4, [r7, #7]
 80007b8:	4668      	mov	r0, sp
 80007ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007be:	2250      	movs	r2, #80	; 0x50
 80007c0:	4619      	mov	r1, r3
 80007c2:	f002 fa77 	bl	8002cb4 <memcpy>
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	4632      	mov	r2, r6
 80007ca:	4629      	mov	r1, r5
 80007cc:	4620      	mov	r0, r4
 80007ce:	f7ff ff3b 	bl	8000648 <i2cReadByte>
 80007d2:	4603      	mov	r3, r0
 80007d4:	73fb      	strb	r3, [r7, #15]
	uint8_t bMask = ~(1<<bitIndex);
 80007d6:	793b      	ldrb	r3, [r7, #4]
 80007d8:	2201      	movs	r2, #1
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	43db      	mvns	r3, r3
 80007e2:	73bb      	strb	r3, [r7, #14]
	data <<= bitIndex;
 80007e4:	797a      	ldrb	r2, [r7, #5]
 80007e6:	793b      	ldrb	r3, [r7, #4]
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	717b      	strb	r3, [r7, #5]
	dByte &= bMask;
 80007ee:	7bfa      	ldrb	r2, [r7, #15]
 80007f0:	7bbb      	ldrb	r3, [r7, #14]
 80007f2:	4013      	ands	r3, r2
 80007f4:	73fb      	strb	r3, [r7, #15]
	dByte |= data;
 80007f6:	7bfa      	ldrb	r2, [r7, #15]
 80007f8:	797b      	ldrb	r3, [r7, #5]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	73fb      	strb	r3, [r7, #15]
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b097      	sub	sp, #92	; 0x5c
 800080c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f000 fb39 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f8b5 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f000 f91d 	bl	8000a54 <MX_GPIO_Init>
  MX_I2C1_Init();
 800081a:	f000 f8ed 	bl	80009f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  initI2C(hi2c1);
 800081e:	4c4a      	ldr	r4, [pc, #296]	; (8000948 <main+0x140>)
 8000820:	4668      	mov	r0, sp
 8000822:	f104 0310 	add.w	r3, r4, #16
 8000826:	2244      	movs	r2, #68	; 0x44
 8000828:	4619      	mov	r1, r3
 800082a:	f002 fa43 	bl	8002cb4 <memcpy>
 800082e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000832:	f000 f943 	bl	8000abc <initI2C>
  initialize();
 8000836:	f000 f9ef 	bl	8000c18 <initialize>
  HAL_Delay(1);
 800083a:	2001      	movs	r0, #1
 800083c:	f000 fb84 	bl	8000f48 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//  HAL_I2C_R
	 // HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS<<1, 0x75, 1, &check, 1, 1000);
	  if(deviceIsAvailable())
 8000840:	f000 f9ca 	bl	8000bd8 <deviceIsAvailable>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d079      	beq.n	800093e <main+0x136>
	  {

		  uint8_t dBytePwr = i2cReadByte(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1000, hi2c1);
 800084a:	4c3f      	ldr	r4, [pc, #252]	; (8000948 <main+0x140>)
 800084c:	4668      	mov	r0, sp
 800084e:	1d23      	adds	r3, r4, #4
 8000850:	2250      	movs	r2, #80	; 0x50
 8000852:	4619      	mov	r1, r3
 8000854:	f002 fa2e 	bl	8002cb4 <memcpy>
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	216b      	movs	r1, #107	; 0x6b
 8000860:	2068      	movs	r0, #104	; 0x68
 8000862:	f7ff fef1 	bl	8000648 <i2cReadByte>
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
		  HAL_Delay(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f000 fb6c 	bl	8000f48 <HAL_Delay>
		  getMotion6(&ax_raw, &ay_raw, &az_raw, &gx_raw, &gy_raw, &gz_raw);
 8000870:	4b36      	ldr	r3, [pc, #216]	; (800094c <main+0x144>)
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	4b36      	ldr	r3, [pc, #216]	; (8000950 <main+0x148>)
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	4b36      	ldr	r3, [pc, #216]	; (8000954 <main+0x14c>)
 800087a:	4a37      	ldr	r2, [pc, #220]	; (8000958 <main+0x150>)
 800087c:	4937      	ldr	r1, [pc, #220]	; (800095c <main+0x154>)
 800087e:	4838      	ldr	r0, [pc, #224]	; (8000960 <main+0x158>)
 8000880:	f000 f9da 	bl	8000c38 <getMotion6>
		  ax = ax_raw/16384.0f;
 8000884:	4b36      	ldr	r3, [pc, #216]	; (8000960 <main+0x158>)
 8000886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fd18 	bl	80002c0 <__aeabi_i2f>
 8000890:	4603      	mov	r3, r0
 8000892:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe1a 	bl	80004d0 <__aeabi_fdiv>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	4b30      	ldr	r3, [pc, #192]	; (8000964 <main+0x15c>)
 80008a2:	601a      	str	r2, [r3, #0]
		  ay = ay_raw/16384.0f;
 80008a4:	4b2d      	ldr	r3, [pc, #180]	; (800095c <main+0x154>)
 80008a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fd08 	bl	80002c0 <__aeabi_i2f>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe0a 	bl	80004d0 <__aeabi_fdiv>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <main+0x160>)
 80008c2:	601a      	str	r2, [r3, #0]
		  az = az_raw/16384.0f;
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <main+0x150>)
 80008c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fcf8 	bl	80002c0 <__aeabi_i2f>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fdfa 	bl	80004d0 <__aeabi_fdiv>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <main+0x164>)
 80008e2:	601a      	str	r2, [r3, #0]

		  gx = gx_raw/131.0f;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <main+0x14c>)
 80008e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fce8 	bl	80002c0 <__aeabi_i2f>
 80008f0:	4603      	mov	r3, r0
 80008f2:	491f      	ldr	r1, [pc, #124]	; (8000970 <main+0x168>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fdeb 	bl	80004d0 <__aeabi_fdiv>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <main+0x16c>)
 8000900:	601a      	str	r2, [r3, #0]
		  gy = gy_raw/131.0f;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <main+0x148>)
 8000904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fcd9 	bl	80002c0 <__aeabi_i2f>
 800090e:	4603      	mov	r3, r0
 8000910:	4917      	ldr	r1, [pc, #92]	; (8000970 <main+0x168>)
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fddc 	bl	80004d0 <__aeabi_fdiv>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <main+0x170>)
 800091e:	601a      	str	r2, [r3, #0]
		  gz = gz_raw/131.0f;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <main+0x144>)
 8000922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fcca 	bl	80002c0 <__aeabi_i2f>
 800092c:	4603      	mov	r3, r0
 800092e:	4910      	ldr	r1, [pc, #64]	; (8000970 <main+0x168>)
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fdcd 	bl	80004d0 <__aeabi_fdiv>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <main+0x174>)
 800093c:	601a      	str	r2, [r3, #0]

	  }
	//  HAL_I2C_Mem_Write(&hi2c1, DEVIDEADDRESS<<1|WRITE, 0x6B, 1, , Size, Timeout)

	  HAL_Delay(1000);
 800093e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000942:	f000 fb01 	bl	8000f48 <HAL_Delay>
	  if(deviceIsAvailable())
 8000946:	e77b      	b.n	8000840 <main+0x38>
 8000948:	20000048 	.word	0x20000048
 800094c:	200000b0 	.word	0x200000b0
 8000950:	200000ba 	.word	0x200000ba
 8000954:	200000ac 	.word	0x200000ac
 8000958:	200000a8 	.word	0x200000a8
 800095c:	200000ae 	.word	0x200000ae
 8000960:	200000b8 	.word	0x200000b8
 8000964:	200000a4 	.word	0x200000a4
 8000968:	200000c0 	.word	0x200000c0
 800096c:	200000a0 	.word	0x200000a0
 8000970:	43030000 	.word	0x43030000
 8000974:	200000bc 	.word	0x200000bc
 8000978:	2000009c 	.word	0x2000009c
 800097c:	200000b4 	.word	0x200000b4

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b090      	sub	sp, #64	; 0x40
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0318 	add.w	r3, r7, #24
 800098a:	2228      	movs	r2, #40	; 0x28
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f002 f99e 	bl	8002cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a6:	2301      	movs	r3, #1
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009aa:	2310      	movs	r3, #16
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fd52 	bl	8002460 <HAL_RCC_OscConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009c2:	f000 f875 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c6:	230f      	movs	r3, #15
 80009c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 ffbe 	bl	8002960 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009ea:	f000 f861 	bl	8000ab0 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3740      	adds	r7, #64	; 0x40
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C1_Init+0x50>)
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <MX_I2C1_Init+0x54>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a04:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <MX_I2C1_Init+0x58>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a36:	f000 fd13 	bl	8001460 <HAL_I2C_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a40:	f000 f836 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000048 	.word	0x20000048
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	000186a0 	.word	0x000186a0

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_GPIO_Init+0x58>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a13      	ldr	r2, [pc, #76]	; (8000aac <MX_GPIO_Init+0x58>)
 8000a60:	f043 0320 	orr.w	r3, r3, #32
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_GPIO_Init+0x58>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f003 0320 	and.w	r3, r3, #32
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_GPIO_Init+0x58>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <MX_GPIO_Init+0x58>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_GPIO_Init+0x58>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_GPIO_Init+0x58>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a07      	ldr	r2, [pc, #28]	; (8000aac <MX_GPIO_Init+0x58>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <MX_GPIO_Init+0x58>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <initI2C>:
	#include "mpu6050.h"
#include "I2C.h"
I2C_HandleTypeDef hi2cx;
void initI2C(I2C_HandleTypeDef _hi2c)
{
 8000abc:	b084      	sub	sp, #16
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	f107 0c08 	add.w	ip, r7, #8
 8000ac6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2cx = _hi2c;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <initI2C+0x2c>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2254      	movs	r2, #84	; 0x54
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f002 f8ed 	bl	8002cb4 <memcpy>
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ae2:	b004      	add	sp, #16
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000c4 	.word	0x200000c4

08000aec <setClockSource>:
void setClockSource(uint8_t sourse)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b09b      	sub	sp, #108	; 0x6c
 8000af0:	af18      	add	r7, sp, #96	; 0x60
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	i2cWriteBits(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, sourse, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, 200, hi2cx);
 8000af6:	79fc      	ldrb	r4, [r7, #7]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <setClockSource+0x38>)
 8000afa:	ab02      	add	r3, sp, #8
 8000afc:	4611      	mov	r1, r2
 8000afe:	2254      	movs	r2, #84	; 0x54
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 f8d7 	bl	8002cb4 <memcpy>
 8000b06:	23c8      	movs	r3, #200	; 0xc8
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2302      	movs	r3, #2
 8000b10:	4622      	mov	r2, r4
 8000b12:	216b      	movs	r1, #107	; 0x6b
 8000b14:	2068      	movs	r0, #104	; 0x68
 8000b16:	f7ff fde3 	bl	80006e0 <i2cWriteBits>
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000c4 	.word	0x200000c4

08000b28 <setSeepEnable>:
void setSeepEnable(uint8_t permit)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b099      	sub	sp, #100	; 0x64
 8000b2c:	af16      	add	r7, sp, #88	; 0x58
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	i2cWriteBit(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, permit, MPU6050_PWR1_SLEEP_BIT, 200, hi2cx);
 8000b32:	79fc      	ldrb	r4, [r7, #7]
 8000b34:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <setSeepEnable+0x34>)
 8000b36:	ab01      	add	r3, sp, #4
 8000b38:	4611      	mov	r1, r2
 8000b3a:	2254      	movs	r2, #84	; 0x54
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 f8b9 	bl	8002cb4 <memcpy>
 8000b42:	23c8      	movs	r3, #200	; 0xc8
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2306      	movs	r3, #6
 8000b48:	4622      	mov	r2, r4
 8000b4a:	216b      	movs	r1, #107	; 0x6b
 8000b4c:	2068      	movs	r0, #104	; 0x68
 8000b4e:	f7ff fe21 	bl	8000794 <i2cWriteBit>
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd90      	pop	{r4, r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000c4 	.word	0x200000c4

08000b60 <setFullScaleGyroRange>:
void setFullScaleGyroRange(uint8_t range)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b09b      	sub	sp, #108	; 0x6c
 8000b64:	af18      	add	r7, sp, #96	; 0x60
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
	i2cWriteBits(MPU6050_ADDRESS, MPU6050_RA_GYR_CONF, range, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, 200, hi2cx);
 8000b6a:	79fc      	ldrb	r4, [r7, #7]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <setFullScaleGyroRange+0x38>)
 8000b6e:	ab02      	add	r3, sp, #8
 8000b70:	4611      	mov	r1, r2
 8000b72:	2254      	movs	r2, #84	; 0x54
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 f89d 	bl	8002cb4 <memcpy>
 8000b7a:	23c8      	movs	r3, #200	; 0xc8
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	2302      	movs	r3, #2
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2304      	movs	r3, #4
 8000b84:	4622      	mov	r2, r4
 8000b86:	211b      	movs	r1, #27
 8000b88:	2068      	movs	r0, #104	; 0x68
 8000b8a:	f7ff fda9 	bl	80006e0 <i2cWriteBits>
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200000c4 	.word	0x200000c4

08000b9c <setFullScaleAccelRange>:
void setFullScaleAccelRange(uint8_t range)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b09b      	sub	sp, #108	; 0x6c
 8000ba0:	af18      	add	r7, sp, #96	; 0x60
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	i2cWriteBits(MPU6050_ADDRESS, MPU6050_RA_ACC_CONF, range, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, 200, hi2cx);
 8000ba6:	79fc      	ldrb	r4, [r7, #7]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <setFullScaleAccelRange+0x38>)
 8000baa:	ab02      	add	r3, sp, #8
 8000bac:	4611      	mov	r1, r2
 8000bae:	2254      	movs	r2, #84	; 0x54
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 f87f 	bl	8002cb4 <memcpy>
 8000bb6:	23c8      	movs	r3, #200	; 0xc8
 8000bb8:	9301      	str	r3, [sp, #4]
 8000bba:	2302      	movs	r3, #2
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	4622      	mov	r2, r4
 8000bc2:	211c      	movs	r1, #28
 8000bc4:	2068      	movs	r0, #104	; 0x68
 8000bc6:	f7ff fd8b 	bl	80006e0 <i2cWriteBits>
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000c4 	.word	0x200000c4

08000bd8 <deviceIsAvailable>:
uint8_t deviceIsAvailable()
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b097      	sub	sp, #92	; 0x5c
 8000bdc:	af14      	add	r7, sp, #80	; 0x50
	uint8_t dByte = i2cReadByte(MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1000, hi2cx);
 8000bde:	4c0d      	ldr	r4, [pc, #52]	; (8000c14 <deviceIsAvailable+0x3c>)
 8000be0:	4668      	mov	r0, sp
 8000be2:	1d23      	adds	r3, r4, #4
 8000be4:	2250      	movs	r2, #80	; 0x50
 8000be6:	4619      	mov	r1, r3
 8000be8:	f002 f864 	bl	8002cb4 <memcpy>
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf2:	2175      	movs	r1, #117	; 0x75
 8000bf4:	2068      	movs	r0, #104	; 0x68
 8000bf6:	f7ff fd27 	bl	8000648 <i2cReadByte>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
//	HAL_I2C_Mem_Write(&hi2cx, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I,MPU6050_RA_WHO_AM_I_SIZE , &dByte, 1, 1000);
	if(dByte == MPU6050_ADDRESS)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b68      	cmp	r3, #104	; 0x68
 8000c02:	d101      	bne.n	8000c08 <deviceIsAvailable+0x30>
		return 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <deviceIsAvailable+0x32>
	else return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000c4 	.word	0x200000c4

08000c18 <initialize>:
void initialize()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f7ff ff65 	bl	8000aec <setClockSource>
	setSeepEnable(0);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff ff80 	bl	8000b28 <setSeepEnable>
	setFullScaleGyroRange(MPU6050_GYRO_FS_SEL_250);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff ff99 	bl	8000b60 <setFullScaleGyroRange>
	setFullScaleAccelRange(MPU6050_ACCL_AFS_SEL_2G);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ffb4 	bl	8000b9c <setFullScaleAccelRange>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <getMotion6>:
void getMotion6(int16_t *ax, int16_t *ay, int16_t *az,int16_t *gx, int16_t *gy,int16_t *gz)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b09a      	sub	sp, #104	; 0x68
 8000c3c:	af16      	add	r7, sp, #88	; 0x58
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
	i2cReadBytes(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H,14 , i2cBuffer, 2000, hi2cx);
 8000c46:	4a2b      	ldr	r2, [pc, #172]	; (8000cf4 <getMotion6+0xbc>)
 8000c48:	ab01      	add	r3, sp, #4
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	2254      	movs	r2, #84	; 0x54
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 f830 	bl	8002cb4 <memcpy>
 8000c54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <getMotion6+0xc0>)
 8000c5c:	220e      	movs	r2, #14
 8000c5e:	213b      	movs	r1, #59	; 0x3b
 8000c60:	2068      	movs	r0, #104	; 0x68
 8000c62:	f7ff fcd1 	bl	8000608 <i2cReadBytes>
    *ax = (int16_t)(i2cBuffer[0] << 8 )| i2cBuffer[1];
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <getMotion6+0xc0>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	021b      	lsls	r3, r3, #8
 8000c6c:	b21a      	sxth	r2, r3
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <getMotion6+0xc0>)
 8000c70:	785b      	ldrb	r3, [r3, #1]
 8000c72:	b21b      	sxth	r3, r3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	801a      	strh	r2, [r3, #0]
	*ay = (int16_t)(i2cBuffer[2]<<8 )| i2cBuffer[3];
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <getMotion6+0xc0>)
 8000c7e:	789b      	ldrb	r3, [r3, #2]
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	b21a      	sxth	r2, r3
 8000c84:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <getMotion6+0xc0>)
 8000c86:	78db      	ldrb	r3, [r3, #3]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	801a      	strh	r2, [r3, #0]
	*az = (int16_t)(i2cBuffer[4]<<8 )| i2cBuffer[5];
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <getMotion6+0xc0>)
 8000c94:	791b      	ldrb	r3, [r3, #4]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <getMotion6+0xc0>)
 8000c9c:	795b      	ldrb	r3, [r3, #5]
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	801a      	strh	r2, [r3, #0]
	//i2cBuffer[6] i2cBuffer[7] temperature
	*gx = (int16_t)(i2cBuffer[8]<<8 )| i2cBuffer[9];
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <getMotion6+0xc0>)
 8000caa:	7a1b      	ldrb	r3, [r3, #8]
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <getMotion6+0xc0>)
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	801a      	strh	r2, [r3, #0]
	*gy = (int16_t)(i2cBuffer[10]<<8 )| i2cBuffer[11];
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <getMotion6+0xc0>)
 8000cc0:	7a9b      	ldrb	r3, [r3, #10]
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <getMotion6+0xc0>)
 8000cc8:	7adb      	ldrb	r3, [r3, #11]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	801a      	strh	r2, [r3, #0]
	*gz = (int16_t)(i2cBuffer[12]<<8 )| i2cBuffer[13];
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <getMotion6+0xc0>)
 8000cd6:	7b1b      	ldrb	r3, [r3, #12]
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	b21a      	sxth	r2, r3
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <getMotion6+0xc0>)
 8000cde:	7b5b      	ldrb	r3, [r3, #13]
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	801a      	strh	r2, [r3, #0]

}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000c4 	.word	0x200000c4
 8000cf8:	20000028 	.word	0x20000028

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_MspInit+0x60>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_MspInit+0x60>)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000

08000d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <HAL_I2C_MspInit+0x70>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d123      	bne.n	8000dc8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d98:	23c0      	movs	r3, #192	; 0xc0
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <HAL_I2C_MspInit+0x78>)
 8000dac:	f000 f9d4 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dba:	61d3      	str	r3, [r2, #28]
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e22:	f000 f875 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e3a:	e003      	b.n	8000e44 <LoopCopyDataInit>

08000e3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e42:	3104      	adds	r1, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e4c:	d3f6      	bcc.n	8000e3c <CopyDataInit>
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e50:	e002      	b.n	8000e58 <LoopFillZerobss>

08000e52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e54:	f842 3b04 	str.w	r3, [r2], #4

08000e58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e5c:	d3f9      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e5e:	f7ff ffe4 	bl	8000e2a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f001 ff03 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff fccf 	bl	8000808 <main>
  bx lr
 8000e6a:	4770      	bx	lr
  ldr r3, =_sidata
 8000e6c:	08002d28 	.word	0x08002d28
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e74:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000e78:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000e7c:	2000011c 	.word	0x2000011c

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x28>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f92b 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff ff2c 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f935 	bl	800113e <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f90b 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x1c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x20>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <HAL_IncTick+0x20>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000118 	.word	0x20000118

08000f34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b02      	ldr	r3, [pc, #8]	; (8000f44 <HAL_GetTick+0x10>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000118 	.word	0x20000118

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff fff0 	bl	8000f34 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffe0 	bl	8000f34 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff90 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff49 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff5e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff90 	bl	8001048 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5f 	bl	8000ff4 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffb0 	bl	80010ac <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b08b      	sub	sp, #44	; 0x2c
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	e169      	b.n	8001440 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800116c:	2201      	movs	r2, #1
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	429a      	cmp	r2, r3
 8001186:	f040 8158 	bne.w	800143a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a9a      	ldr	r2, [pc, #616]	; (80013f8 <HAL_GPIO_Init+0x2a0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d05e      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 8001194:	4a98      	ldr	r2, [pc, #608]	; (80013f8 <HAL_GPIO_Init+0x2a0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d875      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 800119a:	4a98      	ldr	r2, [pc, #608]	; (80013fc <HAL_GPIO_Init+0x2a4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d058      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011a0:	4a96      	ldr	r2, [pc, #600]	; (80013fc <HAL_GPIO_Init+0x2a4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d86f      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011a6:	4a96      	ldr	r2, [pc, #600]	; (8001400 <HAL_GPIO_Init+0x2a8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d052      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011ac:	4a94      	ldr	r2, [pc, #592]	; (8001400 <HAL_GPIO_Init+0x2a8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d869      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011b2:	4a94      	ldr	r2, [pc, #592]	; (8001404 <HAL_GPIO_Init+0x2ac>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d04c      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011b8:	4a92      	ldr	r2, [pc, #584]	; (8001404 <HAL_GPIO_Init+0x2ac>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d863      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011be:	4a92      	ldr	r2, [pc, #584]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d046      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011c4:	4a90      	ldr	r2, [pc, #576]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d85d      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011ca:	2b12      	cmp	r3, #18
 80011cc:	d82a      	bhi.n	8001224 <HAL_GPIO_Init+0xcc>
 80011ce:	2b12      	cmp	r3, #18
 80011d0:	d859      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011d2:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <HAL_GPIO_Init+0x80>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	08001253 	.word	0x08001253
 80011dc:	0800122d 	.word	0x0800122d
 80011e0:	0800123f 	.word	0x0800123f
 80011e4:	08001281 	.word	0x08001281
 80011e8:	08001287 	.word	0x08001287
 80011ec:	08001287 	.word	0x08001287
 80011f0:	08001287 	.word	0x08001287
 80011f4:	08001287 	.word	0x08001287
 80011f8:	08001287 	.word	0x08001287
 80011fc:	08001287 	.word	0x08001287
 8001200:	08001287 	.word	0x08001287
 8001204:	08001287 	.word	0x08001287
 8001208:	08001287 	.word	0x08001287
 800120c:	08001287 	.word	0x08001287
 8001210:	08001287 	.word	0x08001287
 8001214:	08001287 	.word	0x08001287
 8001218:	08001287 	.word	0x08001287
 800121c:	08001235 	.word	0x08001235
 8001220:	08001249 	.word	0x08001249
 8001224:	4a79      	ldr	r2, [pc, #484]	; (800140c <HAL_GPIO_Init+0x2b4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800122a:	e02c      	b.n	8001286 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	623b      	str	r3, [r7, #32]
          break;
 8001232:	e029      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	3304      	adds	r3, #4
 800123a:	623b      	str	r3, [r7, #32]
          break;
 800123c:	e024      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	3308      	adds	r3, #8
 8001244:	623b      	str	r3, [r7, #32]
          break;
 8001246:	e01f      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	330c      	adds	r3, #12
 800124e:	623b      	str	r3, [r7, #32]
          break;
 8001250:	e01a      	b.n	8001288 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800125a:	2304      	movs	r3, #4
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e013      	b.n	8001288 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d105      	bne.n	8001274 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001268:	2308      	movs	r3, #8
 800126a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	611a      	str	r2, [r3, #16]
          break;
 8001272:	e009      	b.n	8001288 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001274:	2308      	movs	r3, #8
 8001276:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	615a      	str	r2, [r3, #20]
          break;
 800127e:	e003      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
          break;
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x130>
          break;
 8001286:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d801      	bhi.n	8001292 <HAL_GPIO_Init+0x13a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	e001      	b.n	8001296 <HAL_GPIO_Init+0x13e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3304      	adds	r3, #4
 8001296:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	2bff      	cmp	r3, #255	; 0xff
 800129c:	d802      	bhi.n	80012a4 <HAL_GPIO_Init+0x14c>
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	e002      	b.n	80012aa <HAL_GPIO_Init+0x152>
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	3b08      	subs	r3, #8
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	210f      	movs	r1, #15
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	401a      	ands	r2, r3
 80012bc:	6a39      	ldr	r1, [r7, #32]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	431a      	orrs	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80b1 	beq.w	800143a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012d8:	4b4d      	ldr	r3, [pc, #308]	; (8001410 <HAL_GPIO_Init+0x2b8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a4c      	ldr	r2, [pc, #304]	; (8001410 <HAL_GPIO_Init+0x2b8>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_GPIO_Init+0x2b8>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_GPIO_Init+0x2bc>)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a40      	ldr	r2, [pc, #256]	; (8001418 <HAL_GPIO_Init+0x2c0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d013      	beq.n	8001344 <HAL_GPIO_Init+0x1ec>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a3f      	ldr	r2, [pc, #252]	; (800141c <HAL_GPIO_Init+0x2c4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d00d      	beq.n	8001340 <HAL_GPIO_Init+0x1e8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a3e      	ldr	r2, [pc, #248]	; (8001420 <HAL_GPIO_Init+0x2c8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0x1e4>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <HAL_GPIO_Init+0x2cc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_GPIO_Init+0x1e0>
 8001334:	2303      	movs	r3, #3
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001338:	2304      	movs	r3, #4
 800133a:	e004      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 800133c:	2302      	movs	r3, #2
 800133e:	e002      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001344:	2300      	movs	r3, #0
 8001346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001356:	492f      	ldr	r1, [pc, #188]	; (8001414 <HAL_GPIO_Init+0x2bc>)
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	492c      	ldr	r1, [pc, #176]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	43db      	mvns	r3, r3
 8001386:	4928      	ldr	r1, [pc, #160]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001388:	4013      	ands	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4922      	ldr	r1, [pc, #136]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	491e      	ldr	r1, [pc, #120]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	4918      	ldr	r1, [pc, #96]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4914      	ldr	r1, [pc, #80]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d021      	beq.n	800142c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	490e      	ldr	r1, [pc, #56]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	60cb      	str	r3, [r1, #12]
 80013f4:	e021      	b.n	800143a <HAL_GPIO_Init+0x2e2>
 80013f6:	bf00      	nop
 80013f8:	10320000 	.word	0x10320000
 80013fc:	10310000 	.word	0x10310000
 8001400:	10220000 	.word	0x10220000
 8001404:	10210000 	.word	0x10210000
 8001408:	10120000 	.word	0x10120000
 800140c:	10110000 	.word	0x10110000
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000
 8001418:	40010800 	.word	0x40010800
 800141c:	40010c00 	.word	0x40010c00
 8001420:	40011000 	.word	0x40011000
 8001424:	40011400 	.word	0x40011400
 8001428:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_GPIO_Init+0x304>)
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	43db      	mvns	r3, r3
 8001434:	4909      	ldr	r1, [pc, #36]	; (800145c <HAL_GPIO_Init+0x304>)
 8001436:	4013      	ands	r3, r2
 8001438:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	3301      	adds	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	fa22 f303 	lsr.w	r3, r2, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	f47f ae8e 	bne.w	800116c <HAL_GPIO_Init+0x14>
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	372c      	adds	r7, #44	; 0x2c
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e12b      	b.n	80016ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fc6a 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014c4:	f001 fba0 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 80014c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a81      	ldr	r2, [pc, #516]	; (80016d4 <HAL_I2C_Init+0x274>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d807      	bhi.n	80014e4 <HAL_I2C_Init+0x84>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4a80      	ldr	r2, [pc, #512]	; (80016d8 <HAL_I2C_Init+0x278>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	bf94      	ite	ls
 80014dc:	2301      	movls	r3, #1
 80014de:	2300      	movhi	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	e006      	b.n	80014f2 <HAL_I2C_Init+0x92>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4a7d      	ldr	r2, [pc, #500]	; (80016dc <HAL_I2C_Init+0x27c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	bf94      	ite	ls
 80014ec:	2301      	movls	r3, #1
 80014ee:	2300      	movhi	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0e7      	b.n	80016ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4a78      	ldr	r2, [pc, #480]	; (80016e0 <HAL_I2C_Init+0x280>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9b      	lsrs	r3, r3, #18
 8001504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	430a      	orrs	r2, r1
 8001518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a6a      	ldr	r2, [pc, #424]	; (80016d4 <HAL_I2C_Init+0x274>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d802      	bhi.n	8001534 <HAL_I2C_Init+0xd4>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3301      	adds	r3, #1
 8001532:	e009      	b.n	8001548 <HAL_I2C_Init+0xe8>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800153a:	fb02 f303 	mul.w	r3, r2, r3
 800153e:	4a69      	ldr	r2, [pc, #420]	; (80016e4 <HAL_I2C_Init+0x284>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	3301      	adds	r3, #1
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	430b      	orrs	r3, r1
 800154e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800155a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	495c      	ldr	r1, [pc, #368]	; (80016d4 <HAL_I2C_Init+0x274>)
 8001564:	428b      	cmp	r3, r1
 8001566:	d819      	bhi.n	800159c <HAL_I2C_Init+0x13c>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e59      	subs	r1, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fbb1 f3f3 	udiv	r3, r1, r3
 8001576:	1c59      	adds	r1, r3, #1
 8001578:	f640 73fc 	movw	r3, #4092	; 0xffc
 800157c:	400b      	ands	r3, r1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00a      	beq.n	8001598 <HAL_I2C_Init+0x138>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1e59      	subs	r1, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001590:	3301      	adds	r3, #1
 8001592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001596:	e051      	b.n	800163c <HAL_I2C_Init+0x1dc>
 8001598:	2304      	movs	r3, #4
 800159a:	e04f      	b.n	800163c <HAL_I2C_Init+0x1dc>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d111      	bne.n	80015c8 <HAL_I2C_Init+0x168>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e58      	subs	r0, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	e012      	b.n	80015ee <HAL_I2C_Init+0x18e>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	0099      	lsls	r1, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Init+0x196>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e022      	b.n	800163c <HAL_I2C_Init+0x1dc>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10e      	bne.n	800161c <HAL_I2C_Init+0x1bc>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1e58      	subs	r0, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6859      	ldr	r1, [r3, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	440b      	add	r3, r1
 800160c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001610:	3301      	adds	r3, #1
 8001612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161a:	e00f      	b.n	800163c <HAL_I2C_Init+0x1dc>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	0099      	lsls	r1, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	6809      	ldr	r1, [r1, #0]
 8001640:	4313      	orrs	r3, r2
 8001642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800166a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6911      	ldr	r1, [r2, #16]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68d2      	ldr	r2, [r2, #12]
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	430b      	orrs	r3, r1
 800167e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2220      	movs	r2, #32
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	000186a0 	.word	0x000186a0
 80016d8:	001e847f 	.word	0x001e847f
 80016dc:	003d08ff 	.word	0x003d08ff
 80016e0:	431bde83 	.word	0x431bde83
 80016e4:	10624dd3 	.word	0x10624dd3

080016e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	4603      	mov	r3, r0
 80016f8:	817b      	strh	r3, [r7, #10]
 80016fa:	460b      	mov	r3, r1
 80016fc:	813b      	strh	r3, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001702:	f7ff fc17 	bl	8000f34 <HAL_GetTick>
 8001706:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b20      	cmp	r3, #32
 8001712:	f040 80d9 	bne.w	80018c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2319      	movs	r3, #25
 800171c:	2201      	movs	r2, #1
 800171e:	496d      	ldr	r1, [pc, #436]	; (80018d4 <HAL_I2C_Mem_Write+0x1ec>)
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 fcc1 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800172c:	2302      	movs	r3, #2
 800172e:	e0cc      	b.n	80018ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_I2C_Mem_Write+0x56>
 800173a:	2302      	movs	r3, #2
 800173c:	e0c5      	b.n	80018ca <HAL_I2C_Mem_Write+0x1e2>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d007      	beq.n	8001764 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001772:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2221      	movs	r2, #33	; 0x21
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a3a      	ldr	r2, [r7, #32]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001794:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4a4d      	ldr	r2, [pc, #308]	; (80018d8 <HAL_I2C_Mem_Write+0x1f0>)
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017a6:	88f8      	ldrh	r0, [r7, #6]
 80017a8:	893a      	ldrh	r2, [r7, #8]
 80017aa:	8979      	ldrh	r1, [r7, #10]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	4603      	mov	r3, r0
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 faf8 	bl	8001dac <I2C_RequestMemoryWrite>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d052      	beq.n	8001868 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e081      	b.n	80018ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 fd42 	bl	8002254 <I2C_WaitOnTXEFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00d      	beq.n	80017f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d107      	bne.n	80017ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06b      	b.n	80018ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180c:	3b01      	subs	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001818:	b29b      	uxth	r3, r3
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b04      	cmp	r3, #4
 800182e:	d11b      	bne.n	8001868 <HAL_I2C_Mem_Write+0x180>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d017      	beq.n	8001868 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	781a      	ldrb	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001852:	3b01      	subs	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1aa      	bne.n	80017c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 fd2e 	bl	80022d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00d      	beq.n	800189c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	2b04      	cmp	r3, #4
 8001886:	d107      	bne.n	8001898 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001896:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e016      	b.n	80018ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2220      	movs	r2, #32
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e000      	b.n	80018ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018c8:	2302      	movs	r3, #2
  }
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	00100002 	.word	0x00100002
 80018d8:	ffff0000 	.word	0xffff0000

080018dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	817b      	strh	r3, [r7, #10]
 80018ee:	460b      	mov	r3, r1
 80018f0:	813b      	strh	r3, [r7, #8]
 80018f2:	4613      	mov	r3, r2
 80018f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018fa:	f7ff fb1b 	bl	8000f34 <HAL_GetTick>
 80018fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b20      	cmp	r3, #32
 800190a:	f040 8244 	bne.w	8001d96 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2319      	movs	r3, #25
 8001914:	2201      	movs	r2, #1
 8001916:	4982      	ldr	r1, [pc, #520]	; (8001b20 <HAL_I2C_Mem_Read+0x244>)
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 fbc5 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
 8001926:	e237      	b.n	8001d98 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_I2C_Mem_Read+0x5a>
 8001932:	2302      	movs	r3, #2
 8001934:	e230      	b.n	8001d98 <HAL_I2C_Mem_Read+0x4bc>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	d007      	beq.n	800195c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800196a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2222      	movs	r2, #34	; 0x22
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2240      	movs	r2, #64	; 0x40
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001986:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800198c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a62      	ldr	r2, [pc, #392]	; (8001b24 <HAL_I2C_Mem_Read+0x248>)
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800199e:	88f8      	ldrh	r0, [r7, #6]
 80019a0:	893a      	ldrh	r2, [r7, #8]
 80019a2:	8979      	ldrh	r1, [r7, #10]
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	4603      	mov	r3, r0
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fa92 	bl	8001ed8 <I2C_RequestMemoryRead>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e1ec      	b.n	8001d98 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d113      	bne.n	80019ee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e1c0      	b.n	8001d70 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d11e      	bne.n	8001a34 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a06:	b672      	cpsid	i
}
 8001a08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a30:	b662      	cpsie	i
}
 8001a32:	e035      	b.n	8001aa0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d11e      	bne.n	8001a7a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a76:	b662      	cpsie	i
}
 8001a78:	e012      	b.n	8001aa0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a88:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001aa0:	e166      	b.n	8001d70 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	f200 811f 	bhi.w	8001cea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d123      	bne.n	8001afc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 fc4d 	bl	8002358 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e167      	b.n	8001d98 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001afa:	e139      	b.n	8001d70 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d152      	bne.n	8001baa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4906      	ldr	r1, [pc, #24]	; (8001b28 <HAL_I2C_Mem_Read+0x24c>)
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 faca 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e13c      	b.n	8001d98 <HAL_I2C_Mem_Read+0x4bc>
 8001b1e:	bf00      	nop
 8001b20:	00100002 	.word	0x00100002
 8001b24:	ffff0000 	.word	0xffff0000
 8001b28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b72:	b662      	cpsie	i
}
 8001b74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ba8:	e0e2      	b.n	8001d70 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	497b      	ldr	r1, [pc, #492]	; (8001da0 <HAL_I2C_Mem_Read+0x4c4>)
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fa77 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0e9      	b.n	8001d98 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c0a:	4b66      	ldr	r3, [pc, #408]	; (8001da4 <HAL_I2C_Mem_Read+0x4c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	4a65      	ldr	r2, [pc, #404]	; (8001da8 <HAL_I2C_Mem_Read+0x4cc>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0a1a      	lsrs	r2, r3, #8
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00da      	lsls	r2, r3, #3
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d118      	bne.n	8001c62 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f043 0220 	orr.w	r2, r3, #32
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c52:	b662      	cpsie	i
}
 8001c54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e09a      	b.n	8001d98 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d1d9      	bne.n	8001c24 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001cb2:	b662      	cpsie	i
}
 8001cb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ce8:	e042      	b.n	8001d70 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fb32 	bl	8002358 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e04c      	b.n	8001d98 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d118      	bne.n	8001d70 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f ae94 	bne.w	8001aa2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
  }
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	00010004 	.word	0x00010004
 8001da4:	20000000 	.word	0x20000000
 8001da8:	14f8b589 	.word	0x14f8b589

08001dac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	817b      	strh	r3, [r7, #10]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	813b      	strh	r3, [r7, #8]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f960 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00d      	beq.n	8001e0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dfc:	d103      	bne.n	8001e06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e05f      	b.n	8001eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e0a:	897b      	ldrh	r3, [r7, #10]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	6a3a      	ldr	r2, [r7, #32]
 8001e1e:	492d      	ldr	r1, [pc, #180]	; (8001ed4 <I2C_RequestMemoryWrite+0x128>)
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f998 	bl	8002156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e04c      	b.n	8001eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e48:	6a39      	ldr	r1, [r7, #32]
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 fa02 	bl	8002254 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00d      	beq.n	8001e72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d107      	bne.n	8001e6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e02b      	b.n	8001eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e78:	893b      	ldrh	r3, [r7, #8]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	611a      	str	r2, [r3, #16]
 8001e82:	e021      	b.n	8001ec8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e84:	893b      	ldrh	r3, [r7, #8]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	6a39      	ldr	r1, [r7, #32]
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f9dc 	bl	8002254 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d107      	bne.n	8001eba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e005      	b.n	8001eca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ebe:	893b      	ldrh	r3, [r7, #8]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	00010002 	.word	0x00010002

08001ed8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	817b      	strh	r3, [r7, #10]
 8001eea:	460b      	mov	r3, r1
 8001eec:	813b      	strh	r3, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f8c2 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00d      	beq.n	8001f46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f38:	d103      	bne.n	8001f42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e0aa      	b.n	800209c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f46:	897b      	ldrh	r3, [r7, #10]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	6a3a      	ldr	r2, [r7, #32]
 8001f5a:	4952      	ldr	r1, [pc, #328]	; (80020a4 <I2C_RequestMemoryRead+0x1cc>)
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f8fa 	bl	8002156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e097      	b.n	800209c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f84:	6a39      	ldr	r1, [r7, #32]
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f964 	bl	8002254 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00d      	beq.n	8001fae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d107      	bne.n	8001faa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e076      	b.n	800209c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fb4:	893b      	ldrh	r3, [r7, #8]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	e021      	b.n	8002004 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fc0:	893b      	ldrh	r3, [r7, #8]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	6a39      	ldr	r1, [r7, #32]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f93e 	bl	8002254 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00d      	beq.n	8001ffa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d107      	bne.n	8001ff6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e050      	b.n	800209c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ffa:	893b      	ldrh	r3, [r7, #8]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002006:	6a39      	ldr	r1, [r7, #32]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f923 	bl	8002254 <I2C_WaitOnTXEFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00d      	beq.n	8002030 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	2b04      	cmp	r3, #4
 800201a:	d107      	bne.n	800202c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800202a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e035      	b.n	800209c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800203e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	2200      	movs	r2, #0
 8002048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f82b 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002066:	d103      	bne.n	8002070 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e013      	b.n	800209c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002074:	897b      	ldrh	r3, [r7, #10]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	6a3a      	ldr	r2, [r7, #32]
 8002088:	4906      	ldr	r1, [pc, #24]	; (80020a4 <I2C_RequestMemoryRead+0x1cc>)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f863 	bl	8002156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	00010002 	.word	0x00010002

080020a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b8:	e025      	b.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d021      	beq.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7fe ff37 	bl	8000f34 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d116      	bne.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e023      	b.n	800214e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d10d      	bne.n	800212c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4013      	ands	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf0c      	ite	eq
 8002122:	2301      	moveq	r3, #1
 8002124:	2300      	movne	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	e00c      	b.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4013      	ands	r3, r2
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	429a      	cmp	r2, r3
 800214a:	d0b6      	beq.n	80020ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002164:	e051      	b.n	800220a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002174:	d123      	bne.n	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002184:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800218e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0204 	orr.w	r2, r3, #4
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e046      	b.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d021      	beq.n	800220a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c6:	f7fe feb5 	bl	8000f34 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d302      	bcc.n	80021dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d116      	bne.n	800220a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f043 0220 	orr.w	r2, r3, #32
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e020      	b.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d10c      	bne.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4013      	ands	r3, r2
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	e00b      	b.n	8002246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	43da      	mvns	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4013      	ands	r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf14      	ite	ne
 8002240:	2301      	movne	r3, #1
 8002242:	2300      	moveq	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d18d      	bne.n	8002166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002260:	e02d      	b.n	80022be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f8ce 	bl	8002404 <I2C_IsAcknowledgeFailed>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e02d      	b.n	80022ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d021      	beq.n	80022be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227a:	f7fe fe5b 	bl	8000f34 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	429a      	cmp	r2, r3
 8002288:	d302      	bcc.n	8002290 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d116      	bne.n	80022be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f043 0220 	orr.w	r2, r3, #32
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e007      	b.n	80022ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c8:	2b80      	cmp	r3, #128	; 0x80
 80022ca:	d1ca      	bne.n	8002262 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022e2:	e02d      	b.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f88d 	bl	8002404 <I2C_IsAcknowledgeFailed>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e02d      	b.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fa:	d021      	beq.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fc:	f7fe fe1a 	bl	8000f34 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	429a      	cmp	r2, r3
 800230a:	d302      	bcc.n	8002312 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f043 0220 	orr.w	r2, r3, #32
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e007      	b.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b04      	cmp	r3, #4
 800234c:	d1ca      	bne.n	80022e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002364:	e042      	b.n	80023ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b10      	cmp	r3, #16
 8002372:	d119      	bne.n	80023a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0210 	mvn.w	r2, #16
 800237c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e029      	b.n	80023fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a8:	f7fe fdc4 	bl	8000f34 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d302      	bcc.n	80023be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d116      	bne.n	80023ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e007      	b.n	80023fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f6:	2b40      	cmp	r3, #64	; 0x40
 80023f8:	d1b5      	bne.n	8002366 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241a:	d11b      	bne.n	8002454 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002424:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f043 0204 	orr.w	r2, r3, #4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e26c      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8087 	beq.w	800258e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002480:	4b92      	ldr	r3, [pc, #584]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b04      	cmp	r3, #4
 800248a:	d00c      	beq.n	80024a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800248c:	4b8f      	ldr	r3, [pc, #572]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d112      	bne.n	80024be <HAL_RCC_OscConfig+0x5e>
 8002498:	4b8c      	ldr	r3, [pc, #560]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a4:	d10b      	bne.n	80024be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a6:	4b89      	ldr	r3, [pc, #548]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d06c      	beq.n	800258c <HAL_RCC_OscConfig+0x12c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d168      	bne.n	800258c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e246      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x76>
 80024c8:	4b80      	ldr	r3, [pc, #512]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a7f      	ldr	r2, [pc, #508]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e02e      	b.n	8002534 <HAL_RCC_OscConfig+0xd4>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x98>
 80024de:	4b7b      	ldr	r3, [pc, #492]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7a      	ldr	r2, [pc, #488]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80024e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b78      	ldr	r3, [pc, #480]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a77      	ldr	r2, [pc, #476]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80024f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xd4>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0xbc>
 8002502:	4b72      	ldr	r3, [pc, #456]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a71      	ldr	r2, [pc, #452]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b6f      	ldr	r3, [pc, #444]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6e      	ldr	r2, [pc, #440]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xd4>
 800251c:	4b6b      	ldr	r3, [pc, #428]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a6a      	ldr	r2, [pc, #424]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b68      	ldr	r3, [pc, #416]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a67      	ldr	r2, [pc, #412]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002532:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fcfa 	bl	8000f34 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7fe fcf6 	bl	8000f34 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1fa      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b5d      	ldr	r3, [pc, #372]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xe4>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fce6 	bl	8000f34 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fce2 	bl	8000f34 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1e6      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x10c>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800259a:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025a6:	4b49      	ldr	r3, [pc, #292]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d11c      	bne.n	80025ec <HAL_RCC_OscConfig+0x18c>
 80025b2:	4b46      	ldr	r3, [pc, #280]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	4b43      	ldr	r3, [pc, #268]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x176>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1ba      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4939      	ldr	r1, [pc, #228]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	e03a      	b.n	8002662 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <HAL_RCC_OscConfig+0x270>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fc9b 	bl	8000f34 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002602:	f7fe fc97 	bl	8000f34 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e19b      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4927      	ldr	r1, [pc, #156]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <HAL_RCC_OscConfig+0x270>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe fc7a 	bl	8000f34 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe fc76 	bl	8000f34 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e17a      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d03a      	beq.n	80026e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d019      	beq.n	80026aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267c:	f7fe fc5a 	bl	8000f34 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002684:	f7fe fc56 	bl	8000f34 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e15a      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_RCC_OscConfig+0x26c>)
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026a2:	2001      	movs	r0, #1
 80026a4:	f000 fac4 	bl	8002c30 <RCC_Delay>
 80026a8:	e01c      	b.n	80026e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b0:	f7fe fc40 	bl	8000f34 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b6:	e00f      	b.n	80026d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b8:	f7fe fc3c 	bl	8000f34 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d908      	bls.n	80026d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e140      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	42420000 	.word	0x42420000
 80026d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	4b9e      	ldr	r3, [pc, #632]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e9      	bne.n	80026b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80a6 	beq.w	800283e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f6:	4b97      	ldr	r3, [pc, #604]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10d      	bne.n	800271e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	4b94      	ldr	r3, [pc, #592]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4a93      	ldr	r2, [pc, #588]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	61d3      	str	r3, [r2, #28]
 800270e:	4b91      	ldr	r3, [pc, #580]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b8e      	ldr	r3, [pc, #568]	; (8002958 <HAL_RCC_OscConfig+0x4f8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d118      	bne.n	800275c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272a:	4b8b      	ldr	r3, [pc, #556]	; (8002958 <HAL_RCC_OscConfig+0x4f8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a8a      	ldr	r2, [pc, #552]	; (8002958 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002736:	f7fe fbfd 	bl	8000f34 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273e:	f7fe fbf9 	bl	8000f34 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b64      	cmp	r3, #100	; 0x64
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0fd      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	4b81      	ldr	r3, [pc, #516]	; (8002958 <HAL_RCC_OscConfig+0x4f8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x312>
 8002764:	4b7b      	ldr	r3, [pc, #492]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a7a      	ldr	r2, [pc, #488]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6213      	str	r3, [r2, #32]
 8002770:	e02d      	b.n	80027ce <HAL_RCC_OscConfig+0x36e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x334>
 800277a:	4b76      	ldr	r3, [pc, #472]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4a75      	ldr	r2, [pc, #468]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	6213      	str	r3, [r2, #32]
 8002786:	4b73      	ldr	r3, [pc, #460]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4a72      	ldr	r2, [pc, #456]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	6213      	str	r3, [r2, #32]
 8002792:	e01c      	b.n	80027ce <HAL_RCC_OscConfig+0x36e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b05      	cmp	r3, #5
 800279a:	d10c      	bne.n	80027b6 <HAL_RCC_OscConfig+0x356>
 800279c:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a6c      	ldr	r2, [pc, #432]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	f043 0304 	orr.w	r3, r3, #4
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4a69      	ldr	r2, [pc, #420]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6213      	str	r3, [r2, #32]
 80027b4:	e00b      	b.n	80027ce <HAL_RCC_OscConfig+0x36e>
 80027b6:	4b67      	ldr	r3, [pc, #412]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a66      	ldr	r2, [pc, #408]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6213      	str	r3, [r2, #32]
 80027c2:	4b64      	ldr	r3, [pc, #400]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4a63      	ldr	r2, [pc, #396]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d015      	beq.n	8002802 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d6:	f7fe fbad 	bl	8000f34 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fe fba9 	bl	8000f34 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0ab      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f4:	4b57      	ldr	r3, [pc, #348]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ee      	beq.n	80027de <HAL_RCC_OscConfig+0x37e>
 8002800:	e014      	b.n	800282c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7fe fb97 	bl	8000f34 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe fb93 	bl	8000f34 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	; 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e095      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002820:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ee      	bne.n	800280a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800282c:	7dfb      	ldrb	r3, [r7, #23]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d105      	bne.n	800283e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002832:	4b48      	ldr	r3, [pc, #288]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4a47      	ldr	r2, [pc, #284]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8081 	beq.w	800294a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002848:	4b42      	ldr	r3, [pc, #264]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b08      	cmp	r3, #8
 8002852:	d061      	beq.n	8002918 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d146      	bne.n	80028ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285c:	4b3f      	ldr	r3, [pc, #252]	; (800295c <HAL_RCC_OscConfig+0x4fc>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fb67 	bl	8000f34 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fb63 	bl	8000f34 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e067      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	4b35      	ldr	r3, [pc, #212]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002890:	d108      	bne.n	80028a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002892:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	492d      	ldr	r1, [pc, #180]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a19      	ldr	r1, [r3, #32]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	430b      	orrs	r3, r1
 80028b6:	4927      	ldr	r1, [pc, #156]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <HAL_RCC_OscConfig+0x4fc>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7fe fb37 	bl	8000f34 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe fb33 	bl	8000f34 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e037      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x46a>
 80028e8:	e02f      	b.n	800294a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <HAL_RCC_OscConfig+0x4fc>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fb20 	bl	8000f34 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fb1c 	bl	8000f34 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e020      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x498>
 8002916:	e018      	b.n	800294a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e013      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x4f4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	429a      	cmp	r2, r3
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	40007000 	.word	0x40007000
 800295c:	42420060 	.word	0x42420060

08002960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0d0      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d910      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 0207 	bic.w	r2, r3, #7
 800298a:	4965      	ldr	r1, [pc, #404]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b63      	ldr	r3, [pc, #396]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0b8      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029bc:	4b59      	ldr	r3, [pc, #356]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4a58      	ldr	r2, [pc, #352]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d4:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a52      	ldr	r2, [pc, #328]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	494d      	ldr	r1, [pc, #308]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d040      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d115      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e07f      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e073      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06b      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4936      	ldr	r1, [pc, #216]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a50:	f7fe fa70 	bl	8000f34 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe fa6c 	bl	8000f34 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e053      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 020c 	and.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1eb      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d210      	bcs.n	8002ab0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 0207 	bic.w	r2, r3, #7
 8002a96:	4922      	ldr	r1, [pc, #136]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e032      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4916      	ldr	r1, [pc, #88]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	490e      	ldr	r1, [pc, #56]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aee:	f000 f821 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002af2:	4602      	mov	r2, r0
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	490a      	ldr	r1, [pc, #40]	; (8002b28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	5ccb      	ldrb	r3, [r1, r3]
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <HAL_RCC_ClockConfig+0x1cc>)
 8002b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCC_ClockConfig+0x1d0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe f9ce 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40021000 	.word	0x40021000
 8002b28:	08002d08 	.word	0x08002d08
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000004 	.word	0x20000004

08002b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b34:	b490      	push	{r4, r7}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b3a:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b3c:	1d3c      	adds	r4, r7, #4
 8002b3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b44:	f240 2301 	movw	r3, #513	; 0x201
 8002b48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b5e:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x40>
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x46>
 8002b72:	e02d      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b76:	623b      	str	r3, [r7, #32]
      break;
 8002b78:	e02d      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	0c9b      	lsrs	r3, r3, #18
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b86:	4413      	add	r3, r2
 8002b88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c5b      	lsrs	r3, r3, #17
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bb2:	fb02 f203 	mul.w	r2, r2, r3
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	e004      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	623b      	str	r3, [r7, #32]
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd2:	623b      	str	r3, [r7, #32]
      break;
 8002bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3728      	adds	r7, #40	; 0x28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc90      	pop	{r4, r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	08002cf8 	.word	0x08002cf8
 8002be8:	40021000 	.word	0x40021000
 8002bec:	007a1200 	.word	0x007a1200
 8002bf0:	003d0900 	.word	0x003d0900

08002bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	20000000 	.word	0x20000000

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c0c:	f7ff fff2 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4903      	ldr	r1, [pc, #12]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	08002d18 	.word	0x08002d18

08002c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <RCC_Delay+0x34>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <RCC_Delay+0x38>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0a5b      	lsrs	r3, r3, #9
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c4c:	bf00      	nop
  }
  while (Delay --);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	60fa      	str	r2, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f9      	bne.n	8002c4c <RCC_Delay+0x1c>
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	20000000 	.word	0x20000000
 8002c68:	10624dd3 	.word	0x10624dd3

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	2600      	movs	r6, #0
 8002c70:	4d0c      	ldr	r5, [pc, #48]	; (8002ca4 <__libc_init_array+0x38>)
 8002c72:	4c0d      	ldr	r4, [pc, #52]	; (8002ca8 <__libc_init_array+0x3c>)
 8002c74:	1b64      	subs	r4, r4, r5
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	42a6      	cmp	r6, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	f000 f830 	bl	8002ce0 <_init>
 8002c80:	2600      	movs	r6, #0
 8002c82:	4d0a      	ldr	r5, [pc, #40]	; (8002cac <__libc_init_array+0x40>)
 8002c84:	4c0a      	ldr	r4, [pc, #40]	; (8002cb0 <__libc_init_array+0x44>)
 8002c86:	1b64      	subs	r4, r4, r5
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	42a6      	cmp	r6, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c94:	4798      	blx	r3
 8002c96:	3601      	adds	r6, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9e:	4798      	blx	r3
 8002ca0:	3601      	adds	r6, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	08002d20 	.word	0x08002d20
 8002ca8:	08002d20 	.word	0x08002d20
 8002cac:	08002d20 	.word	0x08002d20
 8002cb0:	08002d24 	.word	0x08002d24

08002cb4 <memcpy>:
 8002cb4:	440a      	add	r2, r1
 8002cb6:	4291      	cmp	r1, r2
 8002cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cbc:	d100      	bne.n	8002cc0 <memcpy+0xc>
 8002cbe:	4770      	bx	lr
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cc6:	4291      	cmp	r1, r2
 8002cc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ccc:	d1f9      	bne.n	8002cc2 <memcpy+0xe>
 8002cce:	bd10      	pop	{r4, pc}

08002cd0 <memset>:
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4402      	add	r2, r0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d100      	bne.n	8002cda <memset+0xa>
 8002cd8:	4770      	bx	lr
 8002cda:	f803 1b01 	strb.w	r1, [r3], #1
 8002cde:	e7f9      	b.n	8002cd4 <memset+0x4>

08002ce0 <_init>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr

08002cec <_fini>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr
