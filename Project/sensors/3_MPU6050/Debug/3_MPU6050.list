
3_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002668  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800279c  0800279c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800279c  0800279c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800279c  0800279c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800279c  0800279c  0001279c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080027b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080027b0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dac  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000162f  00000000  00000000  00027de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  00029410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  00029b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016afe  00000000  00000000  0002a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f49  00000000  00000000  00040cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081db7  00000000  00000000  00049c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb9de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c9c  00000000  00000000  000cba34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800275c 	.word	0x0800275c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800275c 	.word	0x0800275c

0800014c <i2cReadBytes>:
#include "I2C.h"
#include "math.h"
void i2cReadBytes(uint8_t devAddr,uint8_t regAddr,uint16_t bytes,uint8_t *buffer,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af04      	add	r7, sp, #16
 8000152:	603b      	str	r3, [r7, #0]
 8000154:	4603      	mov	r3, r0
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	460b      	mov	r3, r1
 800015a:	71bb      	strb	r3, [r7, #6]
 800015c:	4613      	mov	r3, r2
 800015e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c, devAddr<<1, regAddr, 1, buffer, bytes, 1000);
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	b29b      	uxth	r3, r3
 8000164:	005b      	lsls	r3, r3, #1
 8000166:	b299      	uxth	r1, r3
 8000168:	79bb      	ldrb	r3, [r7, #6]
 800016a:	b29a      	uxth	r2, r3
 800016c:	f107 0014 	add.w	r0, r7, #20
 8000170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000174:	9302      	str	r3, [sp, #8]
 8000176:	88bb      	ldrh	r3, [r7, #4]
 8000178:	9301      	str	r3, [sp, #4]
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	9300      	str	r3, [sp, #0]
 800017e:	2301      	movs	r3, #1
 8000180:	f001 f8ea 	bl	8001358 <HAL_I2C_Mem_Read>
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <i2cReadByte>:
uint8_t i2cReadByte(uint8_t devAddr,uint8_t regAddr,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 800018c:	b082      	sub	sp, #8
 800018e:	b580      	push	{r7, lr}
 8000190:	b088      	sub	sp, #32
 8000192:	af04      	add	r7, sp, #16
 8000194:	61fb      	str	r3, [r7, #28]
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
 800019a:	460b      	mov	r3, r1
 800019c:	71bb      	strb	r3, [r7, #6]
 800019e:	4613      	mov	r3, r2
 80001a0:	80bb      	strh	r3, [r7, #4]
	uint8_t dByte;
	HAL_I2C_Mem_Read(&hi2c, devAddr<<1, regAddr, 1, &dByte, 1, timeout);
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	b29b      	uxth	r3, r3
 80001a6:	005b      	lsls	r3, r3, #1
 80001a8:	b299      	uxth	r1, r3
 80001aa:	79bb      	ldrb	r3, [r7, #6]
 80001ac:	b29a      	uxth	r2, r3
 80001ae:	88bb      	ldrh	r3, [r7, #4]
 80001b0:	f107 001c 	add.w	r0, r7, #28
 80001b4:	9302      	str	r3, [sp, #8]
 80001b6:	2301      	movs	r3, #1
 80001b8:	9301      	str	r3, [sp, #4]
 80001ba:	f107 030f 	add.w	r3, r7, #15
 80001be:	9300      	str	r3, [sp, #0]
 80001c0:	2301      	movs	r3, #1
 80001c2:	f001 f8c9 	bl	8001358 <HAL_I2C_Mem_Read>
	return dByte;
 80001c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001d2:	b002      	add	sp, #8
 80001d4:	4770      	bx	lr

080001d6 <i2cWriteByte>:
void i2cWriteByte(uint8_t devAddr,uint8_t regAddr,uint8_t data,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 80001d6:	b590      	push	{r4, r7, lr}
 80001d8:	b087      	sub	sp, #28
 80001da:	af04      	add	r7, sp, #16
 80001dc:	4604      	mov	r4, r0
 80001de:	4608      	mov	r0, r1
 80001e0:	4611      	mov	r1, r2
 80001e2:	461a      	mov	r2, r3
 80001e4:	4623      	mov	r3, r4
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	4603      	mov	r3, r0
 80001ea:	71bb      	strb	r3, [r7, #6]
 80001ec:	460b      	mov	r3, r1
 80001ee:	717b      	strb	r3, [r7, #5]
 80001f0:	4613      	mov	r3, r2
 80001f2:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c, devAddr<<1|1, regAddr, 1, &data, 1, timeout);
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	005b      	lsls	r3, r3, #1
 80001f8:	b21b      	sxth	r3, r3
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	b21b      	sxth	r3, r3
 8000200:	b299      	uxth	r1, r3
 8000202:	79bb      	ldrb	r3, [r7, #6]
 8000204:	b29a      	uxth	r2, r3
 8000206:	887b      	ldrh	r3, [r7, #2]
 8000208:	9302      	str	r3, [sp, #8]
 800020a:	2301      	movs	r3, #1
 800020c:	9301      	str	r3, [sp, #4]
 800020e:	1d7b      	adds	r3, r7, #5
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2301      	movs	r3, #1
 8000214:	f107 0018 	add.w	r0, r7, #24
 8000218:	f000 ffa4 	bl	8001164 <HAL_I2C_Mem_Write>
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	bd90      	pop	{r4, r7, pc}

08000224 <i2cWriteBits>:
void i2cWriteBits(uint8_t devAddr,uint8_t regAddr,uint8_t data,uint8_t bitStart,uint8_t length,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 8000224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000228:	b09a      	sub	sp, #104	; 0x68
 800022a:	af16      	add	r7, sp, #88	; 0x58
 800022c:	4604      	mov	r4, r0
 800022e:	4608      	mov	r0, r1
 8000230:	4611      	mov	r1, r2
 8000232:	461a      	mov	r2, r3
 8000234:	4623      	mov	r3, r4
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4603      	mov	r3, r0
 800023a:	71bb      	strb	r3, [r7, #6]
 800023c:	460b      	mov	r3, r1
 800023e:	717b      	strb	r3, [r7, #5]
 8000240:	4613      	mov	r3, r2
 8000242:	713b      	strb	r3, [r7, #4]
	uint8_t dByte =  i2cReadByte(devAddr<<1, regAddr, timeout, hi2c);
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	b2dc      	uxtb	r4, r3
 800024a:	8dbe      	ldrh	r6, [r7, #44]	; 0x2c
 800024c:	79bd      	ldrb	r5, [r7, #6]
 800024e:	4668      	mov	r0, sp
 8000250:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000254:	2250      	movs	r2, #80	; 0x50
 8000256:	4619      	mov	r1, r3
 8000258:	f002 fa6a 	bl	8002730 <memcpy>
 800025c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800025e:	4632      	mov	r2, r6
 8000260:	4629      	mov	r1, r5
 8000262:	4620      	mov	r0, r4
 8000264:	f7ff ff92 	bl	800018c <i2cReadByte>
 8000268:	4603      	mov	r3, r0
 800026a:	73fb      	strb	r3, [r7, #15]
	uint8_t bMask = ((1<<length)-1)<<(bitStart+1-length);// or bMask = (0xff>>(7-bitStart+bitStart-length+1)<<(bitStart-length+1)) &&0xff
 800026c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000270:	2201      	movs	r2, #1
 8000272:	fa02 f303 	lsl.w	r3, r2, r3
 8000276:	1e5a      	subs	r2, r3, #1
 8000278:	793b      	ldrb	r3, [r7, #4]
 800027a:	1c59      	adds	r1, r3, #1
 800027c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000280:	1acb      	subs	r3, r1, r3
 8000282:	fa02 f303 	lsl.w	r3, r2, r3
 8000286:	73bb      	strb	r3, [r7, #14]
	data <<=(bitStart-length +1);
 8000288:	797a      	ldrb	r2, [r7, #5]
 800028a:	7939      	ldrb	r1, [r7, #4]
 800028c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000290:	1acb      	subs	r3, r1, r3
 8000292:	3301      	adds	r3, #1
 8000294:	fa02 f303 	lsl.w	r3, r2, r3
 8000298:	717b      	strb	r3, [r7, #5]
	dByte &= bMask;
 800029a:	7bfa      	ldrb	r2, [r7, #15]
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	4013      	ands	r3, r2
 80002a0:	73fb      	strb	r3, [r7, #15]
	dByte |= data;
 80002a2:	7bfa      	ldrb	r2, [r7, #15]
 80002a4:	797b      	ldrb	r3, [r7, #5]
 80002a6:	4313      	orrs	r3, r2
 80002a8:	73fb      	strb	r3, [r7, #15]
	i2cWriteByte(devAddr, regAddr, dByte, timeout, hi2c);
 80002aa:	f8b7 802c 	ldrh.w	r8, [r7, #44]	; 0x2c
 80002ae:	7bfe      	ldrb	r6, [r7, #15]
 80002b0:	79bd      	ldrb	r5, [r7, #6]
 80002b2:	79fc      	ldrb	r4, [r7, #7]
 80002b4:	4668      	mov	r0, sp
 80002b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ba:	2254      	movs	r2, #84	; 0x54
 80002bc:	4619      	mov	r1, r3
 80002be:	f002 fa37 	bl	8002730 <memcpy>
 80002c2:	4643      	mov	r3, r8
 80002c4:	4632      	mov	r2, r6
 80002c6:	4629      	mov	r1, r5
 80002c8:	4620      	mov	r0, r4
 80002ca:	f7ff ff84 	bl	80001d6 <i2cWriteByte>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080002d8 <i2cWriteBit>:
void i2cWriteBit(uint8_t devAddr,uint8_t regAdd,uint8_t data,uint8_t bitIndex ,uint16_t timeout,I2C_HandleTypeDef hi2c)
{
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	b099      	sub	sp, #100	; 0x64
 80002dc:	af14      	add	r7, sp, #80	; 0x50
 80002de:	4604      	mov	r4, r0
 80002e0:	4608      	mov	r0, r1
 80002e2:	4611      	mov	r1, r2
 80002e4:	461a      	mov	r2, r3
 80002e6:	4623      	mov	r3, r4
 80002e8:	71fb      	strb	r3, [r7, #7]
 80002ea:	4603      	mov	r3, r0
 80002ec:	71bb      	strb	r3, [r7, #6]
 80002ee:	460b      	mov	r3, r1
 80002f0:	717b      	strb	r3, [r7, #5]
 80002f2:	4613      	mov	r3, r2
 80002f4:	713b      	strb	r3, [r7, #4]
	uint8_t dByte = i2cReadByte(devAddr, regAdd, timeout, hi2c);
 80002f6:	8d3e      	ldrh	r6, [r7, #40]	; 0x28
 80002f8:	79bd      	ldrb	r5, [r7, #6]
 80002fa:	79fc      	ldrb	r4, [r7, #7]
 80002fc:	4668      	mov	r0, sp
 80002fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000302:	2250      	movs	r2, #80	; 0x50
 8000304:	4619      	mov	r1, r3
 8000306:	f002 fa13 	bl	8002730 <memcpy>
 800030a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800030c:	4632      	mov	r2, r6
 800030e:	4629      	mov	r1, r5
 8000310:	4620      	mov	r0, r4
 8000312:	f7ff ff3b 	bl	800018c <i2cReadByte>
 8000316:	4603      	mov	r3, r0
 8000318:	73fb      	strb	r3, [r7, #15]
	uint8_t bMask = ~(1<<bitIndex);
 800031a:	793b      	ldrb	r3, [r7, #4]
 800031c:	2201      	movs	r2, #1
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	43db      	mvns	r3, r3
 8000326:	73bb      	strb	r3, [r7, #14]
	data <<= bitIndex;
 8000328:	797a      	ldrb	r2, [r7, #5]
 800032a:	793b      	ldrb	r3, [r7, #4]
 800032c:	fa02 f303 	lsl.w	r3, r2, r3
 8000330:	717b      	strb	r3, [r7, #5]
	dByte &= bMask;
 8000332:	7bfa      	ldrb	r2, [r7, #15]
 8000334:	7bbb      	ldrb	r3, [r7, #14]
 8000336:	4013      	ands	r3, r2
 8000338:	73fb      	strb	r3, [r7, #15]
	dByte |= data;
 800033a:	7bfa      	ldrb	r2, [r7, #15]
 800033c:	797b      	ldrb	r3, [r7, #5]
 800033e:	4313      	orrs	r3, r2
 8000340:	73fb      	strb	r3, [r7, #15]
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b097      	sub	sp, #92	; 0x5c
 8000350:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000352:	f000 fad5 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000356:	f000 f84b 	bl	80003f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035a:	f000 f8b3 	bl	80004c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800035e:	f000 f883 	bl	8000468 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  initI2C(hi2c1);
 8000362:	4c1c      	ldr	r4, [pc, #112]	; (80003d4 <main+0x88>)
 8000364:	4668      	mov	r0, sp
 8000366:	f104 0310 	add.w	r3, r4, #16
 800036a:	2244      	movs	r2, #68	; 0x44
 800036c:	4619      	mov	r1, r3
 800036e:	f002 f9df 	bl	8002730 <memcpy>
 8000372:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000376:	f000 f8d9 	bl	800052c <initI2C>
  initialize();
 800037a:	f000 f985 	bl	8000688 <initialize>
  HAL_Delay(1);
 800037e:	2001      	movs	r0, #1
 8000380:	f000 fb20 	bl	80009c4 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//  HAL_I2C_R
	 // HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS<<1, 0x75, 1, &check, 1, 1000);
	  if(deviceIsAvailable())
 8000384:	f000 f960 	bl	8000648 <deviceIsAvailable>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d01c      	beq.n	80003c8 <main+0x7c>
	  {

		  uint8_t dBytePwr = i2cReadByte(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1000, hi2c1);
 800038e:	4c11      	ldr	r4, [pc, #68]	; (80003d4 <main+0x88>)
 8000390:	4668      	mov	r0, sp
 8000392:	1d23      	adds	r3, r4, #4
 8000394:	2250      	movs	r2, #80	; 0x50
 8000396:	4619      	mov	r1, r3
 8000398:	f002 f9ca 	bl	8002730 <memcpy>
 800039c:	6823      	ldr	r3, [r4, #0]
 800039e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003a2:	216b      	movs	r1, #107	; 0x6b
 80003a4:	2068      	movs	r0, #104	; 0x68
 80003a6:	f7ff fef1 	bl	800018c <i2cReadByte>
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
		  HAL_Delay(1);
 80003ae:	2001      	movs	r0, #1
 80003b0:	f000 fb08 	bl	80009c4 <HAL_Delay>
		  getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <main+0x8c>)
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <main+0x90>)
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <main+0x94>)
 80003be:	4a09      	ldr	r2, [pc, #36]	; (80003e4 <main+0x98>)
 80003c0:	4909      	ldr	r1, [pc, #36]	; (80003e8 <main+0x9c>)
 80003c2:	480a      	ldr	r0, [pc, #40]	; (80003ec <main+0xa0>)
 80003c4:	f000 f970 	bl	80006a8 <getMotion6>
	  }
	//  HAL_I2C_Mem_Write(&hi2c1, DEVIDEADDRESS<<1|WRITE, 0x6B, 1, , Size, Timeout)

	  HAL_Delay(1000);
 80003c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003cc:	f000 fafa 	bl	80009c4 <HAL_Delay>
	  if(deviceIsAvailable())
 80003d0:	e7d8      	b.n	8000384 <main+0x38>
 80003d2:	bf00      	nop
 80003d4:	20000048 	.word	0x20000048
 80003d8:	200000a4 	.word	0x200000a4
 80003dc:	2000009c 	.word	0x2000009c
 80003e0:	200000a6 	.word	0x200000a6
 80003e4:	2000009e 	.word	0x2000009e
 80003e8:	200000a8 	.word	0x200000a8
 80003ec:	200000a0 	.word	0x200000a0

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b090      	sub	sp, #64	; 0x40
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	f107 0318 	add.w	r3, r7, #24
 80003fa:	2228      	movs	r2, #40	; 0x28
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 f9a4 	bl	800274c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000412:	2302      	movs	r3, #2
 8000414:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000416:	2301      	movs	r3, #1
 8000418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041a:	2310      	movs	r3, #16
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800041e:	2300      	movs	r3, #0
 8000420:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000422:	f107 0318 	add.w	r3, r7, #24
 8000426:	4618      	mov	r0, r3
 8000428:	f001 fd58 	bl	8001edc <HAL_RCC_OscConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000432:	f000 f875 	bl	8000520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000436:	230f      	movs	r3, #15
 8000438:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800043a:	2300      	movs	r3, #0
 800043c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f001 ffc4 	bl	80023dc <HAL_RCC_ClockConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800045a:	f000 f861 	bl	8000520 <Error_Handler>
  }
}
 800045e:	bf00      	nop
 8000460:	3740      	adds	r7, #64	; 0x40
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_I2C1_Init+0x50>)
 800046e:	4a13      	ldr	r2, [pc, #76]	; (80004bc <MX_I2C1_Init+0x54>)
 8000470:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_I2C1_Init+0x50>)
 8000474:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <MX_I2C1_Init+0x58>)
 8000476:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_I2C1_Init+0x50>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_I2C1_Init+0x50>)
 8000480:	2200      	movs	r2, #0
 8000482:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_I2C1_Init+0x50>)
 8000486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800048a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <MX_I2C1_Init+0x50>)
 800048e:	2200      	movs	r2, #0
 8000490:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_I2C1_Init+0x50>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <MX_I2C1_Init+0x50>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_I2C1_Init+0x50>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <MX_I2C1_Init+0x50>)
 80004a6:	f000 fd19 	bl	8000edc <HAL_I2C_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004b0:	f000 f836 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000048 	.word	0x20000048
 80004bc:	40005400 	.word	0x40005400
 80004c0:	000186a0 	.word	0x000186a0

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ca:	4b14      	ldr	r3, [pc, #80]	; (800051c <MX_GPIO_Init+0x58>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a13      	ldr	r2, [pc, #76]	; (800051c <MX_GPIO_Init+0x58>)
 80004d0:	f043 0320 	orr.w	r3, r3, #32
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_GPIO_Init+0x58>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0320 	and.w	r3, r3, #32
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_GPIO_Init+0x58>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a0d      	ldr	r2, [pc, #52]	; (800051c <MX_GPIO_Init+0x58>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_GPIO_Init+0x58>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_GPIO_Init+0x58>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a07      	ldr	r2, [pc, #28]	; (800051c <MX_GPIO_Init+0x58>)
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <MX_GPIO_Init+0x58>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f003 0308 	and.w	r3, r3, #8
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	e7fe      	b.n	8000528 <Error_Handler+0x8>
	...

0800052c <initI2C>:
#include "mpu6050.h"
#include "I2C.h"
I2C_HandleTypeDef hi2cx;
void initI2C(I2C_HandleTypeDef _hi2c)
{
 800052c:	b084      	sub	sp, #16
 800052e:	b580      	push	{r7, lr}
 8000530:	af00      	add	r7, sp, #0
 8000532:	f107 0c08 	add.w	ip, r7, #8
 8000536:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2cx = _hi2c;
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <initI2C+0x2c>)
 800053c:	4618      	mov	r0, r3
 800053e:	f107 0308 	add.w	r3, r7, #8
 8000542:	2254      	movs	r2, #84	; 0x54
 8000544:	4619      	mov	r1, r3
 8000546:	f002 f8f3 	bl	8002730 <memcpy>
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000552:	b004      	add	sp, #16
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	200000ac 	.word	0x200000ac

0800055c <setClockSource>:
void setClockSource(uint8_t sourse)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b09b      	sub	sp, #108	; 0x6c
 8000560:	af18      	add	r7, sp, #96	; 0x60
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	i2cWriteBits(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, sourse, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, 200, hi2cx);
 8000566:	79fc      	ldrb	r4, [r7, #7]
 8000568:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <setClockSource+0x38>)
 800056a:	ab02      	add	r3, sp, #8
 800056c:	4611      	mov	r1, r2
 800056e:	2254      	movs	r2, #84	; 0x54
 8000570:	4618      	mov	r0, r3
 8000572:	f002 f8dd 	bl	8002730 <memcpy>
 8000576:	23c8      	movs	r3, #200	; 0xc8
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2303      	movs	r3, #3
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2302      	movs	r3, #2
 8000580:	4622      	mov	r2, r4
 8000582:	216b      	movs	r1, #107	; 0x6b
 8000584:	2068      	movs	r0, #104	; 0x68
 8000586:	f7ff fe4d 	bl	8000224 <i2cWriteBits>
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bd90      	pop	{r4, r7, pc}
 8000592:	bf00      	nop
 8000594:	200000ac 	.word	0x200000ac

08000598 <setSeepEnable>:
void setSeepEnable(uint8_t permit)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b099      	sub	sp, #100	; 0x64
 800059c:	af16      	add	r7, sp, #88	; 0x58
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	i2cWriteBit(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, permit, MPU6050_PWR1_SLEEP_BIT, 200, hi2cx);
 80005a2:	79fc      	ldrb	r4, [r7, #7]
 80005a4:	4a09      	ldr	r2, [pc, #36]	; (80005cc <setSeepEnable+0x34>)
 80005a6:	ab01      	add	r3, sp, #4
 80005a8:	4611      	mov	r1, r2
 80005aa:	2254      	movs	r2, #84	; 0x54
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 f8bf 	bl	8002730 <memcpy>
 80005b2:	23c8      	movs	r3, #200	; 0xc8
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2306      	movs	r3, #6
 80005b8:	4622      	mov	r2, r4
 80005ba:	216b      	movs	r1, #107	; 0x6b
 80005bc:	2068      	movs	r0, #104	; 0x68
 80005be:	f7ff fe8b 	bl	80002d8 <i2cWriteBit>
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd90      	pop	{r4, r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000ac 	.word	0x200000ac

080005d0 <setFullScaleGyroRange>:
void setFullScaleGyroRange(uint8_t range)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b09b      	sub	sp, #108	; 0x6c
 80005d4:	af18      	add	r7, sp, #96	; 0x60
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	i2cWriteBits(MPU6050_ADDRESS, MPU6050_RA_GYR_CONF, range, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, 200, hi2cx);
 80005da:	79fc      	ldrb	r4, [r7, #7]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <setFullScaleGyroRange+0x38>)
 80005de:	ab02      	add	r3, sp, #8
 80005e0:	4611      	mov	r1, r2
 80005e2:	2254      	movs	r2, #84	; 0x54
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 f8a3 	bl	8002730 <memcpy>
 80005ea:	23c8      	movs	r3, #200	; 0xc8
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2304      	movs	r3, #4
 80005f4:	4622      	mov	r2, r4
 80005f6:	211b      	movs	r1, #27
 80005f8:	2068      	movs	r0, #104	; 0x68
 80005fa:	f7ff fe13 	bl	8000224 <i2cWriteBits>
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bd90      	pop	{r4, r7, pc}
 8000606:	bf00      	nop
 8000608:	200000ac 	.word	0x200000ac

0800060c <setFullScaleAccelRange>:
void setFullScaleAccelRange(uint8_t range)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b09b      	sub	sp, #108	; 0x6c
 8000610:	af18      	add	r7, sp, #96	; 0x60
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	i2cWriteBits(MPU6050_ADDRESS, MPU6050_RA_ACC_CONF, range, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, 200, hi2cx);
 8000616:	79fc      	ldrb	r4, [r7, #7]
 8000618:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <setFullScaleAccelRange+0x38>)
 800061a:	ab02      	add	r3, sp, #8
 800061c:	4611      	mov	r1, r2
 800061e:	2254      	movs	r2, #84	; 0x54
 8000620:	4618      	mov	r0, r3
 8000622:	f002 f885 	bl	8002730 <memcpy>
 8000626:	23c8      	movs	r3, #200	; 0xc8
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2302      	movs	r3, #2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	4622      	mov	r2, r4
 8000632:	211c      	movs	r1, #28
 8000634:	2068      	movs	r0, #104	; 0x68
 8000636:	f7ff fdf5 	bl	8000224 <i2cWriteBits>
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bd90      	pop	{r4, r7, pc}
 8000642:	bf00      	nop
 8000644:	200000ac 	.word	0x200000ac

08000648 <deviceIsAvailable>:
uint8_t deviceIsAvailable()
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b097      	sub	sp, #92	; 0x5c
 800064c:	af14      	add	r7, sp, #80	; 0x50
	uint8_t dByte = i2cReadByte(MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1000, hi2cx);
 800064e:	4c0d      	ldr	r4, [pc, #52]	; (8000684 <deviceIsAvailable+0x3c>)
 8000650:	4668      	mov	r0, sp
 8000652:	1d23      	adds	r3, r4, #4
 8000654:	2250      	movs	r2, #80	; 0x50
 8000656:	4619      	mov	r1, r3
 8000658:	f002 f86a 	bl	8002730 <memcpy>
 800065c:	6823      	ldr	r3, [r4, #0]
 800065e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000662:	2175      	movs	r1, #117	; 0x75
 8000664:	2068      	movs	r0, #104	; 0x68
 8000666:	f7ff fd91 	bl	800018c <i2cReadByte>
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
//	HAL_I2C_Mem_Write(&hi2cx, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I,MPU6050_RA_WHO_AM_I_SIZE , &dByte, 1, 1000);
	if(dByte == MPU6050_ADDRESS)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b68      	cmp	r3, #104	; 0x68
 8000672:	d101      	bne.n	8000678 <deviceIsAvailable+0x30>
		return 1;
 8000674:	2301      	movs	r3, #1
 8000676:	e000      	b.n	800067a <deviceIsAvailable+0x32>
	else return 0;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	bf00      	nop
 8000684:	200000ac 	.word	0x200000ac

08000688 <initialize>:
void initialize()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff ff65 	bl	800055c <setClockSource>
	setSeepEnable(0);
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff ff80 	bl	8000598 <setSeepEnable>
	setFullScaleGyroRange(MPU6050_GYRO_FS_SEL_250);
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ff99 	bl	80005d0 <setFullScaleGyroRange>
	setFullScaleAccelRange(MPU6050_ACCL_AFS_SEL_2G);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ffb4 	bl	800060c <setFullScaleAccelRange>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <getMotion6>:
void getMotion6(uint16_t *ax, uint16_t *ay, uint16_t *az,uint16_t *gx, uint16_t *gy,uint16_t *gz)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09a      	sub	sp, #104	; 0x68
 80006ac:	af16      	add	r7, sp, #88	; 0x58
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
	i2cReadBytes(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H,14 , i2cBuffer, 2000, hi2cx);
 80006b6:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <getMotion6+0xc8>)
 80006b8:	ab01      	add	r3, sp, #4
 80006ba:	4611      	mov	r1, r2
 80006bc:	2254      	movs	r2, #84	; 0x54
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 f836 	bl	8002730 <memcpy>
 80006c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <getMotion6+0xcc>)
 80006cc:	220e      	movs	r2, #14
 80006ce:	213b      	movs	r1, #59	; 0x3b
 80006d0:	2068      	movs	r0, #104	; 0x68
 80006d2:	f7ff fd3b 	bl	800014c <i2cReadBytes>
    *ax = (int16_t)(i2cBuffer[0] << 8 )| i2cBuffer[1];
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <getMotion6+0xcc>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	b21a      	sxth	r2, r3
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <getMotion6+0xcc>)
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	801a      	strh	r2, [r3, #0]
	*ay = (int16_t)(i2cBuffer[2]<<8 )| i2cBuffer[3];
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <getMotion6+0xcc>)
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	021b      	lsls	r3, r3, #8
 80006f4:	b21a      	sxth	r2, r3
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <getMotion6+0xcc>)
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b21b      	sxth	r3, r3
 8000700:	b29a      	uxth	r2, r3
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
	*az = (int16_t)(i2cBuffer[4]<<8 )| i2cBuffer[5];
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <getMotion6+0xcc>)
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b21a      	sxth	r2, r3
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <getMotion6+0xcc>)
 8000710:	795b      	ldrb	r3, [r3, #5]
 8000712:	b21b      	sxth	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b21b      	sxth	r3, r3
 8000718:	b29a      	uxth	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	801a      	strh	r2, [r3, #0]
	*gx = (int16_t)(i2cBuffer[8]<<8 )| i2cBuffer[9];
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <getMotion6+0xcc>)
 8000720:	7a1b      	ldrb	r3, [r3, #8]
 8000722:	021b      	lsls	r3, r3, #8
 8000724:	b21a      	sxth	r2, r3
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <getMotion6+0xcc>)
 8000728:	7a5b      	ldrb	r3, [r3, #9]
 800072a:	b21b      	sxth	r3, r3
 800072c:	4313      	orrs	r3, r2
 800072e:	b21b      	sxth	r3, r3
 8000730:	b29a      	uxth	r2, r3
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	801a      	strh	r2, [r3, #0]
	*gy = (int16_t)(i2cBuffer[10]<<8 )| i2cBuffer[11];
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <getMotion6+0xcc>)
 8000738:	7a9b      	ldrb	r3, [r3, #10]
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	b21a      	sxth	r2, r3
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <getMotion6+0xcc>)
 8000740:	7adb      	ldrb	r3, [r3, #11]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	801a      	strh	r2, [r3, #0]
	*gz = (int16_t)(i2cBuffer[12]<<8 )| i2cBuffer[13];
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <getMotion6+0xcc>)
 8000750:	7b1b      	ldrb	r3, [r3, #12]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21a      	sxth	r2, r3
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <getMotion6+0xcc>)
 8000758:	7b5b      	ldrb	r3, [r3, #13]
 800075a:	b21b      	sxth	r3, r3
 800075c:	4313      	orrs	r3, r2
 800075e:	b21b      	sxth	r3, r3
 8000760:	b29a      	uxth	r2, r3
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	801a      	strh	r2, [r3, #0]

}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000ac 	.word	0x200000ac
 8000774:	20000028 	.word	0x20000028

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_MspInit+0x5c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <HAL_MspInit+0x5c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_MspInit+0x5c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x5c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x5c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x5c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_MspInit+0x60>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_MspInit+0x60>)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010000 	.word	0x40010000

080007dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <HAL_I2C_MspInit+0x70>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d123      	bne.n	8000844 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_I2C_MspInit+0x74>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <HAL_I2C_MspInit+0x74>)
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_I2C_MspInit+0x74>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0308 	and.w	r3, r3, #8
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000814:	23c0      	movs	r3, #192	; 0xc0
 8000816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000818:	2312      	movs	r3, #18
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	4619      	mov	r1, r3
 8000826:	480b      	ldr	r0, [pc, #44]	; (8000854 <HAL_I2C_MspInit+0x78>)
 8000828:	f000 f9d4 	bl	8000bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_I2C_MspInit+0x74>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_I2C_MspInit+0x74>)
 8000832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000836:	61d3      	str	r3, [r2, #28]
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_I2C_MspInit+0x74>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40005400 	.word	0x40005400
 8000850:	40021000 	.word	0x40021000
 8000854:	40010c00 	.word	0x40010c00

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089e:	f000 f875 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
	...

080008b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008b6:	e003      	b.n	80008c0 <LoopCopyDataInit>

080008b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008be:	3104      	adds	r1, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008c8:	d3f6      	bcc.n	80008b8 <CopyDataInit>
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008cc:	e002      	b.n	80008d4 <LoopFillZerobss>

080008ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008d0:	f842 3b04 	str.w	r3, [r2], #4

080008d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008d8:	d3f9      	bcc.n	80008ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008da:	f7ff ffe4 	bl	80008a6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008de:	f001 ff03 	bl	80026e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e2:	f7ff fd33 	bl	800034c <main>
  bx lr
 80008e6:	4770      	bx	lr
  ldr r3, =_sidata
 80008e8:	080027a4 	.word	0x080027a4
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80008f4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008f8:	20000104 	.word	0x20000104

080008fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_2_IRQHandler>
	...

08000900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x28>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_Init+0x28>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f92b 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff ff2c 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f935 	bl	8000bba <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f90b 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_IncTick+0x1c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_IncTick+0x20>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <HAL_IncTick+0x20>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000100 	.word	0x20000100

080009b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <HAL_GetTick+0x10>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	20000100 	.word	0x20000100

080009c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009cc:	f7ff fff0 	bl	80009b0 <HAL_GetTick>
 80009d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009dc:	d005      	beq.n	80009ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <HAL_Delay+0x44>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ea:	bf00      	nop
 80009ec:	f7ff ffe0 	bl	80009b0 <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d8f7      	bhi.n	80009ec <HAL_Delay+0x28>
  {
  }
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f7ff ff90 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff49 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff5e 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffb0 	bl	8000b28 <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b08b      	sub	sp, #44	; 0x2c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be6:	e169      	b.n	8000ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000be8:	2201      	movs	r2, #1
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f040 8158 	bne.w	8000eb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	4a9a      	ldr	r2, [pc, #616]	; (8000e74 <HAL_GPIO_Init+0x2a0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d05e      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
 8000c10:	4a98      	ldr	r2, [pc, #608]	; (8000e74 <HAL_GPIO_Init+0x2a0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d875      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c16:	4a98      	ldr	r2, [pc, #608]	; (8000e78 <HAL_GPIO_Init+0x2a4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d058      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
 8000c1c:	4a96      	ldr	r2, [pc, #600]	; (8000e78 <HAL_GPIO_Init+0x2a4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d86f      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c22:	4a96      	ldr	r2, [pc, #600]	; (8000e7c <HAL_GPIO_Init+0x2a8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d052      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
 8000c28:	4a94      	ldr	r2, [pc, #592]	; (8000e7c <HAL_GPIO_Init+0x2a8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d869      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c2e:	4a94      	ldr	r2, [pc, #592]	; (8000e80 <HAL_GPIO_Init+0x2ac>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d04c      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
 8000c34:	4a92      	ldr	r2, [pc, #584]	; (8000e80 <HAL_GPIO_Init+0x2ac>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d863      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c3a:	4a92      	ldr	r2, [pc, #584]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d046      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
 8000c40:	4a90      	ldr	r2, [pc, #576]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d85d      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c46:	2b12      	cmp	r3, #18
 8000c48:	d82a      	bhi.n	8000ca0 <HAL_GPIO_Init+0xcc>
 8000c4a:	2b12      	cmp	r3, #18
 8000c4c:	d859      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c4e:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <HAL_GPIO_Init+0x80>)
 8000c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c54:	08000ccf 	.word	0x08000ccf
 8000c58:	08000ca9 	.word	0x08000ca9
 8000c5c:	08000cbb 	.word	0x08000cbb
 8000c60:	08000cfd 	.word	0x08000cfd
 8000c64:	08000d03 	.word	0x08000d03
 8000c68:	08000d03 	.word	0x08000d03
 8000c6c:	08000d03 	.word	0x08000d03
 8000c70:	08000d03 	.word	0x08000d03
 8000c74:	08000d03 	.word	0x08000d03
 8000c78:	08000d03 	.word	0x08000d03
 8000c7c:	08000d03 	.word	0x08000d03
 8000c80:	08000d03 	.word	0x08000d03
 8000c84:	08000d03 	.word	0x08000d03
 8000c88:	08000d03 	.word	0x08000d03
 8000c8c:	08000d03 	.word	0x08000d03
 8000c90:	08000d03 	.word	0x08000d03
 8000c94:	08000d03 	.word	0x08000d03
 8000c98:	08000cb1 	.word	0x08000cb1
 8000c9c:	08000cc5 	.word	0x08000cc5
 8000ca0:	4a79      	ldr	r2, [pc, #484]	; (8000e88 <HAL_GPIO_Init+0x2b4>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d013      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ca6:	e02c      	b.n	8000d02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	623b      	str	r3, [r7, #32]
          break;
 8000cae:	e029      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	623b      	str	r3, [r7, #32]
          break;
 8000cb8:	e024      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	3308      	adds	r3, #8
 8000cc0:	623b      	str	r3, [r7, #32]
          break;
 8000cc2:	e01f      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	330c      	adds	r3, #12
 8000cca:	623b      	str	r3, [r7, #32]
          break;
 8000ccc:	e01a      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	623b      	str	r3, [r7, #32]
          break;
 8000cda:	e013      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d105      	bne.n	8000cf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	611a      	str	r2, [r3, #16]
          break;
 8000cee:	e009      	b.n	8000d04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	615a      	str	r2, [r3, #20]
          break;
 8000cfa:	e003      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
          break;
 8000d00:	e000      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          break;
 8000d02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	2bff      	cmp	r3, #255	; 0xff
 8000d08:	d801      	bhi.n	8000d0e <HAL_GPIO_Init+0x13a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	e001      	b.n	8000d12 <HAL_GPIO_Init+0x13e>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3304      	adds	r3, #4
 8000d12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2bff      	cmp	r3, #255	; 0xff
 8000d18:	d802      	bhi.n	8000d20 <HAL_GPIO_Init+0x14c>
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x152>
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	3b08      	subs	r3, #8
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	210f      	movs	r1, #15
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	401a      	ands	r2, r3
 8000d38:	6a39      	ldr	r1, [r7, #32]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	431a      	orrs	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 80b1 	beq.w	8000eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d54:	4b4d      	ldr	r3, [pc, #308]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a4c      	ldr	r2, [pc, #304]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b4a      	ldr	r3, [pc, #296]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d6c:	4a48      	ldr	r2, [pc, #288]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a40      	ldr	r2, [pc, #256]	; (8000e94 <HAL_GPIO_Init+0x2c0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d013      	beq.n	8000dc0 <HAL_GPIO_Init+0x1ec>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a3f      	ldr	r2, [pc, #252]	; (8000e98 <HAL_GPIO_Init+0x2c4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00d      	beq.n	8000dbc <HAL_GPIO_Init+0x1e8>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a3e      	ldr	r2, [pc, #248]	; (8000e9c <HAL_GPIO_Init+0x2c8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d007      	beq.n	8000db8 <HAL_GPIO_Init+0x1e4>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a3d      	ldr	r2, [pc, #244]	; (8000ea0 <HAL_GPIO_Init+0x2cc>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d101      	bne.n	8000db4 <HAL_GPIO_Init+0x1e0>
 8000db0:	2303      	movs	r3, #3
 8000db2:	e006      	b.n	8000dc2 <HAL_GPIO_Init+0x1ee>
 8000db4:	2304      	movs	r3, #4
 8000db6:	e004      	b.n	8000dc2 <HAL_GPIO_Init+0x1ee>
 8000db8:	2302      	movs	r3, #2
 8000dba:	e002      	b.n	8000dc2 <HAL_GPIO_Init+0x1ee>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <HAL_GPIO_Init+0x1ee>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc4:	f002 0203 	and.w	r2, r2, #3
 8000dc8:	0092      	lsls	r2, r2, #2
 8000dca:	4093      	lsls	r3, r2
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dd2:	492f      	ldr	r1, [pc, #188]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	492c      	ldr	r1, [pc, #176]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	600b      	str	r3, [r1, #0]
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4928      	ldr	r1, [pc, #160]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	4922      	ldr	r1, [pc, #136]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	491e      	ldr	r1, [pc, #120]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	4918      	ldr	r1, [pc, #96]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	608b      	str	r3, [r1, #8]
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4914      	ldr	r1, [pc, #80]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d021      	beq.n	8000ea8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60cb      	str	r3, [r1, #12]
 8000e70:	e021      	b.n	8000eb6 <HAL_GPIO_Init+0x2e2>
 8000e72:	bf00      	nop
 8000e74:	10320000 	.word	0x10320000
 8000e78:	10310000 	.word	0x10310000
 8000e7c:	10220000 	.word	0x10220000
 8000e80:	10210000 	.word	0x10210000
 8000e84:	10120000 	.word	0x10120000
 8000e88:	10110000 	.word	0x10110000
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010000 	.word	0x40010000
 8000e94:	40010800 	.word	0x40010800
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	40011400 	.word	0x40011400
 8000ea4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	4909      	ldr	r1, [pc, #36]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	3301      	adds	r3, #1
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f47f ae8e 	bne.w	8000be8 <HAL_GPIO_Init+0x14>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	372c      	adds	r7, #44	; 0x2c
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40010400 	.word	0x40010400

08000edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e12b      	b.n	8001146 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fc6a 	bl	80007dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2224      	movs	r2, #36	; 0x24
 8000f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0201 	bic.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f40:	f001 fba0 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8000f44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4a81      	ldr	r2, [pc, #516]	; (8001150 <HAL_I2C_Init+0x274>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d807      	bhi.n	8000f60 <HAL_I2C_Init+0x84>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4a80      	ldr	r2, [pc, #512]	; (8001154 <HAL_I2C_Init+0x278>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	bf94      	ite	ls
 8000f58:	2301      	movls	r3, #1
 8000f5a:	2300      	movhi	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	e006      	b.n	8000f6e <HAL_I2C_Init+0x92>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a7d      	ldr	r2, [pc, #500]	; (8001158 <HAL_I2C_Init+0x27c>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	bf94      	ite	ls
 8000f68:	2301      	movls	r3, #1
 8000f6a:	2300      	movhi	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e0e7      	b.n	8001146 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4a78      	ldr	r2, [pc, #480]	; (800115c <HAL_I2C_Init+0x280>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	0c9b      	lsrs	r3, r3, #18
 8000f80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	4a6a      	ldr	r2, [pc, #424]	; (8001150 <HAL_I2C_Init+0x274>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d802      	bhi.n	8000fb0 <HAL_I2C_Init+0xd4>
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3301      	adds	r3, #1
 8000fae:	e009      	b.n	8000fc4 <HAL_I2C_Init+0xe8>
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fb6:	fb02 f303 	mul.w	r3, r2, r3
 8000fba:	4a69      	ldr	r2, [pc, #420]	; (8001160 <HAL_I2C_Init+0x284>)
 8000fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc0:	099b      	lsrs	r3, r3, #6
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000fd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	495c      	ldr	r1, [pc, #368]	; (8001150 <HAL_I2C_Init+0x274>)
 8000fe0:	428b      	cmp	r3, r1
 8000fe2:	d819      	bhi.n	8001018 <HAL_I2C_Init+0x13c>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	1e59      	subs	r1, r3, #1
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ff2:	1c59      	adds	r1, r3, #1
 8000ff4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ff8:	400b      	ands	r3, r1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00a      	beq.n	8001014 <HAL_I2C_Init+0x138>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	1e59      	subs	r1, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fbb1 f3f3 	udiv	r3, r1, r3
 800100c:	3301      	adds	r3, #1
 800100e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001012:	e051      	b.n	80010b8 <HAL_I2C_Init+0x1dc>
 8001014:	2304      	movs	r3, #4
 8001016:	e04f      	b.n	80010b8 <HAL_I2C_Init+0x1dc>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d111      	bne.n	8001044 <HAL_I2C_Init+0x168>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1e58      	subs	r0, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	440b      	add	r3, r1
 800102e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001032:	3301      	adds	r3, #1
 8001034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	e012      	b.n	800106a <HAL_I2C_Init+0x18e>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	1e58      	subs	r0, r3, #1
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6859      	ldr	r1, [r3, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	0099      	lsls	r1, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	fbb0 f3f3 	udiv	r3, r0, r3
 800105a:	3301      	adds	r3, #1
 800105c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_Init+0x196>
 800106e:	2301      	movs	r3, #1
 8001070:	e022      	b.n	80010b8 <HAL_I2C_Init+0x1dc>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10e      	bne.n	8001098 <HAL_I2C_Init+0x1bc>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1e58      	subs	r0, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6859      	ldr	r1, [r3, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	440b      	add	r3, r1
 8001088:	fbb0 f3f3 	udiv	r3, r0, r3
 800108c:	3301      	adds	r3, #1
 800108e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001096:	e00f      	b.n	80010b8 <HAL_I2C_Init+0x1dc>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1e58      	subs	r0, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6859      	ldr	r1, [r3, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	0099      	lsls	r1, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ae:	3301      	adds	r3, #1
 80010b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	6809      	ldr	r1, [r1, #0]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69da      	ldr	r2, [r3, #28]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6911      	ldr	r1, [r2, #16]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68d2      	ldr	r2, [r2, #12]
 80010f2:	4311      	orrs	r1, r2
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	430b      	orrs	r3, r1
 80010fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2220      	movs	r2, #32
 8001132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	000186a0 	.word	0x000186a0
 8001154:	001e847f 	.word	0x001e847f
 8001158:	003d08ff 	.word	0x003d08ff
 800115c:	431bde83 	.word	0x431bde83
 8001160:	10624dd3 	.word	0x10624dd3

08001164 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	4608      	mov	r0, r1
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	4603      	mov	r3, r0
 8001174:	817b      	strh	r3, [r7, #10]
 8001176:	460b      	mov	r3, r1
 8001178:	813b      	strh	r3, [r7, #8]
 800117a:	4613      	mov	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800117e:	f7ff fc17 	bl	80009b0 <HAL_GetTick>
 8001182:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b20      	cmp	r3, #32
 800118e:	f040 80d9 	bne.w	8001344 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2319      	movs	r3, #25
 8001198:	2201      	movs	r2, #1
 800119a:	496d      	ldr	r1, [pc, #436]	; (8001350 <HAL_I2C_Mem_Write+0x1ec>)
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f000 fcc1 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80011a8:	2302      	movs	r3, #2
 80011aa:	e0cc      	b.n	8001346 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_I2C_Mem_Write+0x56>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e0c5      	b.n	8001346 <HAL_I2C_Mem_Write+0x1e2>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d007      	beq.n	80011e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0201 	orr.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2221      	movs	r2, #33	; 0x21
 80011f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2240      	movs	r2, #64	; 0x40
 80011fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6a3a      	ldr	r2, [r7, #32]
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001210:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001216:	b29a      	uxth	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4a4d      	ldr	r2, [pc, #308]	; (8001354 <HAL_I2C_Mem_Write+0x1f0>)
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001222:	88f8      	ldrh	r0, [r7, #6]
 8001224:	893a      	ldrh	r2, [r7, #8]
 8001226:	8979      	ldrh	r1, [r7, #10]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4603      	mov	r3, r0
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 faf8 	bl	8001828 <I2C_RequestMemoryWrite>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d052      	beq.n	80012e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e081      	b.n	8001346 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 fd42 	bl	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00d      	beq.n	800126e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	2b04      	cmp	r3, #4
 8001258:	d107      	bne.n	800126a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001268:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e06b      	b.n	8001346 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001288:	3b01      	subs	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001294:	b29b      	uxth	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d11b      	bne.n	80012e4 <HAL_I2C_Mem_Write+0x180>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d017      	beq.n	80012e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012da:	b29b      	uxth	r3, r3
 80012dc:	3b01      	subs	r3, #1
 80012de:	b29a      	uxth	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1aa      	bne.n	8001242 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 fd2e 	bl	8001d52 <I2C_WaitOnBTFFlagUntilTimeout>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00d      	beq.n	8001318 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	2b04      	cmp	r3, #4
 8001302:	d107      	bne.n	8001314 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001312:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e016      	b.n	8001346 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2220      	movs	r2, #32
 800132c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	e000      	b.n	8001346 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001344:	2302      	movs	r3, #2
  }
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	00100002 	.word	0x00100002
 8001354:	ffff0000 	.word	0xffff0000

08001358 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af02      	add	r7, sp, #8
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	4608      	mov	r0, r1
 8001362:	4611      	mov	r1, r2
 8001364:	461a      	mov	r2, r3
 8001366:	4603      	mov	r3, r0
 8001368:	817b      	strh	r3, [r7, #10]
 800136a:	460b      	mov	r3, r1
 800136c:	813b      	strh	r3, [r7, #8]
 800136e:	4613      	mov	r3, r2
 8001370:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001376:	f7ff fb1b 	bl	80009b0 <HAL_GetTick>
 800137a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b20      	cmp	r3, #32
 8001386:	f040 8244 	bne.w	8001812 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2319      	movs	r3, #25
 8001390:	2201      	movs	r2, #1
 8001392:	4982      	ldr	r1, [pc, #520]	; (800159c <HAL_I2C_Mem_Read+0x244>)
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f000 fbc5 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80013a0:	2302      	movs	r3, #2
 80013a2:	e237      	b.n	8001814 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_I2C_Mem_Read+0x5a>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e230      	b.n	8001814 <HAL_I2C_Mem_Read+0x4bc>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d007      	beq.n	80013d8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2222      	movs	r2, #34	; 0x22
 80013ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a62      	ldr	r2, [pc, #392]	; (80015a0 <HAL_I2C_Mem_Read+0x248>)
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800141a:	88f8      	ldrh	r0, [r7, #6]
 800141c:	893a      	ldrh	r2, [r7, #8]
 800141e:	8979      	ldrh	r1, [r7, #10]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	4603      	mov	r3, r0
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 fa92 	bl	8001954 <I2C_RequestMemoryRead>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e1ec      	b.n	8001814 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143e:	2b00      	cmp	r3, #0
 8001440:	d113      	bne.n	800146a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e1c0      	b.n	80017ec <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146e:	2b01      	cmp	r3, #1
 8001470:	d11e      	bne.n	80014b0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001480:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001482:	b672      	cpsid	i
}
 8001484:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014ac:	b662      	cpsie	i
}
 80014ae:	e035      	b.n	800151c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d11e      	bne.n	80014f6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014f2:	b662      	cpsie	i
}
 80014f4:	e012      	b.n	800151c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001504:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800151c:	e166      	b.n	80017ec <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001522:	2b03      	cmp	r3, #3
 8001524:	f200 811f 	bhi.w	8001766 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152c:	2b01      	cmp	r3, #1
 800152e:	d123      	bne.n	8001578 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001532:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 fc4d 	bl	8001dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e167      	b.n	8001814 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001576:	e139      	b.n	80017ec <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157c:	2b02      	cmp	r3, #2
 800157e:	d152      	bne.n	8001626 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001586:	2200      	movs	r2, #0
 8001588:	4906      	ldr	r1, [pc, #24]	; (80015a4 <HAL_I2C_Mem_Read+0x24c>)
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 faca 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e13c      	b.n	8001814 <HAL_I2C_Mem_Read+0x4bc>
 800159a:	bf00      	nop
 800159c:	00100002 	.word	0x00100002
 80015a0:	ffff0000 	.word	0xffff0000
 80015a4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d8:	3b01      	subs	r3, #1
 80015da:	b29a      	uxth	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80015ee:	b662      	cpsie	i
}
 80015f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160e:	3b01      	subs	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001624:	e0e2      	b.n	80017ec <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800162c:	2200      	movs	r2, #0
 800162e:	497b      	ldr	r1, [pc, #492]	; (800181c <HAL_I2C_Mem_Read+0x4c4>)
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 fa77 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0e9      	b.n	8001814 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800164e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001670:	3b01      	subs	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167c:	b29b      	uxth	r3, r3
 800167e:	3b01      	subs	r3, #1
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001686:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_I2C_Mem_Read+0x4c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	4a65      	ldr	r2, [pc, #404]	; (8001824 <HAL_I2C_Mem_Read+0x4cc>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0a1a      	lsrs	r2, r3, #8
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00da      	lsls	r2, r3, #3
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d118      	bne.n	80016de <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2220      	movs	r2, #32
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f043 0220 	orr.w	r2, r3, #32
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80016ce:	b662      	cpsie	i
}
 80016d0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e09a      	b.n	8001814 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d1d9      	bne.n	80016a0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001718:	3b01      	subs	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001724:	b29b      	uxth	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800172e:	b662      	cpsie	i
}
 8001730:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174e:	3b01      	subs	r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001764:	e042      	b.n	80017ec <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001768:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fb32 	bl	8001dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e04c      	b.n	8001814 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001796:	3b01      	subs	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d118      	bne.n	80017ec <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f47f ae94 	bne.w	800151e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001812:	2302      	movs	r3, #2
  }
}
 8001814:	4618      	mov	r0, r3
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	00010004 	.word	0x00010004
 8001820:	20000000 	.word	0x20000000
 8001824:	14f8b589 	.word	0x14f8b589

08001828 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af02      	add	r7, sp, #8
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	461a      	mov	r2, r3
 8001836:	4603      	mov	r3, r0
 8001838:	817b      	strh	r3, [r7, #10]
 800183a:	460b      	mov	r3, r1
 800183c:	813b      	strh	r3, [r7, #8]
 800183e:	4613      	mov	r3, r2
 8001840:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001850:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	2200      	movs	r2, #0
 800185a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f960 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00d      	beq.n	8001886 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001878:	d103      	bne.n	8001882 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e05f      	b.n	8001946 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001886:	897b      	ldrh	r3, [r7, #10]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001894:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	6a3a      	ldr	r2, [r7, #32]
 800189a:	492d      	ldr	r1, [pc, #180]	; (8001950 <I2C_RequestMemoryWrite+0x128>)
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f998 	bl	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e04c      	b.n	8001946 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	6a39      	ldr	r1, [r7, #32]
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fa02 	bl	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00d      	beq.n	80018ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d107      	bne.n	80018ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e02b      	b.n	8001946 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018f4:	893b      	ldrh	r3, [r7, #8]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	e021      	b.n	8001944 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001900:	893b      	ldrh	r3, [r7, #8]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	b29b      	uxth	r3, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800190e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001910:	6a39      	ldr	r1, [r7, #32]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f9dc 	bl	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00d      	beq.n	800193a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	2b04      	cmp	r3, #4
 8001924:	d107      	bne.n	8001936 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001934:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e005      	b.n	8001946 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800193a:	893b      	ldrh	r3, [r7, #8]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	00010002 	.word	0x00010002

08001954 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af02      	add	r7, sp, #8
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4603      	mov	r3, r0
 8001964:	817b      	strh	r3, [r7, #10]
 8001966:	460b      	mov	r3, r1
 8001968:	813b      	strh	r3, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800197c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	2200      	movs	r2, #0
 8001996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f8c2 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00d      	beq.n	80019c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b4:	d103      	bne.n	80019be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0aa      	b.n	8001b18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	6a3a      	ldr	r2, [r7, #32]
 80019d6:	4952      	ldr	r1, [pc, #328]	; (8001b20 <I2C_RequestMemoryRead+0x1cc>)
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 f8fa 	bl	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e097      	b.n	8001b18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a00:	6a39      	ldr	r1, [r7, #32]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f964 	bl	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00d      	beq.n	8001a2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d107      	bne.n	8001a26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e076      	b.n	8001b18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a30:	893b      	ldrh	r3, [r7, #8]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	e021      	b.n	8001a80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a3c:	893b      	ldrh	r3, [r7, #8]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	6a39      	ldr	r1, [r7, #32]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f93e 	bl	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00d      	beq.n	8001a76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d107      	bne.n	8001a72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e050      	b.n	8001b18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a76:	893b      	ldrh	r3, [r7, #8]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a82:	6a39      	ldr	r1, [r7, #32]
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f923 	bl	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00d      	beq.n	8001aac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d107      	bne.n	8001aa8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e035      	b.n	8001b18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f82b 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00d      	beq.n	8001af0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae2:	d103      	bne.n	8001aec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e013      	b.n	8001b18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001af0:	897b      	ldrh	r3, [r7, #10]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	6a3a      	ldr	r2, [r7, #32]
 8001b04:	4906      	ldr	r1, [pc, #24]	; (8001b20 <I2C_RequestMemoryRead+0x1cc>)
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f863 	bl	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	00010002 	.word	0x00010002

08001b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b34:	e025      	b.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d021      	beq.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3e:	f7fe ff37 	bl	80009b0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d116      	bne.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f043 0220 	orr.w	r2, r3, #32
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e023      	b.n	8001bca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d10d      	bne.n	8001ba8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4013      	ands	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf0c      	ite	eq
 8001b9e:	2301      	moveq	r3, #1
 8001ba0:	2300      	movne	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	e00c      	b.n	8001bc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf0c      	ite	eq
 8001bba:	2301      	moveq	r3, #1
 8001bbc:	2300      	movne	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d0b6      	beq.n	8001b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be0:	e051      	b.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf0:	d123      	bne.n	8001c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f043 0204 	orr.w	r2, r3, #4
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e046      	b.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d021      	beq.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c42:	f7fe feb5 	bl	80009b0 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d302      	bcc.n	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d116      	bne.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2220      	movs	r2, #32
 8001c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f043 0220 	orr.w	r2, r3, #32
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e020      	b.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d10c      	bne.n	8001caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	e00b      	b.n	8001cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d18d      	bne.n	8001be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cdc:	e02d      	b.n	8001d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f8ce 	bl	8001e80 <I2C_IsAcknowledgeFailed>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e02d      	b.n	8001d4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d021      	beq.n	8001d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf6:	f7fe fe5b 	bl	80009b0 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d302      	bcc.n	8001d0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d116      	bne.n	8001d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0220 	orr.w	r2, r3, #32
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e007      	b.n	8001d4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d1ca      	bne.n	8001cde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d5e:	e02d      	b.n	8001dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f88d 	bl	8001e80 <I2C_IsAcknowledgeFailed>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e02d      	b.n	8001dcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d021      	beq.n	8001dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d78:	f7fe fe1a 	bl	80009b0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d302      	bcc.n	8001d8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f043 0220 	orr.w	r2, r3, #32
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e007      	b.n	8001dcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d1ca      	bne.n	8001d60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001de0:	e042      	b.n	8001e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d119      	bne.n	8001e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0210 	mvn.w	r2, #16
 8001df8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e029      	b.n	8001e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e24:	f7fe fdc4 	bl	80009b0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d302      	bcc.n	8001e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d116      	bne.n	8001e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e007      	b.n	8001e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	d1b5      	bne.n	8001de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e96:	d11b      	bne.n	8001ed0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ea0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f043 0204 	orr.w	r2, r3, #4
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e26c      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8087 	beq.w	800200a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efc:	4b92      	ldr	r3, [pc, #584]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f08:	4b8f      	ldr	r3, [pc, #572]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d112      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
 8001f14:	4b8c      	ldr	r3, [pc, #560]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d10b      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	4b89      	ldr	r3, [pc, #548]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d06c      	beq.n	8002008 <HAL_RCC_OscConfig+0x12c>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d168      	bne.n	8002008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e246      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x76>
 8001f44:	4b80      	ldr	r3, [pc, #512]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a7f      	ldr	r2, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e02e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x98>
 8001f5a:	4b7b      	ldr	r3, [pc, #492]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7a      	ldr	r2, [pc, #488]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b78      	ldr	r3, [pc, #480]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a77      	ldr	r2, [pc, #476]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0xbc>
 8001f7e:	4b72      	ldr	r3, [pc, #456]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a71      	ldr	r2, [pc, #452]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f98:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6a      	ldr	r2, [pc, #424]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a67      	ldr	r2, [pc, #412]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fcfa 	bl	80009b0 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7fe fcf6 	bl	80009b0 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1fa      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe4>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fce6 	bl	80009b0 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7fe fce2 	bl	80009b0 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1e6      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x10c>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002016:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002022:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x18c>
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1ba      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4939      	ldr	r1, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_RCC_OscConfig+0x270>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7fe fc9b 	bl	80009b0 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7fe fc97 	bl	80009b0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e19b      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4927      	ldr	r1, [pc, #156]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_RCC_OscConfig+0x270>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe fc7a 	bl	80009b0 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7fe fc76 	bl	80009b0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e17a      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03a      	beq.n	8002160 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d019      	beq.n	8002126 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7fe fc5a 	bl	80009b0 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7fe fc56 	bl	80009b0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e15a      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800211e:	2001      	movs	r0, #1
 8002120:	f000 fac4 	bl	80026ac <RCC_Delay>
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212c:	f7fe fc40 	bl	80009b0 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002132:	e00f      	b.n	8002154 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002134:	f7fe fc3c 	bl	80009b0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d908      	bls.n	8002154 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e140      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	42420000 	.word	0x42420000
 8002150:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	4b9e      	ldr	r3, [pc, #632]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e9      	bne.n	8002134 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a6 	beq.w	80022ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b97      	ldr	r3, [pc, #604]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b94      	ldr	r3, [pc, #592]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a93      	ldr	r2, [pc, #588]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]
 800218a:	4b91      	ldr	r3, [pc, #580]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b8e      	ldr	r3, [pc, #568]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a6:	4b8b      	ldr	r3, [pc, #556]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a8a      	ldr	r2, [pc, #552]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fbfd 	bl	80009b0 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7fe fbf9 	bl	80009b0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0fd      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x312>
 80021e0:	4b7b      	ldr	r3, [pc, #492]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a7a      	ldr	r2, [pc, #488]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	e02d      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x334>
 80021f6:	4b76      	ldr	r3, [pc, #472]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a75      	ldr	r2, [pc, #468]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a72      	ldr	r2, [pc, #456]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6213      	str	r3, [r2, #32]
 800220e:	e01c      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d10c      	bne.n	8002232 <HAL_RCC_OscConfig+0x356>
 8002218:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a6c      	ldr	r2, [pc, #432]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	e00b      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a66      	ldr	r2, [pc, #408]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	4b64      	ldr	r3, [pc, #400]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a63      	ldr	r2, [pc, #396]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d015      	beq.n	800227e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7fe fbad 	bl	80009b0 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe fba9 	bl	80009b0 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0ab      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ee      	beq.n	800225a <HAL_RCC_OscConfig+0x37e>
 800227c:	e014      	b.n	80022a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7fe fb97 	bl	80009b0 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe fb93 	bl	80009b0 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e095      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ee      	bne.n	8002286 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d105      	bne.n	80022ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b48      	ldr	r3, [pc, #288]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a47      	ldr	r2, [pc, #284]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8081 	beq.w	80023c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	4b42      	ldr	r3, [pc, #264]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d061      	beq.n	8002394 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d146      	bne.n	8002366 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe fb67 	bl	80009b0 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe fb63 	bl	80009b0 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e067      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f8:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230c:	d108      	bne.n	8002320 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	492d      	ldr	r1, [pc, #180]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a19      	ldr	r1, [r3, #32]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	430b      	orrs	r3, r1
 8002332:	4927      	ldr	r1, [pc, #156]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe fb37 	bl	80009b0 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7fe fb33 	bl	80009b0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e037      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x46a>
 8002364:	e02f      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_RCC_OscConfig+0x4fc>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fb20 	bl	80009b0 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe fb1c 	bl	80009b0 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e020      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x498>
 8002392:	e018      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42420060 	.word	0x42420060

080023dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d0      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4965      	ldr	r1, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800245a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d040      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e073      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06b      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4936      	ldr	r1, [pc, #216]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fa70 	bl	80009b0 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fa6c 	bl	80009b0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e053      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d210      	bcs.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4922      	ldr	r1, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1d0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe f9ce 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40022000 	.word	0x40022000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08002784 	.word	0x08002784
 80025a8:	20000000 	.word	0x20000000
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	b490      	push	{r4, r7}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025b8:	1d3c      	adds	r4, r7, #4
 80025ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025c0:	f240 2301 	movw	r3, #513	; 0x201
 80025c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x40>
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x46>
 80025ee:	e02d      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f2:	623b      	str	r3, [r7, #32]
      break;
 80025f4:	e02d      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	0c9b      	lsrs	r3, r3, #18
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002602:	4413      	add	r3, r2
 8002604:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002608:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0c5b      	lsrs	r3, r3, #17
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002622:	4413      	add	r3, r2
 8002624:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002628:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262e:	fb02 f203 	mul.w	r2, r2, r3
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	e004      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	623b      	str	r3, [r7, #32]
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800264e:	623b      	str	r3, [r7, #32]
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	6a3b      	ldr	r3, [r7, #32]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bc90      	pop	{r4, r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	08002774 	.word	0x08002774
 8002664:	40021000 	.word	0x40021000
 8002668:	007a1200 	.word	0x007a1200
 800266c:	003d0900 	.word	0x003d0900

08002670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002674:	4b02      	ldr	r3, [pc, #8]	; (8002680 <HAL_RCC_GetHCLKFreq+0x10>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	20000000 	.word	0x20000000

08002684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002688:	f7ff fff2 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4903      	ldr	r1, [pc, #12]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	08002794 	.word	0x08002794

080026ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <RCC_Delay+0x34>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <RCC_Delay+0x38>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0a5b      	lsrs	r3, r3, #9
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026c8:	bf00      	nop
  }
  while (Delay --);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	60fa      	str	r2, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f9      	bne.n	80026c8 <RCC_Delay+0x1c>
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000000 	.word	0x20000000
 80026e4:	10624dd3 	.word	0x10624dd3

080026e8 <__libc_init_array>:
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	2600      	movs	r6, #0
 80026ec:	4d0c      	ldr	r5, [pc, #48]	; (8002720 <__libc_init_array+0x38>)
 80026ee:	4c0d      	ldr	r4, [pc, #52]	; (8002724 <__libc_init_array+0x3c>)
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	42a6      	cmp	r6, r4
 80026f6:	d109      	bne.n	800270c <__libc_init_array+0x24>
 80026f8:	f000 f830 	bl	800275c <_init>
 80026fc:	2600      	movs	r6, #0
 80026fe:	4d0a      	ldr	r5, [pc, #40]	; (8002728 <__libc_init_array+0x40>)
 8002700:	4c0a      	ldr	r4, [pc, #40]	; (800272c <__libc_init_array+0x44>)
 8002702:	1b64      	subs	r4, r4, r5
 8002704:	10a4      	asrs	r4, r4, #2
 8002706:	42a6      	cmp	r6, r4
 8002708:	d105      	bne.n	8002716 <__libc_init_array+0x2e>
 800270a:	bd70      	pop	{r4, r5, r6, pc}
 800270c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002710:	4798      	blx	r3
 8002712:	3601      	adds	r6, #1
 8002714:	e7ee      	b.n	80026f4 <__libc_init_array+0xc>
 8002716:	f855 3b04 	ldr.w	r3, [r5], #4
 800271a:	4798      	blx	r3
 800271c:	3601      	adds	r6, #1
 800271e:	e7f2      	b.n	8002706 <__libc_init_array+0x1e>
 8002720:	0800279c 	.word	0x0800279c
 8002724:	0800279c 	.word	0x0800279c
 8002728:	0800279c 	.word	0x0800279c
 800272c:	080027a0 	.word	0x080027a0

08002730 <memcpy>:
 8002730:	440a      	add	r2, r1
 8002732:	4291      	cmp	r1, r2
 8002734:	f100 33ff 	add.w	r3, r0, #4294967295
 8002738:	d100      	bne.n	800273c <memcpy+0xc>
 800273a:	4770      	bx	lr
 800273c:	b510      	push	{r4, lr}
 800273e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002742:	4291      	cmp	r1, r2
 8002744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002748:	d1f9      	bne.n	800273e <memcpy+0xe>
 800274a:	bd10      	pop	{r4, pc}

0800274c <memset>:
 800274c:	4603      	mov	r3, r0
 800274e:	4402      	add	r2, r0
 8002750:	4293      	cmp	r3, r2
 8002752:	d100      	bne.n	8002756 <memset+0xa>
 8002754:	4770      	bx	lr
 8002756:	f803 1b01 	strb.w	r1, [r3], #1
 800275a:	e7f9      	b.n	8002750 <memset+0x4>

0800275c <_init>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	bf00      	nop
 8002760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002762:	bc08      	pop	{r3}
 8002764:	469e      	mov	lr, r3
 8002766:	4770      	bx	lr

08002768 <_fini>:
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276a:	bf00      	nop
 800276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276e:	bc08      	pop	{r3}
 8002770:	469e      	mov	lr, r3
 8002772:	4770      	bx	lr
