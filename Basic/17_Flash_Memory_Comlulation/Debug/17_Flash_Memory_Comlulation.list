
17_Flash_Memory_Comlulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000193c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001a48  08001a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ac8  08001ac8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001ac8  08001ac8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ac8  08001ac8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ac8  08001ac8  00011ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001acc  08001acc  00011acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000070  08001b40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08001b40  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004def  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d0  00000000  00000000  00024e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00026258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d8  00000000  00000000  000266d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165cd  00000000  00000000  00026ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000055a9  00000000  00000000  0003d07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ecf9  00000000  00000000  00042626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c131f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001398  00000000  00000000  000c1374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a30 	.word	0x08001a30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001a30 	.word	0x08001a30

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <deleteBuffer>:
#include <flash.h>

uint8_t lengthPage;

void deleteBuffer(char* data)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(data);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 800016e:	2300      	movs	r3, #0
 8000170:	73fb      	strb	r3, [r7, #15]
 8000172:	e007      	b.n	8000184 <deleteBuffer+0x28>
	{
		data[i] = 0;
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	687a      	ldr	r2, [r7, #4]
 8000178:	4413      	add	r3, r2
 800017a:	2200      	movs	r2, #0
 800017c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 800017e:	7bfb      	ldrb	r3, [r7, #15]
 8000180:	3301      	adds	r3, #1
 8000182:	73fb      	strb	r3, [r7, #15]
 8000184:	7bfa      	ldrb	r2, [r7, #15]
 8000186:	7bbb      	ldrb	r3, [r7, #14]
 8000188:	429a      	cmp	r2, r3
 800018a:	d3f3      	bcc.n	8000174 <deleteBuffer+0x18>
	}
}
 800018c:	bf00      	nop
 800018e:	bf00      	nop
 8000190:	3710      	adds	r7, #16
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}

08000196 <Flash_Unlock>:
{
	HAL_FLASH_Lock();
}

void Flash_Unlock()
{
 8000196:	b580      	push	{r7, lr}
 8000198:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800019a:	f000 fbcf 	bl	800093c <HAL_FLASH_Unlock>
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
	...

080001a4 <Flash_Erase>:

void Flash_Erase(uint32_t addr)
{
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
  while((FLASH->SR&FLASH_SR_BSY));
 80001ac:	bf00      	nop
 80001ae:	4b16      	ldr	r3, [pc, #88]	; (8000208 <Flash_Erase+0x64>)
 80001b0:	68db      	ldr	r3, [r3, #12]
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d1f9      	bne.n	80001ae <Flash_Erase+0xa>
  FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 80001ba:	4b13      	ldr	r3, [pc, #76]	; (8000208 <Flash_Erase+0x64>)
 80001bc:	691b      	ldr	r3, [r3, #16]
 80001be:	4a12      	ldr	r2, [pc, #72]	; (8000208 <Flash_Erase+0x64>)
 80001c0:	f043 0302 	orr.w	r3, r3, #2
 80001c4:	6113      	str	r3, [r2, #16]
  FLASH->AR = addr; //Page Address
 80001c6:	4a10      	ldr	r2, [pc, #64]	; (8000208 <Flash_Erase+0x64>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	6153      	str	r3, [r2, #20]
  FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <Flash_Erase+0x64>)
 80001ce:	691b      	ldr	r3, [r3, #16]
 80001d0:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <Flash_Erase+0x64>)
 80001d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d6:	6113      	str	r3, [r2, #16]
  while((FLASH->SR&FLASH_SR_BSY));
 80001d8:	bf00      	nop
 80001da:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <Flash_Erase+0x64>)
 80001dc:	68db      	ldr	r3, [r3, #12]
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d1f9      	bne.n	80001da <Flash_Erase+0x36>
	FLASH->CR &= ~FLASH_SR_BSY;
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <Flash_Erase+0x64>)
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	4a07      	ldr	r2, [pc, #28]	; (8000208 <Flash_Erase+0x64>)
 80001ec:	f023 0301 	bic.w	r3, r3, #1
 80001f0:	6113      	str	r3, [r2, #16]
  FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <Flash_Erase+0x64>)
 80001f4:	691b      	ldr	r3, [r3, #16]
 80001f6:	4a04      	ldr	r2, [pc, #16]	; (8000208 <Flash_Erase+0x64>)
 80001f8:	f023 0302 	bic.w	r3, r3, #2
 80001fc:	6113      	str	r3, [r2, #16]
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	40022000 	.word	0x40022000

0800020c <Flash_Read_Int>:
	FLASH->CR &= ~FLASH_CR_PG;
	Flash_Lock();
}

uint16_t Flash_Read_Int(uint32_t addr)
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	uint16_t* val = (uint16_t *)addr;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	60fb      	str	r3, [r7, #12]
	return *val;
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	881b      	ldrh	r3, [r3, #0]
}
 800021c:	4618      	mov	r0, r3
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
	...

08000228 <Flash_Write_Char>:

void Flash_Write_Char(uint32_t addr, char* data)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	Flash_Unlock();
 8000232:	f7ff ffb0 	bl	8000196 <Flash_Unlock>
	int i;
  FLASH->CR |= FLASH_CR_PG;
 8000236:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <Flash_Write_Char+0x9c>)
 8000238:	691b      	ldr	r3, [r3, #16]
 800023a:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <Flash_Write_Char+0x9c>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6113      	str	r3, [r2, #16]
	int var = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
	lengthPage = strlen(data);
 8000246:	6838      	ldr	r0, [r7, #0]
 8000248:	f7ff ff80 	bl	800014c <strlen>
 800024c:	4603      	mov	r3, r0
 800024e:	b2da      	uxtb	r2, r3
 8000250:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <Flash_Write_Char+0xa0>)
 8000252:	701a      	strb	r2, [r3, #0]
  for(i=0; i<lengthPage; i+=1)
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	e016      	b.n	8000288 <Flash_Write_Char+0x60>
  {
    while((FLASH->SR&FLASH_SR_BSY));
 800025a:	bf00      	nop
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <Flash_Write_Char+0x9c>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d1f9      	bne.n	800025c <Flash_Write_Char+0x34>
		var = (int)data[i];
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	683a      	ldr	r2, [r7, #0]
 800026c:	4413      	add	r3, r2
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	60bb      	str	r3, [r7, #8]
    *(__IO uint16_t*)(addr + i*2) = var;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	461a      	mov	r2, r3
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4413      	add	r3, r2
 800027c:	68ba      	ldr	r2, [r7, #8]
 800027e:	b292      	uxth	r2, r2
 8000280:	801a      	strh	r2, [r3, #0]
  for(i=0; i<lengthPage; i+=1)
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	3301      	adds	r3, #1
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <Flash_Write_Char+0xa0>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	4293      	cmp	r3, r2
 8000292:	dbe2      	blt.n	800025a <Flash_Write_Char+0x32>
  }
	while((FLASH->SR&FLASH_SR_BSY)){};
 8000294:	bf00      	nop
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <Flash_Write_Char+0x9c>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d1f9      	bne.n	8000296 <Flash_Write_Char+0x6e>
  FLASH->CR &= ~FLASH_CR_PG;
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <Flash_Write_Char+0x9c>)
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	4a07      	ldr	r2, [pc, #28]	; (80002c4 <Flash_Write_Char+0x9c>)
 80002a8:	f023 0301 	bic.w	r3, r3, #1
 80002ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_LOCK;
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <Flash_Write_Char+0x9c>)
 80002b0:	691b      	ldr	r3, [r3, #16]
 80002b2:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <Flash_Write_Char+0x9c>)
 80002b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b8:	6113      	str	r3, [r2, #16]
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40022000 	.word	0x40022000
 80002c8:	200000cc 	.word	0x200000cc

080002cc <Flash_ReadChar>:

void Flash_ReadChar(char* dataOut, uint32_t addr1, uint32_t addr2)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b087      	sub	sp, #28
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
	int check = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	617b      	str	r3, [r7, #20]
	deleteBuffer(dataOut);
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff3d 	bl	800015c <deleteBuffer>
	if((unsigned char)Flash_Read_Int(addr2+(uint32_t)2) == 255)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3302      	adds	r3, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff90 	bl	800020c <Flash_Read_Int>
 80002ec:	4603      	mov	r3, r0
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2bff      	cmp	r3, #255	; 0xff
 80002f2:	d107      	bne.n	8000304 <Flash_ReadChar+0x38>
	{
		check = (unsigned char)Flash_Read_Int(addr2)-48;
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f7ff ff89 	bl	800020c <Flash_Read_Int>
 80002fa:	4603      	mov	r3, r0
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	3b30      	subs	r3, #48	; 0x30
 8000300:	617b      	str	r3, [r7, #20]
 8000302:	e015      	b.n	8000330 <Flash_ReadChar+0x64>
	}
	else
	{
		check = ((unsigned char)Flash_Read_Int(addr2)-48)*10 + (unsigned char)Flash_Read_Int(addr2+2)-48;
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f7ff ff81 	bl	800020c <Flash_Read_Int>
 800030a:	4603      	mov	r3, r0
 800030c:	b2db      	uxtb	r3, r3
 800030e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000312:	4613      	mov	r3, r2
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	4413      	add	r3, r2
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	461c      	mov	r4, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3302      	adds	r3, #2
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff73 	bl	800020c <Flash_Read_Int>
 8000326:	4603      	mov	r3, r0
 8000328:	b2db      	uxtb	r3, r3
 800032a:	4423      	add	r3, r4
 800032c:	3b30      	subs	r3, #48	; 0x30
 800032e:	617b      	str	r3, [r7, #20]
	}
	for(int i = 0; i < check; i++)
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
 8000334:	e011      	b.n	800035a <Flash_ReadChar+0x8e>
	{
		dataOut[i] = Flash_Read_Int(addr1 + (uint32_t)(i*2));
 8000336:	693b      	ldr	r3, [r7, #16]
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	461a      	mov	r2, r3
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	4413      	add	r3, r2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff63 	bl	800020c <Flash_Read_Int>
 8000346:	4603      	mov	r3, r0
 8000348:	4619      	mov	r1, r3
 800034a:	693b      	ldr	r3, [r7, #16]
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	4413      	add	r3, r2
 8000350:	b2ca      	uxtb	r2, r1
 8000352:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < check; i++)
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	3301      	adds	r3, #1
 8000358:	613b      	str	r3, [r7, #16]
 800035a:	693a      	ldr	r2, [r7, #16]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	429a      	cmp	r2, r3
 8000360:	dbe9      	blt.n	8000336 <Flash_ReadChar+0x6a>
	}
}
 8000362:	bf00      	nop
 8000364:	bf00      	nop
 8000366:	371c      	adds	r7, #28
 8000368:	46bd      	mov	sp, r7
 800036a:	bd90      	pop	{r4, r7, pc}

0800036c <Flash_ProgramPage>:

void Flash_ProgramPage(char* dataIn, uint32_t addr1, uint32_t addr2)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
	//FLASH_Unlock
	Flash_Unlock();
 8000378:	f7ff ff0d 	bl	8000196 <Flash_Unlock>
	//Flash_Erase Page
	Flash_Erase(addr1);
 800037c:	68b8      	ldr	r0, [r7, #8]
 800037e:	f7ff ff11 	bl	80001a4 <Flash_Erase>
	//FLASH_Program HalfWord
	Flash_Write_Char(addr1,dataIn);
 8000382:	68f9      	ldr	r1, [r7, #12]
 8000384:	68b8      	ldr	r0, [r7, #8]
 8000386:	f7ff ff4f 	bl	8000228 <Flash_Write_Char>
	HAL_Delay(100);
 800038a:	2064      	movs	r0, #100	; 0x64
 800038c:	f000 f9ce 	bl	800072c <HAL_Delay>
	char tempbuf[5] = {0};
 8000390:	2300      	movs	r3, #0
 8000392:	613b      	str	r3, [r7, #16]
 8000394:	2300      	movs	r3, #0
 8000396:	753b      	strb	r3, [r7, #20]
	sprintf(tempbuf,"%d",lengthPage);
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <Flash_ProgramPage+0x5c>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	461a      	mov	r2, r3
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	490a      	ldr	r1, [pc, #40]	; (80003cc <Flash_ProgramPage+0x60>)
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 ff09 	bl	80011bc <siprintf>
	//FLASH_Unlock
	Flash_Unlock();
 80003aa:	f7ff fef4 	bl	8000196 <Flash_Unlock>
	//Flash_Erase Page
	Flash_Erase(addr2);
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f7ff fef8 	bl	80001a4 <Flash_Erase>
	//FLASH_Program HalfWord
	Flash_Write_Char(addr2,tempbuf);
 80003b4:	f107 0310 	add.w	r3, r7, #16
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff ff34 	bl	8000228 <Flash_Write_Char>
}
 80003c0:	bf00      	nop
 80003c2:	3718      	adds	r7, #24
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200000cc 	.word	0x200000cc
 80003cc:	08001a48 	.word	0x08001a48

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d4:	f000 f948 	bl	8000668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d8:	f000 f826 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003dc:	f000 f860 	bl	80004a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Flash_ProgramPage("First data written to flash",DATA_START_ADDRESS,LENGTH_START_ADDRESS);
 80003e0:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <main+0x44>)
 80003e2:	490d      	ldr	r1, [pc, #52]	; (8000418 <main+0x48>)
 80003e4:	480d      	ldr	r0, [pc, #52]	; (800041c <main+0x4c>)
 80003e6:	f7ff ffc1 	bl	800036c <Flash_ProgramPage>
  	Flash_ReadChar(data,DATA_START_ADDRESS,LENGTH_START_ADDRESS);
 80003ea:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <main+0x44>)
 80003ec:	490a      	ldr	r1, [pc, #40]	; (8000418 <main+0x48>)
 80003ee:	480c      	ldr	r0, [pc, #48]	; (8000420 <main+0x50>)
 80003f0:	f7ff ff6c 	bl	80002cc <Flash_ReadChar>
  	HAL_Delay(2000);
 80003f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003f8:	f000 f998 	bl	800072c <HAL_Delay>
  	Flash_ProgramPage("New data",DATA_START_ADDRESS,LENGTH_START_ADDRESS);
 80003fc:	4a05      	ldr	r2, [pc, #20]	; (8000414 <main+0x44>)
 80003fe:	4906      	ldr	r1, [pc, #24]	; (8000418 <main+0x48>)
 8000400:	4808      	ldr	r0, [pc, #32]	; (8000424 <main+0x54>)
 8000402:	f7ff ffb3 	bl	800036c <Flash_ProgramPage>
  	Flash_ReadChar(data,DATA_START_ADDRESS,LENGTH_START_ADDRESS);
 8000406:	4a03      	ldr	r2, [pc, #12]	; (8000414 <main+0x44>)
 8000408:	4903      	ldr	r1, [pc, #12]	; (8000418 <main+0x48>)
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <main+0x50>)
 800040c:	f7ff ff5e 	bl	80002cc <Flash_ReadChar>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000410:	e7fe      	b.n	8000410 <main+0x40>
 8000412:	bf00      	nop
 8000414:	0801f810 	.word	0x0801f810
 8000418:	0801fc00 	.word	0x0801fc00
 800041c:	08001a4c 	.word	0x08001a4c
 8000420:	2000008c 	.word	0x2000008c
 8000424:	08001a68 	.word	0x08001a68

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b090      	sub	sp, #64	; 0x40
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0318 	add.w	r3, r7, #24
 8000432:	2228      	movs	r2, #40	; 0x28
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f000 feb8 	bl	80011ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044a:	2302      	movs	r3, #2
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	2301      	movs	r3, #1
 8000450:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000452:	2310      	movs	r3, #16
 8000454:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000456:	2300      	movs	r3, #0
 8000458:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fa92 	bl	8000988 <HAL_RCC_OscConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800046a:	f000 f83b 	bl	80004e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046e:	230f      	movs	r3, #15
 8000470:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fcfe 	bl	8000e88 <HAL_RCC_ClockConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000492:	f000 f827 	bl	80004e4 <Error_Handler>
  }
}
 8000496:	bf00      	nop
 8000498:	3740      	adds	r7, #64	; 0x40
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_GPIO_Init+0x40>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <MX_GPIO_Init+0x40>)
 80004ac:	f043 0320 	orr.w	r3, r3, #32
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_GPIO_Init+0x40>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0320 	and.w	r3, r3, #32
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_GPIO_Init+0x40>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <MX_GPIO_Init+0x40>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <MX_GPIO_Init+0x40>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	e7fe      	b.n	80004ec <Error_Handler+0x8>
	...

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_MspInit+0x5c>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a14      	ldr	r2, [pc, #80]	; (800054c <HAL_MspInit+0x5c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_MspInit+0x5c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_MspInit+0x5c>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <HAL_MspInit+0x5c>)
 8000514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_MspInit+0x5c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_MspInit+0x60>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_MspInit+0x60>)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40021000 	.word	0x40021000
 8000550:	40010000 	.word	0x40010000

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059a:	f000 f8ab 	bl	80006f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ac:	4a14      	ldr	r2, [pc, #80]	; (8000600 <_sbrk+0x5c>)
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <_sbrk+0x60>)
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <_sbrk+0x64>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <_sbrk+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d207      	bcs.n	80005e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d4:	f000 fdc0 	bl	8001158 <__errno>
 80005d8:	4603      	mov	r3, r0
 80005da:	220c      	movs	r2, #12
 80005dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	e009      	b.n	80005f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <_sbrk+0x64>)
 80005f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20005000 	.word	0x20005000
 8000604:	00000400 	.word	0x00000400
 8000608:	200000c0 	.word	0x200000c0
 800060c:	200000e8 	.word	0x200000e8

08000610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800061c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800061e:	e003      	b.n	8000628 <LoopCopyDataInit>

08000620 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000622:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000624:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000626:	3104      	adds	r1, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000628:	480a      	ldr	r0, [pc, #40]	; (8000654 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800062c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800062e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000630:	d3f6      	bcc.n	8000620 <CopyDataInit>
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000634:	e002      	b.n	800063c <LoopFillZerobss>

08000636 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000638:	f842 3b04 	str.w	r3, [r2], #4

0800063c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800063e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000640:	d3f9      	bcc.n	8000636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000642:	f7ff ffe5 	bl	8000610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000646:	f000 fd8d 	bl	8001164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fec1 	bl	80003d0 <main>
  bx lr
 800064e:	4770      	bx	lr
  ldr r3, =_sidata
 8000650:	08001ad0 	.word	0x08001ad0
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000658:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800065c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000660:	200000e4 	.word	0x200000e4

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_Init+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_Init+0x28>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f92b 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067e:	2000      	movs	r0, #0
 8000680:	f000 f808 	bl	8000694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000684:	f7ff ff34 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x54>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_InitTick+0x58>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f935 	bl	8000922 <HAL_SYSTICK_Config>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e00e      	b.n	80006e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	d80a      	bhi.n	80006de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c8:	2200      	movs	r2, #0
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f000 f90b 	bl	80008ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d4:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <HAL_InitTick+0x5c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	e000      	b.n	80006e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000004 	.word	0x20000004

080006f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x1c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_IncTick+0x20>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4413      	add	r3, r2
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <HAL_IncTick+0x20>)
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000008 	.word	0x20000008
 8000714:	200000d0 	.word	0x200000d0

08000718 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return uwTick;
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <HAL_GetTick+0x10>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	200000d0 	.word	0x200000d0

0800072c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000734:	f7ff fff0 	bl	8000718 <HAL_GetTick>
 8000738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000744:	d005      	beq.n	8000752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_Delay+0x44>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4413      	add	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000752:	bf00      	nop
 8000754:	f7ff ffe0 	bl	8000718 <HAL_GetTick>
 8000758:	4602      	mov	r2, r0
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	429a      	cmp	r2, r3
 8000762:	d8f7      	bhi.n	8000754 <HAL_Delay+0x28>
  {
  }
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000008 	.word	0x20000008

08000774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800079c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_GetPriorityGrouping+0x18>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	f003 0307 	and.w	r3, r3, #7
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	; 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f7ff ff90 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff49 	bl	8000774 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff5e 	bl	80007bc <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff90 	bl	800082c <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5f 	bl	80007d8 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffb0 	bl	8000890 <SysTick_Config>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_FLASH_Unlock+0x40>)
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00d      	beq.n	800096e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_FLASH_Unlock+0x40>)
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_FLASH_Unlock+0x44>)
 8000956:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_FLASH_Unlock+0x40>)
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_FLASH_Unlock+0x48>)
 800095c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <HAL_FLASH_Unlock+0x40>)
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800096e:	79fb      	ldrb	r3, [r7, #7]
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40022000 	.word	0x40022000
 8000980:	45670123 	.word	0x45670123
 8000984:	cdef89ab 	.word	0xcdef89ab

08000988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e26c      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 8087 	beq.w	8000ab6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009a8:	4b92      	ldr	r3, [pc, #584]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 030c 	and.w	r3, r3, #12
 80009b0:	2b04      	cmp	r3, #4
 80009b2:	d00c      	beq.n	80009ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009b4:	4b8f      	ldr	r3, [pc, #572]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 030c 	and.w	r3, r3, #12
 80009bc:	2b08      	cmp	r3, #8
 80009be:	d112      	bne.n	80009e6 <HAL_RCC_OscConfig+0x5e>
 80009c0:	4b8c      	ldr	r3, [pc, #560]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009cc:	d10b      	bne.n	80009e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ce:	4b89      	ldr	r3, [pc, #548]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d06c      	beq.n	8000ab4 <HAL_RCC_OscConfig+0x12c>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d168      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e246      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009ee:	d106      	bne.n	80009fe <HAL_RCC_OscConfig+0x76>
 80009f0:	4b80      	ldr	r3, [pc, #512]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a7f      	ldr	r2, [pc, #508]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 80009f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e02e      	b.n	8000a5c <HAL_RCC_OscConfig+0xd4>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10c      	bne.n	8000a20 <HAL_RCC_OscConfig+0x98>
 8000a06:	4b7b      	ldr	r3, [pc, #492]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a7a      	ldr	r2, [pc, #488]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	4b78      	ldr	r3, [pc, #480]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a77      	ldr	r2, [pc, #476]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e01d      	b.n	8000a5c <HAL_RCC_OscConfig+0xd4>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a28:	d10c      	bne.n	8000a44 <HAL_RCC_OscConfig+0xbc>
 8000a2a:	4b72      	ldr	r3, [pc, #456]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a71      	ldr	r2, [pc, #452]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a34:	6013      	str	r3, [r2, #0]
 8000a36:	4b6f      	ldr	r3, [pc, #444]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a6e      	ldr	r2, [pc, #440]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	e00b      	b.n	8000a5c <HAL_RCC_OscConfig+0xd4>
 8000a44:	4b6b      	ldr	r3, [pc, #428]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a6a      	ldr	r2, [pc, #424]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b68      	ldr	r3, [pc, #416]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a67      	ldr	r2, [pc, #412]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d013      	beq.n	8000a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a64:	f7ff fe58 	bl	8000718 <HAL_GetTick>
 8000a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a6a:	e008      	b.n	8000a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a6c:	f7ff fe54 	bl	8000718 <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	2b64      	cmp	r3, #100	; 0x64
 8000a78:	d901      	bls.n	8000a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e1fa      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a7e:	4b5d      	ldr	r3, [pc, #372]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f0      	beq.n	8000a6c <HAL_RCC_OscConfig+0xe4>
 8000a8a:	e014      	b.n	8000ab6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a8c:	f7ff fe44 	bl	8000718 <HAL_GetTick>
 8000a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a92:	e008      	b.n	8000aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a94:	f7ff fe40 	bl	8000718 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	2b64      	cmp	r3, #100	; 0x64
 8000aa0:	d901      	bls.n	8000aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	e1e6      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aa6:	4b53      	ldr	r3, [pc, #332]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1f0      	bne.n	8000a94 <HAL_RCC_OscConfig+0x10c>
 8000ab2:	e000      	b.n	8000ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d063      	beq.n	8000b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ac2:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00b      	beq.n	8000ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ace:	4b49      	ldr	r3, [pc, #292]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d11c      	bne.n	8000b14 <HAL_RCC_OscConfig+0x18c>
 8000ada:	4b46      	ldr	r3, [pc, #280]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d116      	bne.n	8000b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae6:	4b43      	ldr	r3, [pc, #268]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <HAL_RCC_OscConfig+0x176>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d001      	beq.n	8000afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e1ba      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000afe:	4b3d      	ldr	r3, [pc, #244]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	4939      	ldr	r1, [pc, #228]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b12:	e03a      	b.n	8000b8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d020      	beq.n	8000b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <HAL_RCC_OscConfig+0x270>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b22:	f7ff fdf9 	bl	8000718 <HAL_GetTick>
 8000b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b28:	e008      	b.n	8000b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b2a:	f7ff fdf5 	bl	8000718 <HAL_GetTick>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d901      	bls.n	8000b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e19b      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0f0      	beq.n	8000b2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b48:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4927      	ldr	r1, [pc, #156]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	600b      	str	r3, [r1, #0]
 8000b5c:	e015      	b.n	8000b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <HAL_RCC_OscConfig+0x270>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b64:	f7ff fdd8 	bl	8000718 <HAL_GetTick>
 8000b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b6a:	e008      	b.n	8000b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b6c:	f7ff fdd4 	bl	8000718 <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d901      	bls.n	8000b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e17a      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1f0      	bne.n	8000b6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d03a      	beq.n	8000c0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d019      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_RCC_OscConfig+0x274>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ba4:	f7ff fdb8 	bl	8000718 <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bac:	f7ff fdb4 	bl	8000718 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e15a      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f0      	beq.n	8000bac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f000 faa6 	bl	800111c <RCC_Delay>
 8000bd0:	e01c      	b.n	8000c0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_RCC_OscConfig+0x274>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bd8:	f7ff fd9e 	bl	8000718 <HAL_GetTick>
 8000bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bde:	e00f      	b.n	8000c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000be0:	f7ff fd9a 	bl	8000718 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d908      	bls.n	8000c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e140      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	42420000 	.word	0x42420000
 8000bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c00:	4b9e      	ldr	r3, [pc, #632]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1e9      	bne.n	8000be0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f000 80a6 	beq.w	8000d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c1e:	4b97      	ldr	r3, [pc, #604]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10d      	bne.n	8000c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b94      	ldr	r3, [pc, #592]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a93      	ldr	r2, [pc, #588]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b91      	ldr	r3, [pc, #580]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c42:	2301      	movs	r3, #1
 8000c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c46:	4b8e      	ldr	r3, [pc, #568]	; (8000e80 <HAL_RCC_OscConfig+0x4f8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d118      	bne.n	8000c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c52:	4b8b      	ldr	r3, [pc, #556]	; (8000e80 <HAL_RCC_OscConfig+0x4f8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a8a      	ldr	r2, [pc, #552]	; (8000e80 <HAL_RCC_OscConfig+0x4f8>)
 8000c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c5e:	f7ff fd5b 	bl	8000718 <HAL_GetTick>
 8000c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c64:	e008      	b.n	8000c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c66:	f7ff fd57 	bl	8000718 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b64      	cmp	r3, #100	; 0x64
 8000c72:	d901      	bls.n	8000c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c74:	2303      	movs	r3, #3
 8000c76:	e0fd      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c78:	4b81      	ldr	r3, [pc, #516]	; (8000e80 <HAL_RCC_OscConfig+0x4f8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f0      	beq.n	8000c66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d106      	bne.n	8000c9a <HAL_RCC_OscConfig+0x312>
 8000c8c:	4b7b      	ldr	r3, [pc, #492]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	4a7a      	ldr	r2, [pc, #488]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6213      	str	r3, [r2, #32]
 8000c98:	e02d      	b.n	8000cf6 <HAL_RCC_OscConfig+0x36e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x334>
 8000ca2:	4b76      	ldr	r3, [pc, #472]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000ca4:	6a1b      	ldr	r3, [r3, #32]
 8000ca6:	4a75      	ldr	r2, [pc, #468]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000ca8:	f023 0301 	bic.w	r3, r3, #1
 8000cac:	6213      	str	r3, [r2, #32]
 8000cae:	4b73      	ldr	r3, [pc, #460]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	4a72      	ldr	r2, [pc, #456]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000cb4:	f023 0304 	bic.w	r3, r3, #4
 8000cb8:	6213      	str	r3, [r2, #32]
 8000cba:	e01c      	b.n	8000cf6 <HAL_RCC_OscConfig+0x36e>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	2b05      	cmp	r3, #5
 8000cc2:	d10c      	bne.n	8000cde <HAL_RCC_OscConfig+0x356>
 8000cc4:	4b6d      	ldr	r3, [pc, #436]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
 8000cc8:	4a6c      	ldr	r2, [pc, #432]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6213      	str	r3, [r2, #32]
 8000cd0:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	4a69      	ldr	r2, [pc, #420]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6213      	str	r3, [r2, #32]
 8000cdc:	e00b      	b.n	8000cf6 <HAL_RCC_OscConfig+0x36e>
 8000cde:	4b67      	ldr	r3, [pc, #412]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000ce0:	6a1b      	ldr	r3, [r3, #32]
 8000ce2:	4a66      	ldr	r2, [pc, #408]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	6213      	str	r3, [r2, #32]
 8000cea:	4b64      	ldr	r3, [pc, #400]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	4a63      	ldr	r2, [pc, #396]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000cf0:	f023 0304 	bic.w	r3, r3, #4
 8000cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d015      	beq.n	8000d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfe:	f7ff fd0b 	bl	8000718 <HAL_GetTick>
 8000d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d04:	e00a      	b.n	8000d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d06:	f7ff fd07 	bl	8000718 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e0ab      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d1c:	4b57      	ldr	r3, [pc, #348]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0ee      	beq.n	8000d06 <HAL_RCC_OscConfig+0x37e>
 8000d28:	e014      	b.n	8000d54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d2a:	f7ff fcf5 	bl	8000718 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d30:	e00a      	b.n	8000d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d32:	f7ff fcf1 	bl	8000718 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e095      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d48:	4b4c      	ldr	r3, [pc, #304]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1ee      	bne.n	8000d32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d105      	bne.n	8000d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d5a:	4b48      	ldr	r3, [pc, #288]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a47      	ldr	r2, [pc, #284]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 8081 	beq.w	8000e72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d70:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d061      	beq.n	8000e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d146      	bne.n	8000e12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d84:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <HAL_RCC_OscConfig+0x4fc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fcc5 	bl	8000718 <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d92:	f7ff fcc1 	bl	8000718 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e067      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da4:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f0      	bne.n	8000d92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db8:	d108      	bne.n	8000dcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	492d      	ldr	r1, [pc, #180]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a19      	ldr	r1, [r3, #32]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	4927      	ldr	r1, [pc, #156]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000de4:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <HAL_RCC_OscConfig+0x4fc>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dea:	f7ff fc95 	bl	8000718 <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df2:	f7ff fc91 	bl	8000718 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e037      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f0      	beq.n	8000df2 <HAL_RCC_OscConfig+0x46a>
 8000e10:	e02f      	b.n	8000e72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <HAL_RCC_OscConfig+0x4fc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fc7e 	bl	8000718 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e20:	f7ff fc7a 	bl	8000718 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e020      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f0      	bne.n	8000e20 <HAL_RCC_OscConfig+0x498>
 8000e3e:	e018      	b.n	8000e72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d101      	bne.n	8000e4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e013      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_RCC_OscConfig+0x4f4>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d106      	bne.n	8000e6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d001      	beq.n	8000e72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40007000 	.word	0x40007000
 8000e84:	42420060 	.word	0x42420060

08000e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e0d0      	b.n	800103e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e9c:	4b6a      	ldr	r3, [pc, #424]	; (8001048 <HAL_RCC_ClockConfig+0x1c0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d910      	bls.n	8000ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eaa:	4b67      	ldr	r3, [pc, #412]	; (8001048 <HAL_RCC_ClockConfig+0x1c0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 0207 	bic.w	r2, r3, #7
 8000eb2:	4965      	ldr	r1, [pc, #404]	; (8001048 <HAL_RCC_ClockConfig+0x1c0>)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eba:	4b63      	ldr	r3, [pc, #396]	; (8001048 <HAL_RCC_ClockConfig+0x1c0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d001      	beq.n	8000ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e0b8      	b.n	800103e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d020      	beq.n	8000f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d005      	beq.n	8000ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ee4:	4b59      	ldr	r3, [pc, #356]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	4a58      	ldr	r2, [pc, #352]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000efc:	4b53      	ldr	r3, [pc, #332]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4a52      	ldr	r2, [pc, #328]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f08:	4b50      	ldr	r3, [pc, #320]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	494d      	ldr	r1, [pc, #308]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d040      	beq.n	8000fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d107      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d115      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e07f      	b.n	800103e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d107      	bne.n	8000f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d109      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e073      	b.n	800103e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e06b      	b.n	800103e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f023 0203 	bic.w	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4936      	ldr	r1, [pc, #216]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f78:	f7ff fbce 	bl	8000718 <HAL_GetTick>
 8000f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f7e:	e00a      	b.n	8000f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f80:	f7ff fbca 	bl	8000718 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e053      	b.n	800103e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 020c 	and.w	r2, r3, #12
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d1eb      	bne.n	8000f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <HAL_RCC_ClockConfig+0x1c0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d210      	bcs.n	8000fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <HAL_RCC_ClockConfig+0x1c0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f023 0207 	bic.w	r2, r3, #7
 8000fbe:	4922      	ldr	r1, [pc, #136]	; (8001048 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d001      	beq.n	8000fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e032      	b.n	800103e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	4916      	ldr	r1, [pc, #88]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d009      	beq.n	8001016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	490e      	ldr	r1, [pc, #56]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8001012:	4313      	orrs	r3, r2
 8001014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001016:	f000 f821 	bl	800105c <HAL_RCC_GetSysClockFreq>
 800101a:	4602      	mov	r2, r0
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_RCC_ClockConfig+0x1c4>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	091b      	lsrs	r3, r3, #4
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	490a      	ldr	r1, [pc, #40]	; (8001050 <HAL_RCC_ClockConfig+0x1c8>)
 8001028:	5ccb      	ldrb	r3, [r1, r3]
 800102a:	fa22 f303 	lsr.w	r3, r2, r3
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_RCC_ClockConfig+0x1cc>)
 8001030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_RCC_ClockConfig+0x1d0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb2c 	bl	8000694 <HAL_InitTick>

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40022000 	.word	0x40022000
 800104c:	40021000 	.word	0x40021000
 8001050:	08001a84 	.word	0x08001a84
 8001054:	20000000 	.word	0x20000000
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800105c:	b490      	push	{r4, r7}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001064:	1d3c      	adds	r4, r7, #4
 8001066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800106c:	f240 2301 	movw	r3, #513	; 0x201
 8001070:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b04      	cmp	r3, #4
 8001094:	d002      	beq.n	800109c <HAL_RCC_GetSysClockFreq+0x40>
 8001096:	2b08      	cmp	r3, #8
 8001098:	d003      	beq.n	80010a2 <HAL_RCC_GetSysClockFreq+0x46>
 800109a:	e02d      	b.n	80010f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_RCC_GetSysClockFreq+0xb8>)
 800109e:	623b      	str	r3, [r7, #32]
      break;
 80010a0:	e02d      	b.n	80010fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	0c9b      	lsrs	r3, r3, #18
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	4413      	add	r3, r2
 80010b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	0c5b      	lsrs	r3, r3, #17
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ce:	4413      	add	r3, r2
 80010d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80010d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80010da:	fb02 f203 	mul.w	r2, r2, r3
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	e004      	b.n	80010f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	623b      	str	r3, [r7, #32]
      break;
 80010f6:	e002      	b.n	80010fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80010fa:	623b      	str	r3, [r7, #32]
      break;
 80010fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bc90      	pop	{r4, r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	08001a74 	.word	0x08001a74
 8001110:	40021000 	.word	0x40021000
 8001114:	007a1200 	.word	0x007a1200
 8001118:	003d0900 	.word	0x003d0900

0800111c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <RCC_Delay+0x34>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <RCC_Delay+0x38>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0a5b      	lsrs	r3, r3, #9
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001138:	bf00      	nop
  }
  while (Delay --);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1e5a      	subs	r2, r3, #1
 800113e:	60fa      	str	r2, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f9      	bne.n	8001138 <RCC_Delay+0x1c>
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000000 	.word	0x20000000
 8001154:	10624dd3 	.word	0x10624dd3

08001158 <__errno>:
 8001158:	4b01      	ldr	r3, [pc, #4]	; (8001160 <__errno+0x8>)
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000000c 	.word	0x2000000c

08001164 <__libc_init_array>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	2600      	movs	r6, #0
 8001168:	4d0c      	ldr	r5, [pc, #48]	; (800119c <__libc_init_array+0x38>)
 800116a:	4c0d      	ldr	r4, [pc, #52]	; (80011a0 <__libc_init_array+0x3c>)
 800116c:	1b64      	subs	r4, r4, r5
 800116e:	10a4      	asrs	r4, r4, #2
 8001170:	42a6      	cmp	r6, r4
 8001172:	d109      	bne.n	8001188 <__libc_init_array+0x24>
 8001174:	f000 fc5c 	bl	8001a30 <_init>
 8001178:	2600      	movs	r6, #0
 800117a:	4d0a      	ldr	r5, [pc, #40]	; (80011a4 <__libc_init_array+0x40>)
 800117c:	4c0a      	ldr	r4, [pc, #40]	; (80011a8 <__libc_init_array+0x44>)
 800117e:	1b64      	subs	r4, r4, r5
 8001180:	10a4      	asrs	r4, r4, #2
 8001182:	42a6      	cmp	r6, r4
 8001184:	d105      	bne.n	8001192 <__libc_init_array+0x2e>
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	f855 3b04 	ldr.w	r3, [r5], #4
 800118c:	4798      	blx	r3
 800118e:	3601      	adds	r6, #1
 8001190:	e7ee      	b.n	8001170 <__libc_init_array+0xc>
 8001192:	f855 3b04 	ldr.w	r3, [r5], #4
 8001196:	4798      	blx	r3
 8001198:	3601      	adds	r6, #1
 800119a:	e7f2      	b.n	8001182 <__libc_init_array+0x1e>
 800119c:	08001ac8 	.word	0x08001ac8
 80011a0:	08001ac8 	.word	0x08001ac8
 80011a4:	08001ac8 	.word	0x08001ac8
 80011a8:	08001acc 	.word	0x08001acc

080011ac <memset>:
 80011ac:	4603      	mov	r3, r0
 80011ae:	4402      	add	r2, r0
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d100      	bne.n	80011b6 <memset+0xa>
 80011b4:	4770      	bx	lr
 80011b6:	f803 1b01 	strb.w	r1, [r3], #1
 80011ba:	e7f9      	b.n	80011b0 <memset+0x4>

080011bc <siprintf>:
 80011bc:	b40e      	push	{r1, r2, r3}
 80011be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80011c2:	b500      	push	{lr}
 80011c4:	b09c      	sub	sp, #112	; 0x70
 80011c6:	ab1d      	add	r3, sp, #116	; 0x74
 80011c8:	9002      	str	r0, [sp, #8]
 80011ca:	9006      	str	r0, [sp, #24]
 80011cc:	9107      	str	r1, [sp, #28]
 80011ce:	9104      	str	r1, [sp, #16]
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <siprintf+0x38>)
 80011d2:	4909      	ldr	r1, [pc, #36]	; (80011f8 <siprintf+0x3c>)
 80011d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80011d8:	9105      	str	r1, [sp, #20]
 80011da:	6800      	ldr	r0, [r0, #0]
 80011dc:	a902      	add	r1, sp, #8
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f000 f868 	bl	80012b4 <_svfiprintf_r>
 80011e4:	2200      	movs	r2, #0
 80011e6:	9b02      	ldr	r3, [sp, #8]
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	b01c      	add	sp, #112	; 0x70
 80011ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80011f0:	b003      	add	sp, #12
 80011f2:	4770      	bx	lr
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	ffff0208 	.word	0xffff0208

080011fc <__ssputs_r>:
 80011fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001200:	688e      	ldr	r6, [r1, #8]
 8001202:	4682      	mov	sl, r0
 8001204:	429e      	cmp	r6, r3
 8001206:	460c      	mov	r4, r1
 8001208:	4690      	mov	r8, r2
 800120a:	461f      	mov	r7, r3
 800120c:	d838      	bhi.n	8001280 <__ssputs_r+0x84>
 800120e:	898a      	ldrh	r2, [r1, #12]
 8001210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001214:	d032      	beq.n	800127c <__ssputs_r+0x80>
 8001216:	6825      	ldr	r5, [r4, #0]
 8001218:	6909      	ldr	r1, [r1, #16]
 800121a:	3301      	adds	r3, #1
 800121c:	eba5 0901 	sub.w	r9, r5, r1
 8001220:	6965      	ldr	r5, [r4, #20]
 8001222:	444b      	add	r3, r9
 8001224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800122c:	106d      	asrs	r5, r5, #1
 800122e:	429d      	cmp	r5, r3
 8001230:	bf38      	it	cc
 8001232:	461d      	movcc	r5, r3
 8001234:	0553      	lsls	r3, r2, #21
 8001236:	d531      	bpl.n	800129c <__ssputs_r+0xa0>
 8001238:	4629      	mov	r1, r5
 800123a:	f000 fb53 	bl	80018e4 <_malloc_r>
 800123e:	4606      	mov	r6, r0
 8001240:	b950      	cbnz	r0, 8001258 <__ssputs_r+0x5c>
 8001242:	230c      	movs	r3, #12
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f8ca 3000 	str.w	r3, [sl]
 800124c:	89a3      	ldrh	r3, [r4, #12]
 800124e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001252:	81a3      	strh	r3, [r4, #12]
 8001254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001258:	464a      	mov	r2, r9
 800125a:	6921      	ldr	r1, [r4, #16]
 800125c:	f000 face 	bl	80017fc <memcpy>
 8001260:	89a3      	ldrh	r3, [r4, #12]
 8001262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126a:	81a3      	strh	r3, [r4, #12]
 800126c:	6126      	str	r6, [r4, #16]
 800126e:	444e      	add	r6, r9
 8001270:	6026      	str	r6, [r4, #0]
 8001272:	463e      	mov	r6, r7
 8001274:	6165      	str	r5, [r4, #20]
 8001276:	eba5 0509 	sub.w	r5, r5, r9
 800127a:	60a5      	str	r5, [r4, #8]
 800127c:	42be      	cmp	r6, r7
 800127e:	d900      	bls.n	8001282 <__ssputs_r+0x86>
 8001280:	463e      	mov	r6, r7
 8001282:	4632      	mov	r2, r6
 8001284:	4641      	mov	r1, r8
 8001286:	6820      	ldr	r0, [r4, #0]
 8001288:	f000 fac6 	bl	8001818 <memmove>
 800128c:	68a3      	ldr	r3, [r4, #8]
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	1b9b      	subs	r3, r3, r6
 8001292:	4432      	add	r2, r6
 8001294:	2000      	movs	r0, #0
 8001296:	60a3      	str	r3, [r4, #8]
 8001298:	6022      	str	r2, [r4, #0]
 800129a:	e7db      	b.n	8001254 <__ssputs_r+0x58>
 800129c:	462a      	mov	r2, r5
 800129e:	f000 fb7b 	bl	8001998 <_realloc_r>
 80012a2:	4606      	mov	r6, r0
 80012a4:	2800      	cmp	r0, #0
 80012a6:	d1e1      	bne.n	800126c <__ssputs_r+0x70>
 80012a8:	4650      	mov	r0, sl
 80012aa:	6921      	ldr	r1, [r4, #16]
 80012ac:	f000 face 	bl	800184c <_free_r>
 80012b0:	e7c7      	b.n	8001242 <__ssputs_r+0x46>
	...

080012b4 <_svfiprintf_r>:
 80012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b8:	4698      	mov	r8, r3
 80012ba:	898b      	ldrh	r3, [r1, #12]
 80012bc:	4607      	mov	r7, r0
 80012be:	061b      	lsls	r3, r3, #24
 80012c0:	460d      	mov	r5, r1
 80012c2:	4614      	mov	r4, r2
 80012c4:	b09d      	sub	sp, #116	; 0x74
 80012c6:	d50e      	bpl.n	80012e6 <_svfiprintf_r+0x32>
 80012c8:	690b      	ldr	r3, [r1, #16]
 80012ca:	b963      	cbnz	r3, 80012e6 <_svfiprintf_r+0x32>
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	f000 fb09 	bl	80018e4 <_malloc_r>
 80012d2:	6028      	str	r0, [r5, #0]
 80012d4:	6128      	str	r0, [r5, #16]
 80012d6:	b920      	cbnz	r0, 80012e2 <_svfiprintf_r+0x2e>
 80012d8:	230c      	movs	r3, #12
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	e0d1      	b.n	8001486 <_svfiprintf_r+0x1d2>
 80012e2:	2340      	movs	r3, #64	; 0x40
 80012e4:	616b      	str	r3, [r5, #20]
 80012e6:	2300      	movs	r3, #0
 80012e8:	9309      	str	r3, [sp, #36]	; 0x24
 80012ea:	2320      	movs	r3, #32
 80012ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012f0:	2330      	movs	r3, #48	; 0x30
 80012f2:	f04f 0901 	mov.w	r9, #1
 80012f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80012fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80014a0 <_svfiprintf_r+0x1ec>
 80012fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001302:	4623      	mov	r3, r4
 8001304:	469a      	mov	sl, r3
 8001306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800130a:	b10a      	cbz	r2, 8001310 <_svfiprintf_r+0x5c>
 800130c:	2a25      	cmp	r2, #37	; 0x25
 800130e:	d1f9      	bne.n	8001304 <_svfiprintf_r+0x50>
 8001310:	ebba 0b04 	subs.w	fp, sl, r4
 8001314:	d00b      	beq.n	800132e <_svfiprintf_r+0x7a>
 8001316:	465b      	mov	r3, fp
 8001318:	4622      	mov	r2, r4
 800131a:	4629      	mov	r1, r5
 800131c:	4638      	mov	r0, r7
 800131e:	f7ff ff6d 	bl	80011fc <__ssputs_r>
 8001322:	3001      	adds	r0, #1
 8001324:	f000 80aa 	beq.w	800147c <_svfiprintf_r+0x1c8>
 8001328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800132a:	445a      	add	r2, fp
 800132c:	9209      	str	r2, [sp, #36]	; 0x24
 800132e:	f89a 3000 	ldrb.w	r3, [sl]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80a2 	beq.w	800147c <_svfiprintf_r+0x1c8>
 8001338:	2300      	movs	r3, #0
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001342:	f10a 0a01 	add.w	sl, sl, #1
 8001346:	9304      	str	r3, [sp, #16]
 8001348:	9307      	str	r3, [sp, #28]
 800134a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800134e:	931a      	str	r3, [sp, #104]	; 0x68
 8001350:	4654      	mov	r4, sl
 8001352:	2205      	movs	r2, #5
 8001354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001358:	4851      	ldr	r0, [pc, #324]	; (80014a0 <_svfiprintf_r+0x1ec>)
 800135a:	f000 fa41 	bl	80017e0 <memchr>
 800135e:	9a04      	ldr	r2, [sp, #16]
 8001360:	b9d8      	cbnz	r0, 800139a <_svfiprintf_r+0xe6>
 8001362:	06d0      	lsls	r0, r2, #27
 8001364:	bf44      	itt	mi
 8001366:	2320      	movmi	r3, #32
 8001368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800136c:	0711      	lsls	r1, r2, #28
 800136e:	bf44      	itt	mi
 8001370:	232b      	movmi	r3, #43	; 0x2b
 8001372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001376:	f89a 3000 	ldrb.w	r3, [sl]
 800137a:	2b2a      	cmp	r3, #42	; 0x2a
 800137c:	d015      	beq.n	80013aa <_svfiprintf_r+0xf6>
 800137e:	4654      	mov	r4, sl
 8001380:	2000      	movs	r0, #0
 8001382:	f04f 0c0a 	mov.w	ip, #10
 8001386:	9a07      	ldr	r2, [sp, #28]
 8001388:	4621      	mov	r1, r4
 800138a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800138e:	3b30      	subs	r3, #48	; 0x30
 8001390:	2b09      	cmp	r3, #9
 8001392:	d94e      	bls.n	8001432 <_svfiprintf_r+0x17e>
 8001394:	b1b0      	cbz	r0, 80013c4 <_svfiprintf_r+0x110>
 8001396:	9207      	str	r2, [sp, #28]
 8001398:	e014      	b.n	80013c4 <_svfiprintf_r+0x110>
 800139a:	eba0 0308 	sub.w	r3, r0, r8
 800139e:	fa09 f303 	lsl.w	r3, r9, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	46a2      	mov	sl, r4
 80013a6:	9304      	str	r3, [sp, #16]
 80013a8:	e7d2      	b.n	8001350 <_svfiprintf_r+0x9c>
 80013aa:	9b03      	ldr	r3, [sp, #12]
 80013ac:	1d19      	adds	r1, r3, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	9103      	str	r1, [sp, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bfbb      	ittet	lt
 80013b6:	425b      	neglt	r3, r3
 80013b8:	f042 0202 	orrlt.w	r2, r2, #2
 80013bc:	9307      	strge	r3, [sp, #28]
 80013be:	9307      	strlt	r3, [sp, #28]
 80013c0:	bfb8      	it	lt
 80013c2:	9204      	strlt	r2, [sp, #16]
 80013c4:	7823      	ldrb	r3, [r4, #0]
 80013c6:	2b2e      	cmp	r3, #46	; 0x2e
 80013c8:	d10c      	bne.n	80013e4 <_svfiprintf_r+0x130>
 80013ca:	7863      	ldrb	r3, [r4, #1]
 80013cc:	2b2a      	cmp	r3, #42	; 0x2a
 80013ce:	d135      	bne.n	800143c <_svfiprintf_r+0x188>
 80013d0:	9b03      	ldr	r3, [sp, #12]
 80013d2:	3402      	adds	r4, #2
 80013d4:	1d1a      	adds	r2, r3, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	9203      	str	r2, [sp, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bfb8      	it	lt
 80013de:	f04f 33ff 	movlt.w	r3, #4294967295
 80013e2:	9305      	str	r3, [sp, #20]
 80013e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80014b0 <_svfiprintf_r+0x1fc>
 80013e8:	2203      	movs	r2, #3
 80013ea:	4650      	mov	r0, sl
 80013ec:	7821      	ldrb	r1, [r4, #0]
 80013ee:	f000 f9f7 	bl	80017e0 <memchr>
 80013f2:	b140      	cbz	r0, 8001406 <_svfiprintf_r+0x152>
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	eba0 000a 	sub.w	r0, r0, sl
 80013fa:	fa03 f000 	lsl.w	r0, r3, r0
 80013fe:	9b04      	ldr	r3, [sp, #16]
 8001400:	3401      	adds	r4, #1
 8001402:	4303      	orrs	r3, r0
 8001404:	9304      	str	r3, [sp, #16]
 8001406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800140a:	2206      	movs	r2, #6
 800140c:	4825      	ldr	r0, [pc, #148]	; (80014a4 <_svfiprintf_r+0x1f0>)
 800140e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001412:	f000 f9e5 	bl	80017e0 <memchr>
 8001416:	2800      	cmp	r0, #0
 8001418:	d038      	beq.n	800148c <_svfiprintf_r+0x1d8>
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <_svfiprintf_r+0x1f4>)
 800141c:	bb1b      	cbnz	r3, 8001466 <_svfiprintf_r+0x1b2>
 800141e:	9b03      	ldr	r3, [sp, #12]
 8001420:	3307      	adds	r3, #7
 8001422:	f023 0307 	bic.w	r3, r3, #7
 8001426:	3308      	adds	r3, #8
 8001428:	9303      	str	r3, [sp, #12]
 800142a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800142c:	4433      	add	r3, r6
 800142e:	9309      	str	r3, [sp, #36]	; 0x24
 8001430:	e767      	b.n	8001302 <_svfiprintf_r+0x4e>
 8001432:	460c      	mov	r4, r1
 8001434:	2001      	movs	r0, #1
 8001436:	fb0c 3202 	mla	r2, ip, r2, r3
 800143a:	e7a5      	b.n	8001388 <_svfiprintf_r+0xd4>
 800143c:	2300      	movs	r3, #0
 800143e:	f04f 0c0a 	mov.w	ip, #10
 8001442:	4619      	mov	r1, r3
 8001444:	3401      	adds	r4, #1
 8001446:	9305      	str	r3, [sp, #20]
 8001448:	4620      	mov	r0, r4
 800144a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800144e:	3a30      	subs	r2, #48	; 0x30
 8001450:	2a09      	cmp	r2, #9
 8001452:	d903      	bls.n	800145c <_svfiprintf_r+0x1a8>
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0c5      	beq.n	80013e4 <_svfiprintf_r+0x130>
 8001458:	9105      	str	r1, [sp, #20]
 800145a:	e7c3      	b.n	80013e4 <_svfiprintf_r+0x130>
 800145c:	4604      	mov	r4, r0
 800145e:	2301      	movs	r3, #1
 8001460:	fb0c 2101 	mla	r1, ip, r1, r2
 8001464:	e7f0      	b.n	8001448 <_svfiprintf_r+0x194>
 8001466:	ab03      	add	r3, sp, #12
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	462a      	mov	r2, r5
 800146c:	4638      	mov	r0, r7
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <_svfiprintf_r+0x1f8>)
 8001470:	a904      	add	r1, sp, #16
 8001472:	f3af 8000 	nop.w
 8001476:	1c42      	adds	r2, r0, #1
 8001478:	4606      	mov	r6, r0
 800147a:	d1d6      	bne.n	800142a <_svfiprintf_r+0x176>
 800147c:	89ab      	ldrh	r3, [r5, #12]
 800147e:	065b      	lsls	r3, r3, #25
 8001480:	f53f af2c 	bmi.w	80012dc <_svfiprintf_r+0x28>
 8001484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001486:	b01d      	add	sp, #116	; 0x74
 8001488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148c:	ab03      	add	r3, sp, #12
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	462a      	mov	r2, r5
 8001492:	4638      	mov	r0, r7
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <_svfiprintf_r+0x1f8>)
 8001496:	a904      	add	r1, sp, #16
 8001498:	f000 f87c 	bl	8001594 <_printf_i>
 800149c:	e7eb      	b.n	8001476 <_svfiprintf_r+0x1c2>
 800149e:	bf00      	nop
 80014a0:	08001a94 	.word	0x08001a94
 80014a4:	08001a9e 	.word	0x08001a9e
 80014a8:	00000000 	.word	0x00000000
 80014ac:	080011fd 	.word	0x080011fd
 80014b0:	08001a9a 	.word	0x08001a9a

080014b4 <_printf_common>:
 80014b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b8:	4616      	mov	r6, r2
 80014ba:	4699      	mov	r9, r3
 80014bc:	688a      	ldr	r2, [r1, #8]
 80014be:	690b      	ldr	r3, [r1, #16]
 80014c0:	4607      	mov	r7, r0
 80014c2:	4293      	cmp	r3, r2
 80014c4:	bfb8      	it	lt
 80014c6:	4613      	movlt	r3, r2
 80014c8:	6033      	str	r3, [r6, #0]
 80014ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80014ce:	460c      	mov	r4, r1
 80014d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80014d4:	b10a      	cbz	r2, 80014da <_printf_common+0x26>
 80014d6:	3301      	adds	r3, #1
 80014d8:	6033      	str	r3, [r6, #0]
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	0699      	lsls	r1, r3, #26
 80014de:	bf42      	ittt	mi
 80014e0:	6833      	ldrmi	r3, [r6, #0]
 80014e2:	3302      	addmi	r3, #2
 80014e4:	6033      	strmi	r3, [r6, #0]
 80014e6:	6825      	ldr	r5, [r4, #0]
 80014e8:	f015 0506 	ands.w	r5, r5, #6
 80014ec:	d106      	bne.n	80014fc <_printf_common+0x48>
 80014ee:	f104 0a19 	add.w	sl, r4, #25
 80014f2:	68e3      	ldr	r3, [r4, #12]
 80014f4:	6832      	ldr	r2, [r6, #0]
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	42ab      	cmp	r3, r5
 80014fa:	dc28      	bgt.n	800154e <_printf_common+0x9a>
 80014fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001500:	1e13      	subs	r3, r2, #0
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	bf18      	it	ne
 8001506:	2301      	movne	r3, #1
 8001508:	0692      	lsls	r2, r2, #26
 800150a:	d42d      	bmi.n	8001568 <_printf_common+0xb4>
 800150c:	4649      	mov	r1, r9
 800150e:	4638      	mov	r0, r7
 8001510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001514:	47c0      	blx	r8
 8001516:	3001      	adds	r0, #1
 8001518:	d020      	beq.n	800155c <_printf_common+0xa8>
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	68e5      	ldr	r5, [r4, #12]
 800151e:	f003 0306 	and.w	r3, r3, #6
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf18      	it	ne
 8001526:	2500      	movne	r5, #0
 8001528:	6832      	ldr	r2, [r6, #0]
 800152a:	f04f 0600 	mov.w	r6, #0
 800152e:	68a3      	ldr	r3, [r4, #8]
 8001530:	bf08      	it	eq
 8001532:	1aad      	subeq	r5, r5, r2
 8001534:	6922      	ldr	r2, [r4, #16]
 8001536:	bf08      	it	eq
 8001538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800153c:	4293      	cmp	r3, r2
 800153e:	bfc4      	itt	gt
 8001540:	1a9b      	subgt	r3, r3, r2
 8001542:	18ed      	addgt	r5, r5, r3
 8001544:	341a      	adds	r4, #26
 8001546:	42b5      	cmp	r5, r6
 8001548:	d11a      	bne.n	8001580 <_printf_common+0xcc>
 800154a:	2000      	movs	r0, #0
 800154c:	e008      	b.n	8001560 <_printf_common+0xac>
 800154e:	2301      	movs	r3, #1
 8001550:	4652      	mov	r2, sl
 8001552:	4649      	mov	r1, r9
 8001554:	4638      	mov	r0, r7
 8001556:	47c0      	blx	r8
 8001558:	3001      	adds	r0, #1
 800155a:	d103      	bne.n	8001564 <_printf_common+0xb0>
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001564:	3501      	adds	r5, #1
 8001566:	e7c4      	b.n	80014f2 <_printf_common+0x3e>
 8001568:	2030      	movs	r0, #48	; 0x30
 800156a:	18e1      	adds	r1, r4, r3
 800156c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001576:	4422      	add	r2, r4
 8001578:	3302      	adds	r3, #2
 800157a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800157e:	e7c5      	b.n	800150c <_printf_common+0x58>
 8001580:	2301      	movs	r3, #1
 8001582:	4622      	mov	r2, r4
 8001584:	4649      	mov	r1, r9
 8001586:	4638      	mov	r0, r7
 8001588:	47c0      	blx	r8
 800158a:	3001      	adds	r0, #1
 800158c:	d0e6      	beq.n	800155c <_printf_common+0xa8>
 800158e:	3601      	adds	r6, #1
 8001590:	e7d9      	b.n	8001546 <_printf_common+0x92>
	...

08001594 <_printf_i>:
 8001594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001598:	460c      	mov	r4, r1
 800159a:	7e27      	ldrb	r7, [r4, #24]
 800159c:	4691      	mov	r9, r2
 800159e:	2f78      	cmp	r7, #120	; 0x78
 80015a0:	4680      	mov	r8, r0
 80015a2:	469a      	mov	sl, r3
 80015a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80015a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015aa:	d807      	bhi.n	80015bc <_printf_i+0x28>
 80015ac:	2f62      	cmp	r7, #98	; 0x62
 80015ae:	d80a      	bhi.n	80015c6 <_printf_i+0x32>
 80015b0:	2f00      	cmp	r7, #0
 80015b2:	f000 80d9 	beq.w	8001768 <_printf_i+0x1d4>
 80015b6:	2f58      	cmp	r7, #88	; 0x58
 80015b8:	f000 80a4 	beq.w	8001704 <_printf_i+0x170>
 80015bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80015c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80015c4:	e03a      	b.n	800163c <_printf_i+0xa8>
 80015c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80015ca:	2b15      	cmp	r3, #21
 80015cc:	d8f6      	bhi.n	80015bc <_printf_i+0x28>
 80015ce:	a001      	add	r0, pc, #4	; (adr r0, 80015d4 <_printf_i+0x40>)
 80015d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80015d4:	0800162d 	.word	0x0800162d
 80015d8:	08001641 	.word	0x08001641
 80015dc:	080015bd 	.word	0x080015bd
 80015e0:	080015bd 	.word	0x080015bd
 80015e4:	080015bd 	.word	0x080015bd
 80015e8:	080015bd 	.word	0x080015bd
 80015ec:	08001641 	.word	0x08001641
 80015f0:	080015bd 	.word	0x080015bd
 80015f4:	080015bd 	.word	0x080015bd
 80015f8:	080015bd 	.word	0x080015bd
 80015fc:	080015bd 	.word	0x080015bd
 8001600:	0800174f 	.word	0x0800174f
 8001604:	08001671 	.word	0x08001671
 8001608:	08001731 	.word	0x08001731
 800160c:	080015bd 	.word	0x080015bd
 8001610:	080015bd 	.word	0x080015bd
 8001614:	08001771 	.word	0x08001771
 8001618:	080015bd 	.word	0x080015bd
 800161c:	08001671 	.word	0x08001671
 8001620:	080015bd 	.word	0x080015bd
 8001624:	080015bd 	.word	0x080015bd
 8001628:	08001739 	.word	0x08001739
 800162c:	680b      	ldr	r3, [r1, #0]
 800162e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001632:	1d1a      	adds	r2, r3, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	600a      	str	r2, [r1, #0]
 8001638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800163c:	2301      	movs	r3, #1
 800163e:	e0a4      	b.n	800178a <_printf_i+0x1f6>
 8001640:	6825      	ldr	r5, [r4, #0]
 8001642:	6808      	ldr	r0, [r1, #0]
 8001644:	062e      	lsls	r6, r5, #24
 8001646:	f100 0304 	add.w	r3, r0, #4
 800164a:	d50a      	bpl.n	8001662 <_printf_i+0xce>
 800164c:	6805      	ldr	r5, [r0, #0]
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	2d00      	cmp	r5, #0
 8001652:	da03      	bge.n	800165c <_printf_i+0xc8>
 8001654:	232d      	movs	r3, #45	; 0x2d
 8001656:	426d      	negs	r5, r5
 8001658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800165c:	230a      	movs	r3, #10
 800165e:	485e      	ldr	r0, [pc, #376]	; (80017d8 <_printf_i+0x244>)
 8001660:	e019      	b.n	8001696 <_printf_i+0x102>
 8001662:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001666:	6805      	ldr	r5, [r0, #0]
 8001668:	600b      	str	r3, [r1, #0]
 800166a:	bf18      	it	ne
 800166c:	b22d      	sxthne	r5, r5
 800166e:	e7ef      	b.n	8001650 <_printf_i+0xbc>
 8001670:	680b      	ldr	r3, [r1, #0]
 8001672:	6825      	ldr	r5, [r4, #0]
 8001674:	1d18      	adds	r0, r3, #4
 8001676:	6008      	str	r0, [r1, #0]
 8001678:	0628      	lsls	r0, r5, #24
 800167a:	d501      	bpl.n	8001680 <_printf_i+0xec>
 800167c:	681d      	ldr	r5, [r3, #0]
 800167e:	e002      	b.n	8001686 <_printf_i+0xf2>
 8001680:	0669      	lsls	r1, r5, #25
 8001682:	d5fb      	bpl.n	800167c <_printf_i+0xe8>
 8001684:	881d      	ldrh	r5, [r3, #0]
 8001686:	2f6f      	cmp	r7, #111	; 0x6f
 8001688:	bf0c      	ite	eq
 800168a:	2308      	moveq	r3, #8
 800168c:	230a      	movne	r3, #10
 800168e:	4852      	ldr	r0, [pc, #328]	; (80017d8 <_printf_i+0x244>)
 8001690:	2100      	movs	r1, #0
 8001692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001696:	6866      	ldr	r6, [r4, #4]
 8001698:	2e00      	cmp	r6, #0
 800169a:	bfa8      	it	ge
 800169c:	6821      	ldrge	r1, [r4, #0]
 800169e:	60a6      	str	r6, [r4, #8]
 80016a0:	bfa4      	itt	ge
 80016a2:	f021 0104 	bicge.w	r1, r1, #4
 80016a6:	6021      	strge	r1, [r4, #0]
 80016a8:	b90d      	cbnz	r5, 80016ae <_printf_i+0x11a>
 80016aa:	2e00      	cmp	r6, #0
 80016ac:	d04d      	beq.n	800174a <_printf_i+0x1b6>
 80016ae:	4616      	mov	r6, r2
 80016b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80016b4:	fb03 5711 	mls	r7, r3, r1, r5
 80016b8:	5dc7      	ldrb	r7, [r0, r7]
 80016ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80016be:	462f      	mov	r7, r5
 80016c0:	42bb      	cmp	r3, r7
 80016c2:	460d      	mov	r5, r1
 80016c4:	d9f4      	bls.n	80016b0 <_printf_i+0x11c>
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d10b      	bne.n	80016e2 <_printf_i+0x14e>
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	07df      	lsls	r7, r3, #31
 80016ce:	d508      	bpl.n	80016e2 <_printf_i+0x14e>
 80016d0:	6923      	ldr	r3, [r4, #16]
 80016d2:	6861      	ldr	r1, [r4, #4]
 80016d4:	4299      	cmp	r1, r3
 80016d6:	bfde      	ittt	le
 80016d8:	2330      	movle	r3, #48	; 0x30
 80016da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80016de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80016e2:	1b92      	subs	r2, r2, r6
 80016e4:	6122      	str	r2, [r4, #16]
 80016e6:	464b      	mov	r3, r9
 80016e8:	4621      	mov	r1, r4
 80016ea:	4640      	mov	r0, r8
 80016ec:	f8cd a000 	str.w	sl, [sp]
 80016f0:	aa03      	add	r2, sp, #12
 80016f2:	f7ff fedf 	bl	80014b4 <_printf_common>
 80016f6:	3001      	adds	r0, #1
 80016f8:	d14c      	bne.n	8001794 <_printf_i+0x200>
 80016fa:	f04f 30ff 	mov.w	r0, #4294967295
 80016fe:	b004      	add	sp, #16
 8001700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001704:	4834      	ldr	r0, [pc, #208]	; (80017d8 <_printf_i+0x244>)
 8001706:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800170a:	680e      	ldr	r6, [r1, #0]
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001712:	061f      	lsls	r7, r3, #24
 8001714:	600e      	str	r6, [r1, #0]
 8001716:	d514      	bpl.n	8001742 <_printf_i+0x1ae>
 8001718:	07d9      	lsls	r1, r3, #31
 800171a:	bf44      	itt	mi
 800171c:	f043 0320 	orrmi.w	r3, r3, #32
 8001720:	6023      	strmi	r3, [r4, #0]
 8001722:	b91d      	cbnz	r5, 800172c <_printf_i+0x198>
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	f023 0320 	bic.w	r3, r3, #32
 800172a:	6023      	str	r3, [r4, #0]
 800172c:	2310      	movs	r3, #16
 800172e:	e7af      	b.n	8001690 <_printf_i+0xfc>
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	f043 0320 	orr.w	r3, r3, #32
 8001736:	6023      	str	r3, [r4, #0]
 8001738:	2378      	movs	r3, #120	; 0x78
 800173a:	4828      	ldr	r0, [pc, #160]	; (80017dc <_printf_i+0x248>)
 800173c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001740:	e7e3      	b.n	800170a <_printf_i+0x176>
 8001742:	065e      	lsls	r6, r3, #25
 8001744:	bf48      	it	mi
 8001746:	b2ad      	uxthmi	r5, r5
 8001748:	e7e6      	b.n	8001718 <_printf_i+0x184>
 800174a:	4616      	mov	r6, r2
 800174c:	e7bb      	b.n	80016c6 <_printf_i+0x132>
 800174e:	680b      	ldr	r3, [r1, #0]
 8001750:	6826      	ldr	r6, [r4, #0]
 8001752:	1d1d      	adds	r5, r3, #4
 8001754:	6960      	ldr	r0, [r4, #20]
 8001756:	600d      	str	r5, [r1, #0]
 8001758:	0635      	lsls	r5, r6, #24
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	d501      	bpl.n	8001762 <_printf_i+0x1ce>
 800175e:	6018      	str	r0, [r3, #0]
 8001760:	e002      	b.n	8001768 <_printf_i+0x1d4>
 8001762:	0671      	lsls	r1, r6, #25
 8001764:	d5fb      	bpl.n	800175e <_printf_i+0x1ca>
 8001766:	8018      	strh	r0, [r3, #0]
 8001768:	2300      	movs	r3, #0
 800176a:	4616      	mov	r6, r2
 800176c:	6123      	str	r3, [r4, #16]
 800176e:	e7ba      	b.n	80016e6 <_printf_i+0x152>
 8001770:	680b      	ldr	r3, [r1, #0]
 8001772:	1d1a      	adds	r2, r3, #4
 8001774:	600a      	str	r2, [r1, #0]
 8001776:	681e      	ldr	r6, [r3, #0]
 8001778:	2100      	movs	r1, #0
 800177a:	4630      	mov	r0, r6
 800177c:	6862      	ldr	r2, [r4, #4]
 800177e:	f000 f82f 	bl	80017e0 <memchr>
 8001782:	b108      	cbz	r0, 8001788 <_printf_i+0x1f4>
 8001784:	1b80      	subs	r0, r0, r6
 8001786:	6060      	str	r0, [r4, #4]
 8001788:	6863      	ldr	r3, [r4, #4]
 800178a:	6123      	str	r3, [r4, #16]
 800178c:	2300      	movs	r3, #0
 800178e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001792:	e7a8      	b.n	80016e6 <_printf_i+0x152>
 8001794:	4632      	mov	r2, r6
 8001796:	4649      	mov	r1, r9
 8001798:	4640      	mov	r0, r8
 800179a:	6923      	ldr	r3, [r4, #16]
 800179c:	47d0      	blx	sl
 800179e:	3001      	adds	r0, #1
 80017a0:	d0ab      	beq.n	80016fa <_printf_i+0x166>
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	079b      	lsls	r3, r3, #30
 80017a6:	d413      	bmi.n	80017d0 <_printf_i+0x23c>
 80017a8:	68e0      	ldr	r0, [r4, #12]
 80017aa:	9b03      	ldr	r3, [sp, #12]
 80017ac:	4298      	cmp	r0, r3
 80017ae:	bfb8      	it	lt
 80017b0:	4618      	movlt	r0, r3
 80017b2:	e7a4      	b.n	80016fe <_printf_i+0x16a>
 80017b4:	2301      	movs	r3, #1
 80017b6:	4632      	mov	r2, r6
 80017b8:	4649      	mov	r1, r9
 80017ba:	4640      	mov	r0, r8
 80017bc:	47d0      	blx	sl
 80017be:	3001      	adds	r0, #1
 80017c0:	d09b      	beq.n	80016fa <_printf_i+0x166>
 80017c2:	3501      	adds	r5, #1
 80017c4:	68e3      	ldr	r3, [r4, #12]
 80017c6:	9903      	ldr	r1, [sp, #12]
 80017c8:	1a5b      	subs	r3, r3, r1
 80017ca:	42ab      	cmp	r3, r5
 80017cc:	dcf2      	bgt.n	80017b4 <_printf_i+0x220>
 80017ce:	e7eb      	b.n	80017a8 <_printf_i+0x214>
 80017d0:	2500      	movs	r5, #0
 80017d2:	f104 0619 	add.w	r6, r4, #25
 80017d6:	e7f5      	b.n	80017c4 <_printf_i+0x230>
 80017d8:	08001aa5 	.word	0x08001aa5
 80017dc:	08001ab6 	.word	0x08001ab6

080017e0 <memchr>:
 80017e0:	4603      	mov	r3, r0
 80017e2:	b510      	push	{r4, lr}
 80017e4:	b2c9      	uxtb	r1, r1
 80017e6:	4402      	add	r2, r0
 80017e8:	4293      	cmp	r3, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	d101      	bne.n	80017f2 <memchr+0x12>
 80017ee:	2000      	movs	r0, #0
 80017f0:	e003      	b.n	80017fa <memchr+0x1a>
 80017f2:	7804      	ldrb	r4, [r0, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	428c      	cmp	r4, r1
 80017f8:	d1f6      	bne.n	80017e8 <memchr+0x8>
 80017fa:	bd10      	pop	{r4, pc}

080017fc <memcpy>:
 80017fc:	440a      	add	r2, r1
 80017fe:	4291      	cmp	r1, r2
 8001800:	f100 33ff 	add.w	r3, r0, #4294967295
 8001804:	d100      	bne.n	8001808 <memcpy+0xc>
 8001806:	4770      	bx	lr
 8001808:	b510      	push	{r4, lr}
 800180a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800180e:	4291      	cmp	r1, r2
 8001810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001814:	d1f9      	bne.n	800180a <memcpy+0xe>
 8001816:	bd10      	pop	{r4, pc}

08001818 <memmove>:
 8001818:	4288      	cmp	r0, r1
 800181a:	b510      	push	{r4, lr}
 800181c:	eb01 0402 	add.w	r4, r1, r2
 8001820:	d902      	bls.n	8001828 <memmove+0x10>
 8001822:	4284      	cmp	r4, r0
 8001824:	4623      	mov	r3, r4
 8001826:	d807      	bhi.n	8001838 <memmove+0x20>
 8001828:	1e43      	subs	r3, r0, #1
 800182a:	42a1      	cmp	r1, r4
 800182c:	d008      	beq.n	8001840 <memmove+0x28>
 800182e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001836:	e7f8      	b.n	800182a <memmove+0x12>
 8001838:	4601      	mov	r1, r0
 800183a:	4402      	add	r2, r0
 800183c:	428a      	cmp	r2, r1
 800183e:	d100      	bne.n	8001842 <memmove+0x2a>
 8001840:	bd10      	pop	{r4, pc}
 8001842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800184a:	e7f7      	b.n	800183c <memmove+0x24>

0800184c <_free_r>:
 800184c:	b538      	push	{r3, r4, r5, lr}
 800184e:	4605      	mov	r5, r0
 8001850:	2900      	cmp	r1, #0
 8001852:	d043      	beq.n	80018dc <_free_r+0x90>
 8001854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001858:	1f0c      	subs	r4, r1, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	bfb8      	it	lt
 800185e:	18e4      	addlt	r4, r4, r3
 8001860:	f000 f8d0 	bl	8001a04 <__malloc_lock>
 8001864:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <_free_r+0x94>)
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	4610      	mov	r0, r2
 800186a:	b933      	cbnz	r3, 800187a <_free_r+0x2e>
 800186c:	6063      	str	r3, [r4, #4]
 800186e:	6014      	str	r4, [r2, #0]
 8001870:	4628      	mov	r0, r5
 8001872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001876:	f000 b8cb 	b.w	8001a10 <__malloc_unlock>
 800187a:	42a3      	cmp	r3, r4
 800187c:	d90a      	bls.n	8001894 <_free_r+0x48>
 800187e:	6821      	ldr	r1, [r4, #0]
 8001880:	1862      	adds	r2, r4, r1
 8001882:	4293      	cmp	r3, r2
 8001884:	bf01      	itttt	eq
 8001886:	681a      	ldreq	r2, [r3, #0]
 8001888:	685b      	ldreq	r3, [r3, #4]
 800188a:	1852      	addeq	r2, r2, r1
 800188c:	6022      	streq	r2, [r4, #0]
 800188e:	6063      	str	r3, [r4, #4]
 8001890:	6004      	str	r4, [r0, #0]
 8001892:	e7ed      	b.n	8001870 <_free_r+0x24>
 8001894:	461a      	mov	r2, r3
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	b10b      	cbz	r3, 800189e <_free_r+0x52>
 800189a:	42a3      	cmp	r3, r4
 800189c:	d9fa      	bls.n	8001894 <_free_r+0x48>
 800189e:	6811      	ldr	r1, [r2, #0]
 80018a0:	1850      	adds	r0, r2, r1
 80018a2:	42a0      	cmp	r0, r4
 80018a4:	d10b      	bne.n	80018be <_free_r+0x72>
 80018a6:	6820      	ldr	r0, [r4, #0]
 80018a8:	4401      	add	r1, r0
 80018aa:	1850      	adds	r0, r2, r1
 80018ac:	4283      	cmp	r3, r0
 80018ae:	6011      	str	r1, [r2, #0]
 80018b0:	d1de      	bne.n	8001870 <_free_r+0x24>
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4401      	add	r1, r0
 80018b8:	6011      	str	r1, [r2, #0]
 80018ba:	6053      	str	r3, [r2, #4]
 80018bc:	e7d8      	b.n	8001870 <_free_r+0x24>
 80018be:	d902      	bls.n	80018c6 <_free_r+0x7a>
 80018c0:	230c      	movs	r3, #12
 80018c2:	602b      	str	r3, [r5, #0]
 80018c4:	e7d4      	b.n	8001870 <_free_r+0x24>
 80018c6:	6820      	ldr	r0, [r4, #0]
 80018c8:	1821      	adds	r1, r4, r0
 80018ca:	428b      	cmp	r3, r1
 80018cc:	bf01      	itttt	eq
 80018ce:	6819      	ldreq	r1, [r3, #0]
 80018d0:	685b      	ldreq	r3, [r3, #4]
 80018d2:	1809      	addeq	r1, r1, r0
 80018d4:	6021      	streq	r1, [r4, #0]
 80018d6:	6063      	str	r3, [r4, #4]
 80018d8:	6054      	str	r4, [r2, #4]
 80018da:	e7c9      	b.n	8001870 <_free_r+0x24>
 80018dc:	bd38      	pop	{r3, r4, r5, pc}
 80018de:	bf00      	nop
 80018e0:	200000c4 	.word	0x200000c4

080018e4 <_malloc_r>:
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e6:	1ccd      	adds	r5, r1, #3
 80018e8:	f025 0503 	bic.w	r5, r5, #3
 80018ec:	3508      	adds	r5, #8
 80018ee:	2d0c      	cmp	r5, #12
 80018f0:	bf38      	it	cc
 80018f2:	250c      	movcc	r5, #12
 80018f4:	2d00      	cmp	r5, #0
 80018f6:	4606      	mov	r6, r0
 80018f8:	db01      	blt.n	80018fe <_malloc_r+0x1a>
 80018fa:	42a9      	cmp	r1, r5
 80018fc:	d903      	bls.n	8001906 <_malloc_r+0x22>
 80018fe:	230c      	movs	r3, #12
 8001900:	6033      	str	r3, [r6, #0]
 8001902:	2000      	movs	r0, #0
 8001904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001906:	f000 f87d 	bl	8001a04 <__malloc_lock>
 800190a:	4921      	ldr	r1, [pc, #132]	; (8001990 <_malloc_r+0xac>)
 800190c:	680a      	ldr	r2, [r1, #0]
 800190e:	4614      	mov	r4, r2
 8001910:	b99c      	cbnz	r4, 800193a <_malloc_r+0x56>
 8001912:	4f20      	ldr	r7, [pc, #128]	; (8001994 <_malloc_r+0xb0>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b923      	cbnz	r3, 8001922 <_malloc_r+0x3e>
 8001918:	4621      	mov	r1, r4
 800191a:	4630      	mov	r0, r6
 800191c:	f000 f862 	bl	80019e4 <_sbrk_r>
 8001920:	6038      	str	r0, [r7, #0]
 8001922:	4629      	mov	r1, r5
 8001924:	4630      	mov	r0, r6
 8001926:	f000 f85d 	bl	80019e4 <_sbrk_r>
 800192a:	1c43      	adds	r3, r0, #1
 800192c:	d123      	bne.n	8001976 <_malloc_r+0x92>
 800192e:	230c      	movs	r3, #12
 8001930:	4630      	mov	r0, r6
 8001932:	6033      	str	r3, [r6, #0]
 8001934:	f000 f86c 	bl	8001a10 <__malloc_unlock>
 8001938:	e7e3      	b.n	8001902 <_malloc_r+0x1e>
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	1b5b      	subs	r3, r3, r5
 800193e:	d417      	bmi.n	8001970 <_malloc_r+0x8c>
 8001940:	2b0b      	cmp	r3, #11
 8001942:	d903      	bls.n	800194c <_malloc_r+0x68>
 8001944:	6023      	str	r3, [r4, #0]
 8001946:	441c      	add	r4, r3
 8001948:	6025      	str	r5, [r4, #0]
 800194a:	e004      	b.n	8001956 <_malloc_r+0x72>
 800194c:	6863      	ldr	r3, [r4, #4]
 800194e:	42a2      	cmp	r2, r4
 8001950:	bf0c      	ite	eq
 8001952:	600b      	streq	r3, [r1, #0]
 8001954:	6053      	strne	r3, [r2, #4]
 8001956:	4630      	mov	r0, r6
 8001958:	f000 f85a 	bl	8001a10 <__malloc_unlock>
 800195c:	f104 000b 	add.w	r0, r4, #11
 8001960:	1d23      	adds	r3, r4, #4
 8001962:	f020 0007 	bic.w	r0, r0, #7
 8001966:	1ac2      	subs	r2, r0, r3
 8001968:	d0cc      	beq.n	8001904 <_malloc_r+0x20>
 800196a:	1a1b      	subs	r3, r3, r0
 800196c:	50a3      	str	r3, [r4, r2]
 800196e:	e7c9      	b.n	8001904 <_malloc_r+0x20>
 8001970:	4622      	mov	r2, r4
 8001972:	6864      	ldr	r4, [r4, #4]
 8001974:	e7cc      	b.n	8001910 <_malloc_r+0x2c>
 8001976:	1cc4      	adds	r4, r0, #3
 8001978:	f024 0403 	bic.w	r4, r4, #3
 800197c:	42a0      	cmp	r0, r4
 800197e:	d0e3      	beq.n	8001948 <_malloc_r+0x64>
 8001980:	1a21      	subs	r1, r4, r0
 8001982:	4630      	mov	r0, r6
 8001984:	f000 f82e 	bl	80019e4 <_sbrk_r>
 8001988:	3001      	adds	r0, #1
 800198a:	d1dd      	bne.n	8001948 <_malloc_r+0x64>
 800198c:	e7cf      	b.n	800192e <_malloc_r+0x4a>
 800198e:	bf00      	nop
 8001990:	200000c4 	.word	0x200000c4
 8001994:	200000c8 	.word	0x200000c8

08001998 <_realloc_r>:
 8001998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800199a:	4607      	mov	r7, r0
 800199c:	4614      	mov	r4, r2
 800199e:	460e      	mov	r6, r1
 80019a0:	b921      	cbnz	r1, 80019ac <_realloc_r+0x14>
 80019a2:	4611      	mov	r1, r2
 80019a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80019a8:	f7ff bf9c 	b.w	80018e4 <_malloc_r>
 80019ac:	b922      	cbnz	r2, 80019b8 <_realloc_r+0x20>
 80019ae:	f7ff ff4d 	bl	800184c <_free_r>
 80019b2:	4625      	mov	r5, r4
 80019b4:	4628      	mov	r0, r5
 80019b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019b8:	f000 f830 	bl	8001a1c <_malloc_usable_size_r>
 80019bc:	42a0      	cmp	r0, r4
 80019be:	d20f      	bcs.n	80019e0 <_realloc_r+0x48>
 80019c0:	4621      	mov	r1, r4
 80019c2:	4638      	mov	r0, r7
 80019c4:	f7ff ff8e 	bl	80018e4 <_malloc_r>
 80019c8:	4605      	mov	r5, r0
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d0f2      	beq.n	80019b4 <_realloc_r+0x1c>
 80019ce:	4631      	mov	r1, r6
 80019d0:	4622      	mov	r2, r4
 80019d2:	f7ff ff13 	bl	80017fc <memcpy>
 80019d6:	4631      	mov	r1, r6
 80019d8:	4638      	mov	r0, r7
 80019da:	f7ff ff37 	bl	800184c <_free_r>
 80019de:	e7e9      	b.n	80019b4 <_realloc_r+0x1c>
 80019e0:	4635      	mov	r5, r6
 80019e2:	e7e7      	b.n	80019b4 <_realloc_r+0x1c>

080019e4 <_sbrk_r>:
 80019e4:	b538      	push	{r3, r4, r5, lr}
 80019e6:	2300      	movs	r3, #0
 80019e8:	4d05      	ldr	r5, [pc, #20]	; (8001a00 <_sbrk_r+0x1c>)
 80019ea:	4604      	mov	r4, r0
 80019ec:	4608      	mov	r0, r1
 80019ee:	602b      	str	r3, [r5, #0]
 80019f0:	f7fe fdd8 	bl	80005a4 <_sbrk>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	d102      	bne.n	80019fe <_sbrk_r+0x1a>
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	b103      	cbz	r3, 80019fe <_sbrk_r+0x1a>
 80019fc:	6023      	str	r3, [r4, #0]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	200000d4 	.word	0x200000d4

08001a04 <__malloc_lock>:
 8001a04:	4801      	ldr	r0, [pc, #4]	; (8001a0c <__malloc_lock+0x8>)
 8001a06:	f000 b811 	b.w	8001a2c <__retarget_lock_acquire_recursive>
 8001a0a:	bf00      	nop
 8001a0c:	200000dc 	.word	0x200000dc

08001a10 <__malloc_unlock>:
 8001a10:	4801      	ldr	r0, [pc, #4]	; (8001a18 <__malloc_unlock+0x8>)
 8001a12:	f000 b80c 	b.w	8001a2e <__retarget_lock_release_recursive>
 8001a16:	bf00      	nop
 8001a18:	200000dc 	.word	0x200000dc

08001a1c <_malloc_usable_size_r>:
 8001a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a20:	1f18      	subs	r0, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bfbc      	itt	lt
 8001a26:	580b      	ldrlt	r3, [r1, r0]
 8001a28:	18c0      	addlt	r0, r0, r3
 8001a2a:	4770      	bx	lr

08001a2c <__retarget_lock_acquire_recursive>:
 8001a2c:	4770      	bx	lr

08001a2e <__retarget_lock_release_recursive>:
 8001a2e:	4770      	bx	lr

08001a30 <_init>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	bf00      	nop
 8001a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a36:	bc08      	pop	{r3}
 8001a38:	469e      	mov	lr, r3
 8001a3a:	4770      	bx	lr

08001a3c <_fini>:
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	bf00      	nop
 8001a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a42:	bc08      	pop	{r3}
 8001a44:	469e      	mov	lr, r3
 8001a46:	4770      	bx	lr
