
7_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003318  08003318  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003318  08003318  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003318  08003318  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08003390  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003390  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000890c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c81  00000000  00000000  000289a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002a628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dcc  00000000  00000000  0002b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000985e  00000000  00000000  0004235c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085116  00000000  00000000  0004bbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0cd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002388  00000000  00000000  000d0d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003298 	.word	0x08003298

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003298 	.word	0x08003298

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb91 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f855 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9b5 	bl	80004c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f995 	bl	800048c <MX_DMA_Init>
  MX_ADC1_Init();
 8000162:	f000 f8ab 	bl	80002bc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000166:	f000 f967 	bl	8000438 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcVal,10);
 800016a:	220a      	movs	r2, #10
 800016c:	491e      	ldr	r1, [pc, #120]	; (80001e8 <main+0x9c>)
 800016e:	481f      	ldr	r0, [pc, #124]	; (80001ec <main+0xa0>)
 8000170:	f000 fce0 	bl	8000b34 <HAL_ADC_Start_DMA>
	  HAL_Delay(1);
 8000174:	2001      	movs	r0, #1
 8000176:	f000 fbe1 	bl	800093c <HAL_Delay>
	  HAL_ADC_Stop_DMA(&hadc1);
 800017a:	481c      	ldr	r0, [pc, #112]	; (80001ec <main+0xa0>)
 800017c:	f000 fdb8 	bl	8000cf0 <HAL_ADC_Stop_DMA>
	  for(uint8_t i = 0; i<10;i++)
 8000180:	2300      	movs	r3, #0
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	e021      	b.n	80001ca <main+0x7e>
		  {
			  HAL_UART_Transmit(&huart3, (uint8_t*)Buff, sprintf(Buff, "%d", adcVal[i]), 500);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4a17      	ldr	r2, [pc, #92]	; (80001e8 <main+0x9c>)
 800018a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800018e:	b29b      	uxth	r3, r3
 8000190:	461a      	mov	r2, r3
 8000192:	4917      	ldr	r1, [pc, #92]	; (80001f0 <main+0xa4>)
 8000194:	4817      	ldr	r0, [pc, #92]	; (80001f4 <main+0xa8>)
 8000196:	f002 fc45 	bl	8002a24 <siprintf>
 800019a:	4603      	mov	r3, r0
 800019c:	b29a      	uxth	r2, r3
 800019e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001a2:	4914      	ldr	r1, [pc, #80]	; (80001f4 <main+0xa8>)
 80001a4:	4814      	ldr	r0, [pc, #80]	; (80001f8 <main+0xac>)
 80001a6:	f002 faa0 	bl	80026ea <HAL_UART_Transmit>
			  if(i<9)
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	2b08      	cmp	r3, #8
 80001ae:	d806      	bhi.n	80001be <main+0x72>
				  HAL_UART_Transmit(&huart3,",", 1, 500);
 80001b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001b4:	2201      	movs	r2, #1
 80001b6:	4911      	ldr	r1, [pc, #68]	; (80001fc <main+0xb0>)
 80001b8:	480f      	ldr	r0, [pc, #60]	; (80001f8 <main+0xac>)
 80001ba:	f002 fa96 	bl	80026ea <HAL_UART_Transmit>
			  HAL_Delay(200);
 80001be:	20c8      	movs	r0, #200	; 0xc8
 80001c0:	f000 fbbc 	bl	800093c <HAL_Delay>
	  for(uint8_t i = 0; i<10;i++)
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	3301      	adds	r3, #1
 80001c8:	71fb      	strb	r3, [r7, #7]
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	2b09      	cmp	r3, #9
 80001ce:	d9da      	bls.n	8000186 <main+0x3a>
		  }
		  HAL_UART_Transmit(&huart3,"\n", 2, 500);
 80001d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001d4:	2202      	movs	r2, #2
 80001d6:	490a      	ldr	r1, [pc, #40]	; (8000200 <main+0xb4>)
 80001d8:	4807      	ldr	r0, [pc, #28]	; (80001f8 <main+0xac>)
 80001da:	f002 fa86 	bl	80026ea <HAL_UART_Transmit>
		  HAL_Delay(200);
 80001de:	20c8      	movs	r0, #200	; 0xc8
 80001e0:	f000 fbac 	bl	800093c <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcVal,10);
 80001e4:	e7c1      	b.n	800016a <main+0x1e>
 80001e6:	bf00      	nop
 80001e8:	20000154 	.word	0x20000154
 80001ec:	200000d8 	.word	0x200000d8
 80001f0:	080032b0 	.word	0x080032b0
 80001f4:	20000108 	.word	0x20000108
 80001f8:	20000098 	.word	0x20000098
 80001fc:	080032b4 	.word	0x080032b4
 8000200:	080032b8 	.word	0x080032b8

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b094      	sub	sp, #80	; 0x50
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fbfe 	bl	8002a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000250:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fd28 	bl	8001cb0 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000266:	f000 f95d 	bl	8000524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f001 ff92 	bl	80021b0 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000292:	f000 f947 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000296:	2302      	movs	r3, #2
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800029a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800029e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 f91e 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ae:	f000 f939 	bl	8000524 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3750      	adds	r7, #80	; 0x50
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002cc:	4b58      	ldr	r3, [pc, #352]	; (8000430 <MX_ADC1_Init+0x174>)
 80002ce:	4a59      	ldr	r2, [pc, #356]	; (8000434 <MX_ADC1_Init+0x178>)
 80002d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002d2:	4b57      	ldr	r3, [pc, #348]	; (8000430 <MX_ADC1_Init+0x174>)
 80002d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002da:	4b55      	ldr	r3, [pc, #340]	; (8000430 <MX_ADC1_Init+0x174>)
 80002dc:	2200      	movs	r2, #0
 80002de:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e0:	4b53      	ldr	r3, [pc, #332]	; (8000430 <MX_ADC1_Init+0x174>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e6:	4b52      	ldr	r3, [pc, #328]	; (8000430 <MX_ADC1_Init+0x174>)
 80002e8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ee:	4b50      	ldr	r3, [pc, #320]	; (8000430 <MX_ADC1_Init+0x174>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 80002f4:	4b4e      	ldr	r3, [pc, #312]	; (8000430 <MX_ADC1_Init+0x174>)
 80002f6:	220a      	movs	r2, #10
 80002f8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fa:	484d      	ldr	r0, [pc, #308]	; (8000430 <MX_ADC1_Init+0x174>)
 80002fc:	f000 fb42 	bl	8000984 <HAL_ADC_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000306:	f000 f90d 	bl	8000524 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800030a:	2300      	movs	r3, #0
 800030c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800030e:	2301      	movs	r3, #1
 8000310:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4619      	mov	r1, r3
 800031a:	4845      	ldr	r0, [pc, #276]	; (8000430 <MX_ADC1_Init+0x174>)
 800031c:	f000 fe1a 	bl	8000f54 <HAL_ADC_ConfigChannel>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000326:	f000 f8fd 	bl	8000524 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800032a:	2301      	movs	r3, #1
 800032c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800032e:	2302      	movs	r3, #2
 8000330:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4619      	mov	r1, r3
 8000336:	483e      	ldr	r0, [pc, #248]	; (8000430 <MX_ADC1_Init+0x174>)
 8000338:	f000 fe0c 	bl	8000f54 <HAL_ADC_ConfigChannel>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000342:	f000 f8ef 	bl	8000524 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000346:	2302      	movs	r3, #2
 8000348:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800034a:	2303      	movs	r3, #3
 800034c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4619      	mov	r1, r3
 8000352:	4837      	ldr	r0, [pc, #220]	; (8000430 <MX_ADC1_Init+0x174>)
 8000354:	f000 fdfe 	bl	8000f54 <HAL_ADC_ConfigChannel>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800035e:	f000 f8e1 	bl	8000524 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000362:	2303      	movs	r3, #3
 8000364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000366:	2304      	movs	r3, #4
 8000368:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4619      	mov	r1, r3
 800036e:	4830      	ldr	r0, [pc, #192]	; (8000430 <MX_ADC1_Init+0x174>)
 8000370:	f000 fdf0 	bl	8000f54 <HAL_ADC_ConfigChannel>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800037a:	f000 f8d3 	bl	8000524 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800037e:	2304      	movs	r3, #4
 8000380:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000382:	2305      	movs	r3, #5
 8000384:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4619      	mov	r1, r3
 800038a:	4829      	ldr	r0, [pc, #164]	; (8000430 <MX_ADC1_Init+0x174>)
 800038c:	f000 fde2 	bl	8000f54 <HAL_ADC_ConfigChannel>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000396:	f000 f8c5 	bl	8000524 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800039a:	2305      	movs	r3, #5
 800039c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800039e:	2306      	movs	r3, #6
 80003a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4619      	mov	r1, r3
 80003a6:	4822      	ldr	r0, [pc, #136]	; (8000430 <MX_ADC1_Init+0x174>)
 80003a8:	f000 fdd4 	bl	8000f54 <HAL_ADC_ConfigChannel>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80003b2:	f000 f8b7 	bl	8000524 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80003b6:	2306      	movs	r3, #6
 80003b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80003ba:	2307      	movs	r3, #7
 80003bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4619      	mov	r1, r3
 80003c2:	481b      	ldr	r0, [pc, #108]	; (8000430 <MX_ADC1_Init+0x174>)
 80003c4:	f000 fdc6 	bl	8000f54 <HAL_ADC_ConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80003ce:	f000 f8a9 	bl	8000524 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003d2:	2307      	movs	r3, #7
 80003d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80003d6:	2308      	movs	r3, #8
 80003d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4619      	mov	r1, r3
 80003de:	4814      	ldr	r0, [pc, #80]	; (8000430 <MX_ADC1_Init+0x174>)
 80003e0:	f000 fdb8 	bl	8000f54 <HAL_ADC_ConfigChannel>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80003ea:	f000 f89b 	bl	8000524 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80003ee:	2308      	movs	r3, #8
 80003f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80003f2:	2309      	movs	r3, #9
 80003f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	480d      	ldr	r0, [pc, #52]	; (8000430 <MX_ADC1_Init+0x174>)
 80003fc:	f000 fdaa 	bl	8000f54 <HAL_ADC_ConfigChannel>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000406:	f000 f88d 	bl	8000524 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800040a:	2309      	movs	r3, #9
 800040c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800040e:	230a      	movs	r3, #10
 8000410:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	4619      	mov	r1, r3
 8000416:	4806      	ldr	r0, [pc, #24]	; (8000430 <MX_ADC1_Init+0x174>)
 8000418:	f000 fd9c 	bl	8000f54 <HAL_ADC_ConfigChannel>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000422:	f000 f87f 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200000d8 	.word	0x200000d8
 8000434:	40012400 	.word	0x40012400

08000438 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_USART3_UART_Init+0x4c>)
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <MX_USART3_UART_Init+0x50>)
 8000440:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_USART3_UART_Init+0x4c>)
 8000444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000448:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_USART3_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_USART3_UART_Init+0x4c>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_USART3_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_USART3_UART_Init+0x4c>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_USART3_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_USART3_UART_Init+0x4c>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_USART3_UART_Init+0x4c>)
 8000470:	f002 f8ee 	bl	8002650 <HAL_UART_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800047a:	f000 f853 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000098 	.word	0x20000098
 8000488:	40004800 	.word	0x40004800

0800048c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_DMA_Init+0x38>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <MX_DMA_Init+0x38>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_DMA_Init+0x38>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	200b      	movs	r0, #11
 80004b0:	f001 f81b 	bl	80014ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004b4:	200b      	movs	r0, #11
 80004b6:	f001 f834 	bl	8001522 <HAL_NVIC_EnableIRQ>

}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_GPIO_Init+0x58>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a13      	ldr	r2, [pc, #76]	; (8000520 <MX_GPIO_Init+0x58>)
 80004d4:	f043 0320 	orr.w	r3, r3, #32
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_GPIO_Init+0x58>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0320 	and.w	r3, r3, #32
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_GPIO_Init+0x58>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <MX_GPIO_Init+0x58>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_GPIO_Init+0x58>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_GPIO_Init+0x58>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <MX_GPIO_Init+0x58>)
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <MX_GPIO_Init+0x58>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0308 	and.w	r3, r3, #8
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052c:	e7fe      	b.n	800052c <Error_Handler+0x8>
	...

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_MspInit+0x5c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a14      	ldr	r2, [pc, #80]	; (800058c <HAL_MspInit+0x5c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_MspInit+0x5c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <HAL_MspInit+0x5c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a0e      	ldr	r2, [pc, #56]	; (800058c <HAL_MspInit+0x5c>)
 8000554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <HAL_MspInit+0x5c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <HAL_MspInit+0x60>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_MspInit+0x60>)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000
 8000590:	40010000 	.word	0x40010000

08000594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a37      	ldr	r2, [pc, #220]	; (800068c <HAL_ADC_MspInit+0xf8>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d167      	bne.n	8000684 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b4:	4b36      	ldr	r3, [pc, #216]	; (8000690 <HAL_ADC_MspInit+0xfc>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a35      	ldr	r2, [pc, #212]	; (8000690 <HAL_ADC_MspInit+0xfc>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b33      	ldr	r3, [pc, #204]	; (8000690 <HAL_ADC_MspInit+0xfc>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b30      	ldr	r3, [pc, #192]	; (8000690 <HAL_ADC_MspInit+0xfc>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a2f      	ldr	r2, [pc, #188]	; (8000690 <HAL_ADC_MspInit+0xfc>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <HAL_ADC_MspInit+0xfc>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <HAL_ADC_MspInit+0xfc>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a29      	ldr	r2, [pc, #164]	; (8000690 <HAL_ADC_MspInit+0xfc>)
 80005ea:	f043 0308 	orr.w	r3, r3, #8
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <HAL_ADC_MspInit+0xfc>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0308 	and.w	r3, r3, #8
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005fc:	23ff      	movs	r3, #255	; 0xff
 80005fe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000600:	2303      	movs	r3, #3
 8000602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f107 0318 	add.w	r3, r7, #24
 8000608:	4619      	mov	r1, r3
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <HAL_ADC_MspInit+0x100>)
 800060c:	f001 f9cc 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000610:	2303      	movs	r3, #3
 8000612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000614:	2303      	movs	r3, #3
 8000616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 0318 	add.w	r3, r7, #24
 800061c:	4619      	mov	r1, r3
 800061e:	481e      	ldr	r0, [pc, #120]	; (8000698 <HAL_ADC_MspInit+0x104>)
 8000620:	f001 f9c2 	bl	80019a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <HAL_ADC_MspInit+0x108>)
 8000626:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <HAL_ADC_MspInit+0x10c>)
 8000628:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <HAL_ADC_MspInit+0x108>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <HAL_ADC_MspInit+0x108>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <HAL_ADC_MspInit+0x108>)
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <HAL_ADC_MspInit+0x108>)
 800063e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000642:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_ADC_MspInit+0x108>)
 8000646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <HAL_ADC_MspInit+0x108>)
 800064e:	2220      	movs	r2, #32
 8000650:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_ADC_MspInit+0x108>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000658:	4810      	ldr	r0, [pc, #64]	; (800069c <HAL_ADC_MspInit+0x108>)
 800065a:	f000 ff7d 	bl	8001558 <HAL_DMA_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000664:	f7ff ff5e 	bl	8000524 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <HAL_ADC_MspInit+0x108>)
 800066c:	621a      	str	r2, [r3, #32]
 800066e:	4a0b      	ldr	r2, [pc, #44]	; (800069c <HAL_ADC_MspInit+0x108>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2012      	movs	r0, #18
 800067a:	f000 ff36 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800067e:	2012      	movs	r0, #18
 8000680:	f000 ff4f 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	; 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40012400 	.word	0x40012400
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800
 8000698:	40010c00 	.word	0x40010c00
 800069c:	20000110 	.word	0x20000110
 80006a0:	40020008 	.word	0x40020008

080006a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a1c      	ldr	r2, [pc, #112]	; (8000730 <HAL_UART_MspInit+0x8c>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d131      	bne.n	8000728 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <HAL_UART_MspInit+0x90>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	4a1a      	ldr	r2, [pc, #104]	; (8000734 <HAL_UART_MspInit+0x90>)
 80006ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ce:	61d3      	str	r3, [r2, #28]
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_UART_MspInit+0x90>)
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_UART_MspInit+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <HAL_UART_MspInit+0x90>)
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_UART_MspInit+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	2302      	movs	r3, #2
 80006fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4619      	mov	r1, r3
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <HAL_UART_MspInit+0x94>)
 800070a:	f001 f94d 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800070e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <HAL_UART_MspInit+0x94>)
 8000724:	f001 f940 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40004800 	.word	0x40004800
 8000734:	40021000 	.word	0x40021000
 8000738:	40010c00 	.word	0x40010c00

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000782:	f000 f8bf 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <DMA1_Channel1_IRQHandler+0x10>)
 8000792:	f000 ffd5 	bl	8001740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000110 	.word	0x20000110

080007a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <ADC1_2_IRQHandler+0x10>)
 80007a6:	f000 faee 	bl	8000d86 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000d8 	.word	0x200000d8

080007b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <_sbrk+0x5c>)
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <_sbrk+0x60>)
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d102      	bne.n	80007d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <_sbrk+0x64>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <_sbrk+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d207      	bcs.n	80007f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e4:	f002 f8ec 	bl	80029c0 <__errno>
 80007e8:	4603      	mov	r3, r0
 80007ea:	220c      	movs	r2, #12
 80007ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	e009      	b.n	8000808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <_sbrk+0x64>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <_sbrk+0x64>)
 8000804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000806:	68fb      	ldr	r3, [r7, #12]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20005000 	.word	0x20005000
 8000814:	00000400 	.word	0x00000400
 8000818:	2000008c 	.word	0x2000008c
 800081c:	20000180 	.word	0x20000180

08000820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800082c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800082e:	e003      	b.n	8000838 <LoopCopyDataInit>

08000830 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000832:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000834:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000836:	3104      	adds	r1, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800083c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800083e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000840:	d3f6      	bcc.n	8000830 <CopyDataInit>
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000844:	e002      	b.n	800084c <LoopFillZerobss>

08000846 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000848:	f842 3b04 	str.w	r3, [r2], #4

0800084c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800084e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000850:	d3f9      	bcc.n	8000846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000852:	f7ff ffe5 	bl	8000820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000856:	f002 f8b9 	bl	80029cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085a:	f7ff fc77 	bl	800014c <main>
  bx lr
 800085e:	4770      	bx	lr
  ldr r3, =_sidata
 8000860:	08003320 	.word	0x08003320
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000868:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800086c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000870:	2000017c 	.word	0x2000017c

08000874 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <CAN1_RX1_IRQHandler>
	...

08000878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x28>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 fe23 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	2000      	movs	r0, #0
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fe4c 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fe3b 	bl	800153e <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 fe03 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x1c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x20>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a03      	ldr	r2, [pc, #12]	; (8000924 <HAL_IncTick+0x20>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	20000008 	.word	0x20000008
 8000924:	20000168 	.word	0x20000168

08000928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <HAL_GetTick+0x10>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000168 	.word	0x20000168

0800093c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000944:	f7ff fff0 	bl	8000928 <HAL_GetTick>
 8000948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000954:	d005      	beq.n	8000962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_Delay+0x44>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000962:	bf00      	nop
 8000964:	f7ff ffe0 	bl	8000928 <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	429a      	cmp	r2, r3
 8000972:	d8f7      	bhi.n	8000964 <HAL_Delay+0x28>
  {
  }
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008

08000984 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d101      	bne.n	80009a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e0be      	b.n	8000b24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d109      	bne.n	80009c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fde6 	bl	8000594 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f000 fc0d 	bl	80011e8 <ADC_ConversionStop_Disable>
 80009ce:	4603      	mov	r3, r0
 80009d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f040 8099 	bne.w	8000b12 <HAL_ADC_Init+0x18e>
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f040 8095 	bne.w	8000b12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009f0:	f023 0302 	bic.w	r3, r3, #2
 80009f4:	f043 0202 	orr.w	r2, r3, #2
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7b1b      	ldrb	r3, [r3, #12]
 8000a0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a1c:	d003      	beq.n	8000a26 <HAL_ADC_Init+0xa2>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d102      	bne.n	8000a2c <HAL_ADC_Init+0xa8>
 8000a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2a:	e000      	b.n	8000a2e <HAL_ADC_Init+0xaa>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7d1b      	ldrb	r3, [r3, #20]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d119      	bne.n	8000a70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7b1b      	ldrb	r3, [r3, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d109      	bne.n	8000a58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	035a      	lsls	r2, r3, #13
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	e00b      	b.n	8000a70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5c:	f043 0220 	orr.w	r2, r3, #32
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	f043 0201 	orr.w	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	430a      	orrs	r2, r1
 8000a82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <HAL_ADC_Init+0x1a8>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	430b      	orrs	r3, r1
 8000a96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aa0:	d003      	beq.n	8000aaa <HAL_ADC_Init+0x126>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d104      	bne.n	8000ab4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	051b      	lsls	r3, r3, #20
 8000ab2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_ADC_Init+0x1ac>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d10b      	bne.n	8000af0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae2:	f023 0303 	bic.w	r3, r3, #3
 8000ae6:	f043 0201 	orr.w	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aee:	e018      	b.n	8000b22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	f023 0312 	bic.w	r3, r3, #18
 8000af8:	f043 0210 	orr.w	r2, r3, #16
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b04:	f043 0201 	orr.w	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b10:	e007      	b.n	8000b22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b16:	f043 0210 	orr.w	r2, r3, #16
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b30:	ff1f0efe 	.word	0xff1f0efe

08000b34 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a64      	ldr	r2, [pc, #400]	; (8000cdc <HAL_ADC_Start_DMA+0x1a8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d004      	beq.n	8000b58 <HAL_ADC_Start_DMA+0x24>
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a63      	ldr	r2, [pc, #396]	; (8000ce0 <HAL_ADC_Start_DMA+0x1ac>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d106      	bne.n	8000b66 <HAL_ADC_Start_DMA+0x32>
 8000b58:	4b60      	ldr	r3, [pc, #384]	; (8000cdc <HAL_ADC_Start_DMA+0x1a8>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f040 80b3 	bne.w	8000ccc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d101      	bne.n	8000b74 <HAL_ADC_Start_DMA+0x40>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e0ae      	b.n	8000cd2 <HAL_ADC_Start_DMA+0x19e>
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2201      	movs	r2, #1
 8000b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f000 fae1 	bl	8001144 <ADC_Enable>
 8000b82:	4603      	mov	r3, r0
 8000b84:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f040 809a 	bne.w	8000cc2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b96:	f023 0301 	bic.w	r3, r3, #1
 8000b9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a4e      	ldr	r2, [pc, #312]	; (8000ce0 <HAL_ADC_Start_DMA+0x1ac>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d105      	bne.n	8000bb8 <HAL_ADC_Start_DMA+0x84>
 8000bac:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <HAL_ADC_Start_DMA+0x1a8>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d115      	bne.n	8000be4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d026      	beq.n	8000c20 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000be2:	e01d      	b.n	8000c20 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a39      	ldr	r2, [pc, #228]	; (8000cdc <HAL_ADC_Start_DMA+0x1a8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d004      	beq.n	8000c04 <HAL_ADC_Start_DMA+0xd0>
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a38      	ldr	r2, [pc, #224]	; (8000ce0 <HAL_ADC_Start_DMA+0x1ac>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d10d      	bne.n	8000c20 <HAL_ADC_Start_DMA+0xec>
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <HAL_ADC_Start_DMA+0x1a8>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d007      	beq.n	8000c20 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	f023 0206 	bic.w	r2, r3, #6
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c38:	e002      	b.n	8000c40 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	4a25      	ldr	r2, [pc, #148]	; (8000ce4 <HAL_ADC_Start_DMA+0x1b0>)
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	4a24      	ldr	r2, [pc, #144]	; (8000ce8 <HAL_ADC_Start_DMA+0x1b4>)
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	4a23      	ldr	r2, [pc, #140]	; (8000cec <HAL_ADC_Start_DMA+0x1b8>)
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f06f 0202 	mvn.w	r2, #2
 8000c68:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c78:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6a18      	ldr	r0, [r3, #32]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	334c      	adds	r3, #76	; 0x4c
 8000c84:	4619      	mov	r1, r3
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f000 fcbf 	bl	800160c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c9c:	d108      	bne.n	8000cb0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000cac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cae:	e00f      	b.n	8000cd0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cbe:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cc0:	e006      	b.n	8000cd0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000cca:	e001      	b.n	8000cd0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40012400 	.word	0x40012400
 8000ce0:	40012800 	.word	0x40012800
 8000ce4:	0800125d 	.word	0x0800125d
 8000ce8:	080012d9 	.word	0x080012d9
 8000cec:	080012f5 	.word	0x080012f5

08000cf0 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <HAL_ADC_Stop_DMA+0x1a>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e039      	b.n	8000d7e <HAL_ADC_Stop_DMA+0x8e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 fa68 	bl	80011e8 <ADC_ConversionStop_Disable>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d128      	bne.n	8000d74 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d30:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d11a      	bne.n	8000d74 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fcc1 	bl	80016ca <HAL_DMA_Abort>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10a      	bne.n	8000d68 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d5a:	f023 0301 	bic.w	r3, r3, #1
 8000d5e:	f043 0201 	orr.w	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
 8000d66:	e005      	b.n	8000d74 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0320 	and.w	r3, r3, #32
 8000d98:	2b20      	cmp	r3, #32
 8000d9a:	d140      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d139      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dcc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dd0:	d11d      	bne.n	8000e0e <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d119      	bne.n	8000e0e <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0220 	bic.w	r2, r2, #32
 8000de8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d105      	bne.n	8000e0e <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e06:	f043 0201 	orr.w	r2, r3, #1
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f87c 	bl	8000f0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f06f 0212 	mvn.w	r2, #18
 8000e1c:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e28:	2b80      	cmp	r3, #128	; 0x80
 8000e2a:	d14f      	bne.n	8000ecc <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	d148      	bne.n	8000ecc <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d105      	bne.n	8000e52 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000e5c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000e60:	d012      	beq.n	8000e88 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d125      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e7a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e7e:	d11d      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d119      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e96:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d105      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	f043 0201 	orr.w	r2, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 fa33 	bl	8001328 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f06f 020c 	mvn.w	r2, #12
 8000eca:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed6:	2b40      	cmp	r3, #64	; 0x40
 8000ed8:	d114      	bne.n	8000f04 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d10d      	bne.n	8000f04 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f81b 	bl	8000f30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f06f 0201 	mvn.w	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x20>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e0dc      	b.n	800112e <HAL_ADC_ConfigChannel+0x1da>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b06      	cmp	r3, #6
 8000f82:	d81c      	bhi.n	8000fbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	3b05      	subs	r3, #5
 8000f96:	221f      	movs	r2, #31
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4019      	ands	r1, r3
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	3b05      	subs	r3, #5
 8000fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34
 8000fbc:	e03c      	b.n	8001038 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b0c      	cmp	r3, #12
 8000fc4:	d81c      	bhi.n	8001000 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3b23      	subs	r3, #35	; 0x23
 8000fd8:	221f      	movs	r2, #31
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4019      	ands	r1, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	3b23      	subs	r3, #35	; 0x23
 8000ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffe:	e01b      	b.n	8001038 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	3b41      	subs	r3, #65	; 0x41
 8001012:	221f      	movs	r2, #31
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	4019      	ands	r1, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	3b41      	subs	r3, #65	; 0x41
 800102c:	fa00 f203 	lsl.w	r2, r0, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b09      	cmp	r3, #9
 800103e:	d91c      	bls.n	800107a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68d9      	ldr	r1, [r3, #12]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	3b1e      	subs	r3, #30
 8001052:	2207      	movs	r2, #7
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	4019      	ands	r1, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6898      	ldr	r0, [r3, #8]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	3b1e      	subs	r3, #30
 800106c:	fa00 f203 	lsl.w	r2, r0, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	e019      	b.n	80010ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6919      	ldr	r1, [r3, #16]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	2207      	movs	r2, #7
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	4019      	ands	r1, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	6898      	ldr	r0, [r3, #8]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	fa00 f203 	lsl.w	r2, r0, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d003      	beq.n	80010be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ba:	2b11      	cmp	r3, #17
 80010bc:	d132      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_ADC_ConfigChannel+0x1e4>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d125      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d126      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010e4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b10      	cmp	r3, #16
 80010ec:	d11a      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_ADC_ConfigChannel+0x1e8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <HAL_ADC_ConfigChannel+0x1ec>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	0c9a      	lsrs	r2, r3, #18
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001104:	e002      	b.n	800110c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3b01      	subs	r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f9      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x1b2>
 8001112:	e007      	b.n	8001124 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	f043 0220 	orr.w	r2, r3, #32
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40012400 	.word	0x40012400
 800113c:	20000000 	.word	0x20000000
 8001140:	431bde83 	.word	0x431bde83

08001144 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d039      	beq.n	80011d6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <ADC_Enable+0x9c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <ADC_Enable+0xa0>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	0c9b      	lsrs	r3, r3, #18
 800117e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001180:	e002      	b.n	8001188 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	3b01      	subs	r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800118e:	f7ff fbcb 	bl	8000928 <HAL_GetTick>
 8001192:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001194:	e018      	b.n	80011c8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001196:	f7ff fbc7 	bl	8000928 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d911      	bls.n	80011c8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f043 0210 	orr.w	r2, r3, #16
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e007      	b.n	80011d8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d1df      	bne.n	8001196 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	431bde83 	.word	0x431bde83

080011e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d127      	bne.n	8001252 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001212:	f7ff fb89 	bl	8000928 <HAL_GetTick>
 8001216:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001218:	e014      	b.n	8001244 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800121a:	f7ff fb85 	bl	8000928 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d90d      	bls.n	8001244 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f043 0210 	orr.w	r2, r3, #16
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	f043 0201 	orr.w	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e007      	b.n	8001254 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d0e3      	beq.n	800121a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001272:	2b00      	cmp	r3, #0
 8001274:	d127      	bne.n	80012c6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800128c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001290:	d115      	bne.n	80012be <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001296:	2b00      	cmp	r3, #0
 8001298:	d111      	bne.n	80012be <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	f043 0201 	orr.w	r2, r3, #1
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f7ff fe24 	bl	8000f0c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80012c4:	e004      	b.n	80012d0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	4798      	blx	r3
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff fe19 	bl	8000f1e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001306:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f043 0204 	orr.w	r2, r3, #4
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7ff fe11 	bl	8000f42 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4906      	ldr	r1, [pc, #24]	; (80013d4 <__NVIC_EnableIRQ+0x34>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f7ff ff90 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff2d 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff42 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff90 	bl	800142c <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5f 	bl	80013d8 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff35 	bl	80013a0 <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffa2 	bl	8001490 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e043      	b.n	80015f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_DMA_Init+0xa8>)
 8001576:	4413      	add	r3, r2
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <HAL_DMA_Init+0xac>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	009a      	lsls	r2, r3, #2
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_DMA_Init+0xb0>)
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	bffdfff8 	.word	0xbffdfff8
 8001604:	cccccccd 	.word	0xcccccccd
 8001608:	40020000 	.word	0x40020000

0800160c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_DMA_Start_IT+0x20>
 8001628:	2302      	movs	r3, #2
 800162a:	e04a      	b.n	80016c2 <HAL_DMA_Start_IT+0xb6>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800163a:	2b01      	cmp	r3, #1
 800163c:	d13a      	bne.n	80016b4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2202      	movs	r2, #2
 8001642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f972 	bl	800194c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 020e 	orr.w	r2, r2, #14
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e00f      	b.n	80016a2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0204 	bic.w	r2, r2, #4
 8001690:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 020a 	orr.w	r2, r2, #10
 80016a0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e005      	b.n	80016c0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016bc:	2302      	movs	r3, #2
 80016be:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d008      	beq.n	80016f2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2204      	movs	r2, #4
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e020      	b.n	8001734 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 020e 	bic.w	r2, r2, #14
 8001700:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	2204      	movs	r2, #4
 800175e:	409a      	lsls	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d04f      	beq.n	8001808 <HAL_DMA_IRQHandler+0xc8>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b00      	cmp	r3, #0
 8001770:	d04a      	beq.n	8001808 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0204 	bic.w	r2, r2, #4
 800178e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a66      	ldr	r2, [pc, #408]	; (8001930 <HAL_DMA_IRQHandler+0x1f0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d029      	beq.n	80017ee <HAL_DMA_IRQHandler+0xae>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a65      	ldr	r2, [pc, #404]	; (8001934 <HAL_DMA_IRQHandler+0x1f4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d022      	beq.n	80017ea <HAL_DMA_IRQHandler+0xaa>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a63      	ldr	r2, [pc, #396]	; (8001938 <HAL_DMA_IRQHandler+0x1f8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01a      	beq.n	80017e4 <HAL_DMA_IRQHandler+0xa4>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a62      	ldr	r2, [pc, #392]	; (800193c <HAL_DMA_IRQHandler+0x1fc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d012      	beq.n	80017de <HAL_DMA_IRQHandler+0x9e>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a60      	ldr	r2, [pc, #384]	; (8001940 <HAL_DMA_IRQHandler+0x200>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00a      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x98>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5f      	ldr	r2, [pc, #380]	; (8001944 <HAL_DMA_IRQHandler+0x204>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d102      	bne.n	80017d2 <HAL_DMA_IRQHandler+0x92>
 80017cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d0:	e00e      	b.n	80017f0 <HAL_DMA_IRQHandler+0xb0>
 80017d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017d6:	e00b      	b.n	80017f0 <HAL_DMA_IRQHandler+0xb0>
 80017d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017dc:	e008      	b.n	80017f0 <HAL_DMA_IRQHandler+0xb0>
 80017de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017e2:	e005      	b.n	80017f0 <HAL_DMA_IRQHandler+0xb0>
 80017e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e8:	e002      	b.n	80017f0 <HAL_DMA_IRQHandler+0xb0>
 80017ea:	2340      	movs	r3, #64	; 0x40
 80017ec:	e000      	b.n	80017f0 <HAL_DMA_IRQHandler+0xb0>
 80017ee:	2304      	movs	r3, #4
 80017f0:	4a55      	ldr	r2, [pc, #340]	; (8001948 <HAL_DMA_IRQHandler+0x208>)
 80017f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 8094 	beq.w	8001926 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001806:	e08e      	b.n	8001926 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	2202      	movs	r2, #2
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d056      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x186>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d051      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10b      	bne.n	8001848 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 020a 	bic.w	r2, r2, #10
 800183e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a38      	ldr	r2, [pc, #224]	; (8001930 <HAL_DMA_IRQHandler+0x1f0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d029      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x166>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a37      	ldr	r2, [pc, #220]	; (8001934 <HAL_DMA_IRQHandler+0x1f4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d022      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x162>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a35      	ldr	r2, [pc, #212]	; (8001938 <HAL_DMA_IRQHandler+0x1f8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01a      	beq.n	800189c <HAL_DMA_IRQHandler+0x15c>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a34      	ldr	r2, [pc, #208]	; (800193c <HAL_DMA_IRQHandler+0x1fc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d012      	beq.n	8001896 <HAL_DMA_IRQHandler+0x156>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a32      	ldr	r2, [pc, #200]	; (8001940 <HAL_DMA_IRQHandler+0x200>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00a      	beq.n	8001890 <HAL_DMA_IRQHandler+0x150>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a31      	ldr	r2, [pc, #196]	; (8001944 <HAL_DMA_IRQHandler+0x204>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d102      	bne.n	800188a <HAL_DMA_IRQHandler+0x14a>
 8001884:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001888:	e00e      	b.n	80018a8 <HAL_DMA_IRQHandler+0x168>
 800188a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800188e:	e00b      	b.n	80018a8 <HAL_DMA_IRQHandler+0x168>
 8001890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001894:	e008      	b.n	80018a8 <HAL_DMA_IRQHandler+0x168>
 8001896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189a:	e005      	b.n	80018a8 <HAL_DMA_IRQHandler+0x168>
 800189c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a0:	e002      	b.n	80018a8 <HAL_DMA_IRQHandler+0x168>
 80018a2:	2320      	movs	r3, #32
 80018a4:	e000      	b.n	80018a8 <HAL_DMA_IRQHandler+0x168>
 80018a6:	2302      	movs	r3, #2
 80018a8:	4a27      	ldr	r2, [pc, #156]	; (8001948 <HAL_DMA_IRQHandler+0x208>)
 80018aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d034      	beq.n	8001926 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018c4:	e02f      	b.n	8001926 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	2208      	movs	r2, #8
 80018cc:	409a      	lsls	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d028      	beq.n	8001928 <HAL_DMA_IRQHandler+0x1e8>
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d023      	beq.n	8001928 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 020e 	bic.w	r2, r2, #14
 80018ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
    }
  }
  return;
 8001926:	bf00      	nop
 8001928:	bf00      	nop
}
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40020008 	.word	0x40020008
 8001934:	4002001c 	.word	0x4002001c
 8001938:	40020030 	.word	0x40020030
 800193c:	40020044 	.word	0x40020044
 8001940:	40020058 	.word	0x40020058
 8001944:	4002006c 	.word	0x4002006c
 8001948:	40020000 	.word	0x40020000

0800194c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f202 	lsl.w	r2, r1, r2
 8001968:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b10      	cmp	r3, #16
 8001978:	d108      	bne.n	800198c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800198a:	e007      	b.n	800199c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	60da      	str	r2, [r3, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b08b      	sub	sp, #44	; 0x2c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	e169      	b.n	8001c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019bc:	2201      	movs	r2, #1
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f040 8158 	bne.w	8001c8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a9a      	ldr	r2, [pc, #616]	; (8001c48 <HAL_GPIO_Init+0x2a0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d05e      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019e4:	4a98      	ldr	r2, [pc, #608]	; (8001c48 <HAL_GPIO_Init+0x2a0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d875      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019ea:	4a98      	ldr	r2, [pc, #608]	; (8001c4c <HAL_GPIO_Init+0x2a4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d058      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019f0:	4a96      	ldr	r2, [pc, #600]	; (8001c4c <HAL_GPIO_Init+0x2a4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d86f      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019f6:	4a96      	ldr	r2, [pc, #600]	; (8001c50 <HAL_GPIO_Init+0x2a8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d052      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019fc:	4a94      	ldr	r2, [pc, #592]	; (8001c50 <HAL_GPIO_Init+0x2a8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d869      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a02:	4a94      	ldr	r2, [pc, #592]	; (8001c54 <HAL_GPIO_Init+0x2ac>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d04c      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a08:	4a92      	ldr	r2, [pc, #584]	; (8001c54 <HAL_GPIO_Init+0x2ac>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d863      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a0e:	4a92      	ldr	r2, [pc, #584]	; (8001c58 <HAL_GPIO_Init+0x2b0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d046      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a14:	4a90      	ldr	r2, [pc, #576]	; (8001c58 <HAL_GPIO_Init+0x2b0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d85d      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d82a      	bhi.n	8001a74 <HAL_GPIO_Init+0xcc>
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d859      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <HAL_GPIO_Init+0x80>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001a7d 	.word	0x08001a7d
 8001a30:	08001a8f 	.word	0x08001a8f
 8001a34:	08001ad1 	.word	0x08001ad1
 8001a38:	08001ad7 	.word	0x08001ad7
 8001a3c:	08001ad7 	.word	0x08001ad7
 8001a40:	08001ad7 	.word	0x08001ad7
 8001a44:	08001ad7 	.word	0x08001ad7
 8001a48:	08001ad7 	.word	0x08001ad7
 8001a4c:	08001ad7 	.word	0x08001ad7
 8001a50:	08001ad7 	.word	0x08001ad7
 8001a54:	08001ad7 	.word	0x08001ad7
 8001a58:	08001ad7 	.word	0x08001ad7
 8001a5c:	08001ad7 	.word	0x08001ad7
 8001a60:	08001ad7 	.word	0x08001ad7
 8001a64:	08001ad7 	.word	0x08001ad7
 8001a68:	08001ad7 	.word	0x08001ad7
 8001a6c:	08001a85 	.word	0x08001a85
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	4a79      	ldr	r2, [pc, #484]	; (8001c5c <HAL_GPIO_Init+0x2b4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a7a:	e02c      	b.n	8001ad6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e029      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e024      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	3308      	adds	r3, #8
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e01f      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	330c      	adds	r3, #12
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e01a      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e013      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	611a      	str	r2, [r3, #16]
          break;
 8001ac2:	e009      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	615a      	str	r2, [r3, #20]
          break;
 8001ace:	e003      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          break;
 8001ad6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2bff      	cmp	r3, #255	; 0xff
 8001adc:	d801      	bhi.n	8001ae2 <HAL_GPIO_Init+0x13a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	e001      	b.n	8001ae6 <HAL_GPIO_Init+0x13e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2bff      	cmp	r3, #255	; 0xff
 8001aec:	d802      	bhi.n	8001af4 <HAL_GPIO_Init+0x14c>
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x152>
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	3b08      	subs	r3, #8
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	210f      	movs	r1, #15
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	6a39      	ldr	r1, [r7, #32]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80b1 	beq.w	8001c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b40:	4a48      	ldr	r2, [pc, #288]	; (8001c64 <HAL_GPIO_Init+0x2bc>)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a40      	ldr	r2, [pc, #256]	; (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d013      	beq.n	8001b94 <HAL_GPIO_Init+0x1ec>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a3f      	ldr	r2, [pc, #252]	; (8001c6c <HAL_GPIO_Init+0x2c4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00d      	beq.n	8001b90 <HAL_GPIO_Init+0x1e8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a3e      	ldr	r2, [pc, #248]	; (8001c70 <HAL_GPIO_Init+0x2c8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d007      	beq.n	8001b8c <HAL_GPIO_Init+0x1e4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a3d      	ldr	r2, [pc, #244]	; (8001c74 <HAL_GPIO_Init+0x2cc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_GPIO_Init+0x1e0>
 8001b84:	2303      	movs	r3, #3
 8001b86:	e006      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b88:	2304      	movs	r3, #4
 8001b8a:	e004      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e002      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b94:	2300      	movs	r3, #0
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	f002 0203 	and.w	r2, r2, #3
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	4093      	lsls	r3, r2
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba6:	492f      	ldr	r1, [pc, #188]	; (8001c64 <HAL_GPIO_Init+0x2bc>)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	492c      	ldr	r1, [pc, #176]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4928      	ldr	r1, [pc, #160]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4922      	ldr	r1, [pc, #136]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	491e      	ldr	r1, [pc, #120]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	4918      	ldr	r1, [pc, #96]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4914      	ldr	r1, [pc, #80]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d021      	beq.n	8001c7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e021      	b.n	8001c8a <HAL_GPIO_Init+0x2e2>
 8001c46:	bf00      	nop
 8001c48:	10320000 	.word	0x10320000
 8001c4c:	10310000 	.word	0x10310000
 8001c50:	10220000 	.word	0x10220000
 8001c54:	10210000 	.word	0x10210000
 8001c58:	10120000 	.word	0x10120000
 8001c5c:	10110000 	.word	0x10110000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40011400 	.word	0x40011400
 8001c78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4909      	ldr	r1, [pc, #36]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f47f ae8e 	bne.w	80019bc <HAL_GPIO_Init+0x14>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	372c      	adds	r7, #44	; 0x2c
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e26c      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8087 	beq.w	8001dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd0:	4b92      	ldr	r3, [pc, #584]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d00c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cdc:	4b8f      	ldr	r3, [pc, #572]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d112      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
 8001ce8:	4b8c      	ldr	r3, [pc, #560]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf4:	d10b      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf6:	4b89      	ldr	r3, [pc, #548]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d06c      	beq.n	8001ddc <HAL_RCC_OscConfig+0x12c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d168      	bne.n	8001ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e246      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x76>
 8001d18:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a7f      	ldr	r2, [pc, #508]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e02e      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x98>
 8001d2e:	4b7b      	ldr	r3, [pc, #492]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7a      	ldr	r2, [pc, #488]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b78      	ldr	r3, [pc, #480]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a77      	ldr	r2, [pc, #476]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e01d      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0xbc>
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a71      	ldr	r2, [pc, #452]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6e      	ldr	r2, [pc, #440]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d6c:	4b6b      	ldr	r3, [pc, #428]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6a      	ldr	r2, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a67      	ldr	r2, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fdcc 	bl	8000928 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7fe fdc8 	bl	8000928 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e1fa      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0xe4>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7fe fdb8 	bl	8000928 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7fe fdb4 	bl	8000928 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1e6      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x10c>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d063      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dea:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x18c>
 8001e02:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d116      	bne.n	8001e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e1ba      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4939      	ldr	r1, [pc, #228]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	e03a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d020      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7fe fd6d 	bl	8000928 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e52:	f7fe fd69 	bl	8000928 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e19b      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4927      	ldr	r1, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fd4c 	bl	8000928 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7fe fd48 	bl	8000928 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e17a      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d03a      	beq.n	8001f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d019      	beq.n	8001efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fd2c 	bl	8000928 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7fe fd28 	bl	8000928 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e15a      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 fad8 	bl	80024a8 <RCC_Delay>
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f00:	f7fe fd12 	bl	8000928 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f06:	e00f      	b.n	8001f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7fe fd0e 	bl	8000928 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d908      	bls.n	8001f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e140      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	42420000 	.word	0x42420000
 8001f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	4b9e      	ldr	r3, [pc, #632]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e9      	bne.n	8001f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80a6 	beq.w	800208e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b97      	ldr	r3, [pc, #604]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b94      	ldr	r3, [pc, #592]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a93      	ldr	r2, [pc, #588]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	4b91      	ldr	r3, [pc, #580]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b8e      	ldr	r3, [pc, #568]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a8a      	ldr	r2, [pc, #552]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7fe fccf 	bl	8000928 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7fe fccb 	bl	8000928 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0fd      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b81      	ldr	r3, [pc, #516]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x312>
 8001fb4:	4b7b      	ldr	r3, [pc, #492]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a7a      	ldr	r2, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e02d      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x334>
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a72      	ldr	r2, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x356>
 8001fec:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a6c      	ldr	r2, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6213      	str	r3, [r2, #32]
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a69      	ldr	r2, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a63      	ldr	r2, [pc, #396]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7fe fc7f 	bl	8000928 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe fc7b 	bl	8000928 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0ab      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b57      	ldr	r3, [pc, #348]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCC_OscConfig+0x37e>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7fe fc69 	bl	8000928 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fc65 	bl	8000928 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e095      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a47      	ldr	r2, [pc, #284]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8081 	beq.w	800219a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d061      	beq.n	8002168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d146      	bne.n	800213a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_OscConfig+0x4fc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7fe fc39 	bl	8000928 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe fc35 	bl	8000928 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e067      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e0:	d108      	bne.n	80020f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020e2:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	492d      	ldr	r1, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a19      	ldr	r1, [r3, #32]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	430b      	orrs	r3, r1
 8002106:	4927      	ldr	r1, [pc, #156]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x4fc>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe fc09 	bl	8000928 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe fc05 	bl	8000928 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e037      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x46a>
 8002138:	e02f      	b.n	800219a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_RCC_OscConfig+0x4fc>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe fbf2 	bl	8000928 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7fe fbee 	bl	8000928 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e020      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x498>
 8002166:	e018      	b.n	800219a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e013      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	429a      	cmp	r2, r3
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420060 	.word	0x42420060

080021b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0d0      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b6a      	ldr	r3, [pc, #424]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d910      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b67      	ldr	r3, [pc, #412]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	4965      	ldr	r1, [pc, #404]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b8      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002224:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a52      	ldr	r2, [pc, #328]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800222e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	494d      	ldr	r1, [pc, #308]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d040      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d115      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e073      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e06b      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228e:	4b39      	ldr	r3, [pc, #228]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4936      	ldr	r1, [pc, #216]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a0:	f7fe fb42 	bl	8000928 <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	e00a      	b.n	80022be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7fe fb3e 	bl	8000928 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e053      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1eb      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d210      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	4922      	ldr	r1, [pc, #136]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e032      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4916      	ldr	r1, [pc, #88]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	490e      	ldr	r1, [pc, #56]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800233e:	f000 f821 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8002342:	4602      	mov	r2, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	490a      	ldr	r1, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	5ccb      	ldrb	r3, [r1, r3]
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1cc>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1d0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe faa0 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
 8002378:	080032cc 	.word	0x080032cc
 800237c:	20000000 	.word	0x20000000
 8002380:	20000004 	.word	0x20000004

08002384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	b490      	push	{r4, r7}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb0>)
 800238c:	1d3c      	adds	r4, r7, #4
 800238e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002394:	f240 2301 	movw	r3, #513	; 0x201
 8002398:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x40>
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x46>
 80023c2:	e02d      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c6:	623b      	str	r3, [r7, #32]
      break;
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	0c9b      	lsrs	r3, r3, #18
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023d6:	4413      	add	r3, r2
 80023d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	0c5b      	lsrs	r3, r3, #17
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023f6:	4413      	add	r3, r2
 80023f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002402:	fb02 f203 	mul.w	r2, r2, r3
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	e004      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	623b      	str	r3, [r7, #32]
      break;
 800241e:	e002      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002422:	623b      	str	r3, [r7, #32]
      break;
 8002424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002426:	6a3b      	ldr	r3, [r7, #32]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bc90      	pop	{r4, r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	080032bc 	.word	0x080032bc
 8002438:	40021000 	.word	0x40021000
 800243c:	007a1200 	.word	0x007a1200
 8002440:	003d0900 	.word	0x003d0900

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b02      	ldr	r3, [pc, #8]	; (8002454 <HAL_RCC_GetHCLKFreq+0x10>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800245c:	f7ff fff2 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	; (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000
 800247c:	080032dc 	.word	0x080032dc

08002480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002484:	f7ff ffde 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	0adb      	lsrs	r3, r3, #11
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	080032dc 	.word	0x080032dc

080024a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <RCC_Delay+0x34>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <RCC_Delay+0x38>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0a5b      	lsrs	r3, r3, #9
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024c4:	bf00      	nop
  }
  while (Delay --);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	60fa      	str	r2, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f9      	bne.n	80024c4 <RCC_Delay+0x1c>
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	20000000 	.word	0x20000000
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d07d      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002504:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10d      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002510:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251a:	61d3      	str	r3, [r2, #28]
 800251c:	4b49      	ldr	r3, [pc, #292]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002528:	2301      	movs	r3, #1
 800252a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	4b46      	ldr	r3, [pc, #280]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d118      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a42      	ldr	r2, [pc, #264]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800253e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002542:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002544:	f7fe f9f0 	bl	8000928 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	e008      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254c:	f7fe f9ec 	bl	8000928 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e06d      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b3a      	ldr	r3, [pc, #232]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800256a:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002572:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d02e      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d027      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002590:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800259e:	4a29      	ldr	r2, [pc, #164]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d014      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7fe f9bb 	bl	8000928 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe f9b7 	bl	8000928 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e036      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ee      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4917      	ldr	r1, [pc, #92]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	490b      	ldr	r1, [pc, #44]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4904      	ldr	r1, [pc, #16]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	40007000 	.word	0x40007000
 800264c:	42420440 	.word	0x42420440

08002650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e03f      	b.n	80026e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe f814 	bl	80006a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	; 0x24
 8002680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f905 	bl	80028a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b08a      	sub	sp, #40	; 0x28
 80026ee:	af02      	add	r7, sp, #8
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	d17c      	bne.n	8002804 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_UART_Transmit+0x2c>
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e075      	b.n	8002806 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_UART_Transmit+0x3e>
 8002724:	2302      	movs	r3, #2
 8002726:	e06e      	b.n	8002806 <HAL_UART_Transmit+0x11c>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2221      	movs	r2, #33	; 0x21
 800273a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800273e:	f7fe f8f3 	bl	8000928 <HAL_GetTick>
 8002742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	88fa      	ldrh	r2, [r7, #6]
 800274e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002758:	d108      	bne.n	800276c <HAL_UART_Transmit+0x82>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d104      	bne.n	800276c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	e003      	b.n	8002774 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800277c:	e02a      	b.n	80027d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f840 	bl	800280e <UART_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e036      	b.n	8002806 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	3302      	adds	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e007      	b.n	80027c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	3301      	adds	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1cf      	bne.n	800277e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2140      	movs	r1, #64	; 0x40
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f810 	bl	800280e <UART_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e006      	b.n	8002806 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281e:	e02c      	b.n	800287a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d028      	beq.n	800287a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <UART_WaitOnFlagUntilTimeout+0x30>
 800282e:	f7fe f87b 	bl	8000928 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	429a      	cmp	r2, r3
 800283c:	d21d      	bcs.n	800287a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800284c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e00f      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d0c3      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028de:	f023 030c 	bic.w	r3, r3, #12
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2c      	ldr	r2, [pc, #176]	; (80029b8 <UART_SetConfig+0x114>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d103      	bne.n	8002914 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800290c:	f7ff fdb8 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	e002      	b.n	800291a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002914:	f7ff fda0 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8002918:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	009a      	lsls	r2, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	4a22      	ldr	r2, [pc, #136]	; (80029bc <UART_SetConfig+0x118>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	0119      	lsls	r1, r3, #4
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	009a      	lsls	r2, r3, #2
 8002944:	441a      	add	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <UART_SetConfig+0x118>)
 8002952:	fba3 0302 	umull	r0, r3, r3, r2
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2064      	movs	r0, #100	; 0x64
 800295a:	fb00 f303 	mul.w	r3, r0, r3
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	3332      	adds	r3, #50	; 0x32
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <UART_SetConfig+0x118>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002970:	4419      	add	r1, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	009a      	lsls	r2, r3, #2
 800297c:	441a      	add	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fbb2 f2f3 	udiv	r2, r2, r3
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <UART_SetConfig+0x118>)
 800298a:	fba3 0302 	umull	r0, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2064      	movs	r0, #100	; 0x64
 8002992:	fb00 f303 	mul.w	r3, r0, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	3332      	adds	r3, #50	; 0x32
 800299c:	4a07      	ldr	r2, [pc, #28]	; (80029bc <UART_SetConfig+0x118>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	440a      	add	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40013800 	.word	0x40013800
 80029bc:	51eb851f 	.word	0x51eb851f

080029c0 <__errno>:
 80029c0:	4b01      	ldr	r3, [pc, #4]	; (80029c8 <__errno+0x8>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	2000000c 	.word	0x2000000c

080029cc <__libc_init_array>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	2600      	movs	r6, #0
 80029d0:	4d0c      	ldr	r5, [pc, #48]	; (8002a04 <__libc_init_array+0x38>)
 80029d2:	4c0d      	ldr	r4, [pc, #52]	; (8002a08 <__libc_init_array+0x3c>)
 80029d4:	1b64      	subs	r4, r4, r5
 80029d6:	10a4      	asrs	r4, r4, #2
 80029d8:	42a6      	cmp	r6, r4
 80029da:	d109      	bne.n	80029f0 <__libc_init_array+0x24>
 80029dc:	f000 fc5c 	bl	8003298 <_init>
 80029e0:	2600      	movs	r6, #0
 80029e2:	4d0a      	ldr	r5, [pc, #40]	; (8002a0c <__libc_init_array+0x40>)
 80029e4:	4c0a      	ldr	r4, [pc, #40]	; (8002a10 <__libc_init_array+0x44>)
 80029e6:	1b64      	subs	r4, r4, r5
 80029e8:	10a4      	asrs	r4, r4, #2
 80029ea:	42a6      	cmp	r6, r4
 80029ec:	d105      	bne.n	80029fa <__libc_init_array+0x2e>
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f4:	4798      	blx	r3
 80029f6:	3601      	adds	r6, #1
 80029f8:	e7ee      	b.n	80029d8 <__libc_init_array+0xc>
 80029fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029fe:	4798      	blx	r3
 8002a00:	3601      	adds	r6, #1
 8002a02:	e7f2      	b.n	80029ea <__libc_init_array+0x1e>
 8002a04:	08003318 	.word	0x08003318
 8002a08:	08003318 	.word	0x08003318
 8002a0c:	08003318 	.word	0x08003318
 8002a10:	0800331c 	.word	0x0800331c

08002a14 <memset>:
 8002a14:	4603      	mov	r3, r0
 8002a16:	4402      	add	r2, r0
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d100      	bne.n	8002a1e <memset+0xa>
 8002a1c:	4770      	bx	lr
 8002a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a22:	e7f9      	b.n	8002a18 <memset+0x4>

08002a24 <siprintf>:
 8002a24:	b40e      	push	{r1, r2, r3}
 8002a26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a2a:	b500      	push	{lr}
 8002a2c:	b09c      	sub	sp, #112	; 0x70
 8002a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8002a30:	9002      	str	r0, [sp, #8]
 8002a32:	9006      	str	r0, [sp, #24]
 8002a34:	9107      	str	r1, [sp, #28]
 8002a36:	9104      	str	r1, [sp, #16]
 8002a38:	4808      	ldr	r0, [pc, #32]	; (8002a5c <siprintf+0x38>)
 8002a3a:	4909      	ldr	r1, [pc, #36]	; (8002a60 <siprintf+0x3c>)
 8002a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a40:	9105      	str	r1, [sp, #20]
 8002a42:	6800      	ldr	r0, [r0, #0]
 8002a44:	a902      	add	r1, sp, #8
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	f000 f868 	bl	8002b1c <_svfiprintf_r>
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	9b02      	ldr	r3, [sp, #8]
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	b01c      	add	sp, #112	; 0x70
 8002a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a58:	b003      	add	sp, #12
 8002a5a:	4770      	bx	lr
 8002a5c:	2000000c 	.word	0x2000000c
 8002a60:	ffff0208 	.word	0xffff0208

08002a64 <__ssputs_r>:
 8002a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a68:	688e      	ldr	r6, [r1, #8]
 8002a6a:	4682      	mov	sl, r0
 8002a6c:	429e      	cmp	r6, r3
 8002a6e:	460c      	mov	r4, r1
 8002a70:	4690      	mov	r8, r2
 8002a72:	461f      	mov	r7, r3
 8002a74:	d838      	bhi.n	8002ae8 <__ssputs_r+0x84>
 8002a76:	898a      	ldrh	r2, [r1, #12]
 8002a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a7c:	d032      	beq.n	8002ae4 <__ssputs_r+0x80>
 8002a7e:	6825      	ldr	r5, [r4, #0]
 8002a80:	6909      	ldr	r1, [r1, #16]
 8002a82:	3301      	adds	r3, #1
 8002a84:	eba5 0901 	sub.w	r9, r5, r1
 8002a88:	6965      	ldr	r5, [r4, #20]
 8002a8a:	444b      	add	r3, r9
 8002a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a94:	106d      	asrs	r5, r5, #1
 8002a96:	429d      	cmp	r5, r3
 8002a98:	bf38      	it	cc
 8002a9a:	461d      	movcc	r5, r3
 8002a9c:	0553      	lsls	r3, r2, #21
 8002a9e:	d531      	bpl.n	8002b04 <__ssputs_r+0xa0>
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	f000 fb53 	bl	800314c <_malloc_r>
 8002aa6:	4606      	mov	r6, r0
 8002aa8:	b950      	cbnz	r0, 8002ac0 <__ssputs_r+0x5c>
 8002aaa:	230c      	movs	r3, #12
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	f8ca 3000 	str.w	r3, [sl]
 8002ab4:	89a3      	ldrh	r3, [r4, #12]
 8002ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aba:	81a3      	strh	r3, [r4, #12]
 8002abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ac0:	464a      	mov	r2, r9
 8002ac2:	6921      	ldr	r1, [r4, #16]
 8002ac4:	f000 face 	bl	8003064 <memcpy>
 8002ac8:	89a3      	ldrh	r3, [r4, #12]
 8002aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad2:	81a3      	strh	r3, [r4, #12]
 8002ad4:	6126      	str	r6, [r4, #16]
 8002ad6:	444e      	add	r6, r9
 8002ad8:	6026      	str	r6, [r4, #0]
 8002ada:	463e      	mov	r6, r7
 8002adc:	6165      	str	r5, [r4, #20]
 8002ade:	eba5 0509 	sub.w	r5, r5, r9
 8002ae2:	60a5      	str	r5, [r4, #8]
 8002ae4:	42be      	cmp	r6, r7
 8002ae6:	d900      	bls.n	8002aea <__ssputs_r+0x86>
 8002ae8:	463e      	mov	r6, r7
 8002aea:	4632      	mov	r2, r6
 8002aec:	4641      	mov	r1, r8
 8002aee:	6820      	ldr	r0, [r4, #0]
 8002af0:	f000 fac6 	bl	8003080 <memmove>
 8002af4:	68a3      	ldr	r3, [r4, #8]
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	1b9b      	subs	r3, r3, r6
 8002afa:	4432      	add	r2, r6
 8002afc:	2000      	movs	r0, #0
 8002afe:	60a3      	str	r3, [r4, #8]
 8002b00:	6022      	str	r2, [r4, #0]
 8002b02:	e7db      	b.n	8002abc <__ssputs_r+0x58>
 8002b04:	462a      	mov	r2, r5
 8002b06:	f000 fb7b 	bl	8003200 <_realloc_r>
 8002b0a:	4606      	mov	r6, r0
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d1e1      	bne.n	8002ad4 <__ssputs_r+0x70>
 8002b10:	4650      	mov	r0, sl
 8002b12:	6921      	ldr	r1, [r4, #16]
 8002b14:	f000 face 	bl	80030b4 <_free_r>
 8002b18:	e7c7      	b.n	8002aaa <__ssputs_r+0x46>
	...

08002b1c <_svfiprintf_r>:
 8002b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b20:	4698      	mov	r8, r3
 8002b22:	898b      	ldrh	r3, [r1, #12]
 8002b24:	4607      	mov	r7, r0
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	460d      	mov	r5, r1
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	b09d      	sub	sp, #116	; 0x74
 8002b2e:	d50e      	bpl.n	8002b4e <_svfiprintf_r+0x32>
 8002b30:	690b      	ldr	r3, [r1, #16]
 8002b32:	b963      	cbnz	r3, 8002b4e <_svfiprintf_r+0x32>
 8002b34:	2140      	movs	r1, #64	; 0x40
 8002b36:	f000 fb09 	bl	800314c <_malloc_r>
 8002b3a:	6028      	str	r0, [r5, #0]
 8002b3c:	6128      	str	r0, [r5, #16]
 8002b3e:	b920      	cbnz	r0, 8002b4a <_svfiprintf_r+0x2e>
 8002b40:	230c      	movs	r3, #12
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	e0d1      	b.n	8002cee <_svfiprintf_r+0x1d2>
 8002b4a:	2340      	movs	r3, #64	; 0x40
 8002b4c:	616b      	str	r3, [r5, #20]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	9309      	str	r3, [sp, #36]	; 0x24
 8002b52:	2320      	movs	r3, #32
 8002b54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b58:	2330      	movs	r3, #48	; 0x30
 8002b5a:	f04f 0901 	mov.w	r9, #1
 8002b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002d08 <_svfiprintf_r+0x1ec>
 8002b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b6a:	4623      	mov	r3, r4
 8002b6c:	469a      	mov	sl, r3
 8002b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b72:	b10a      	cbz	r2, 8002b78 <_svfiprintf_r+0x5c>
 8002b74:	2a25      	cmp	r2, #37	; 0x25
 8002b76:	d1f9      	bne.n	8002b6c <_svfiprintf_r+0x50>
 8002b78:	ebba 0b04 	subs.w	fp, sl, r4
 8002b7c:	d00b      	beq.n	8002b96 <_svfiprintf_r+0x7a>
 8002b7e:	465b      	mov	r3, fp
 8002b80:	4622      	mov	r2, r4
 8002b82:	4629      	mov	r1, r5
 8002b84:	4638      	mov	r0, r7
 8002b86:	f7ff ff6d 	bl	8002a64 <__ssputs_r>
 8002b8a:	3001      	adds	r0, #1
 8002b8c:	f000 80aa 	beq.w	8002ce4 <_svfiprintf_r+0x1c8>
 8002b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b92:	445a      	add	r2, fp
 8002b94:	9209      	str	r2, [sp, #36]	; 0x24
 8002b96:	f89a 3000 	ldrb.w	r3, [sl]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80a2 	beq.w	8002ce4 <_svfiprintf_r+0x1c8>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002baa:	f10a 0a01 	add.w	sl, sl, #1
 8002bae:	9304      	str	r3, [sp, #16]
 8002bb0:	9307      	str	r3, [sp, #28]
 8002bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8002bb8:	4654      	mov	r4, sl
 8002bba:	2205      	movs	r2, #5
 8002bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bc0:	4851      	ldr	r0, [pc, #324]	; (8002d08 <_svfiprintf_r+0x1ec>)
 8002bc2:	f000 fa41 	bl	8003048 <memchr>
 8002bc6:	9a04      	ldr	r2, [sp, #16]
 8002bc8:	b9d8      	cbnz	r0, 8002c02 <_svfiprintf_r+0xe6>
 8002bca:	06d0      	lsls	r0, r2, #27
 8002bcc:	bf44      	itt	mi
 8002bce:	2320      	movmi	r3, #32
 8002bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bd4:	0711      	lsls	r1, r2, #28
 8002bd6:	bf44      	itt	mi
 8002bd8:	232b      	movmi	r3, #43	; 0x2b
 8002bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bde:	f89a 3000 	ldrb.w	r3, [sl]
 8002be2:	2b2a      	cmp	r3, #42	; 0x2a
 8002be4:	d015      	beq.n	8002c12 <_svfiprintf_r+0xf6>
 8002be6:	4654      	mov	r4, sl
 8002be8:	2000      	movs	r0, #0
 8002bea:	f04f 0c0a 	mov.w	ip, #10
 8002bee:	9a07      	ldr	r2, [sp, #28]
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bf6:	3b30      	subs	r3, #48	; 0x30
 8002bf8:	2b09      	cmp	r3, #9
 8002bfa:	d94e      	bls.n	8002c9a <_svfiprintf_r+0x17e>
 8002bfc:	b1b0      	cbz	r0, 8002c2c <_svfiprintf_r+0x110>
 8002bfe:	9207      	str	r2, [sp, #28]
 8002c00:	e014      	b.n	8002c2c <_svfiprintf_r+0x110>
 8002c02:	eba0 0308 	sub.w	r3, r0, r8
 8002c06:	fa09 f303 	lsl.w	r3, r9, r3
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	46a2      	mov	sl, r4
 8002c0e:	9304      	str	r3, [sp, #16]
 8002c10:	e7d2      	b.n	8002bb8 <_svfiprintf_r+0x9c>
 8002c12:	9b03      	ldr	r3, [sp, #12]
 8002c14:	1d19      	adds	r1, r3, #4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	9103      	str	r1, [sp, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bfbb      	ittet	lt
 8002c1e:	425b      	neglt	r3, r3
 8002c20:	f042 0202 	orrlt.w	r2, r2, #2
 8002c24:	9307      	strge	r3, [sp, #28]
 8002c26:	9307      	strlt	r3, [sp, #28]
 8002c28:	bfb8      	it	lt
 8002c2a:	9204      	strlt	r2, [sp, #16]
 8002c2c:	7823      	ldrb	r3, [r4, #0]
 8002c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c30:	d10c      	bne.n	8002c4c <_svfiprintf_r+0x130>
 8002c32:	7863      	ldrb	r3, [r4, #1]
 8002c34:	2b2a      	cmp	r3, #42	; 0x2a
 8002c36:	d135      	bne.n	8002ca4 <_svfiprintf_r+0x188>
 8002c38:	9b03      	ldr	r3, [sp, #12]
 8002c3a:	3402      	adds	r4, #2
 8002c3c:	1d1a      	adds	r2, r3, #4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	9203      	str	r2, [sp, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bfb8      	it	lt
 8002c46:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c4a:	9305      	str	r3, [sp, #20]
 8002c4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d18 <_svfiprintf_r+0x1fc>
 8002c50:	2203      	movs	r2, #3
 8002c52:	4650      	mov	r0, sl
 8002c54:	7821      	ldrb	r1, [r4, #0]
 8002c56:	f000 f9f7 	bl	8003048 <memchr>
 8002c5a:	b140      	cbz	r0, 8002c6e <_svfiprintf_r+0x152>
 8002c5c:	2340      	movs	r3, #64	; 0x40
 8002c5e:	eba0 000a 	sub.w	r0, r0, sl
 8002c62:	fa03 f000 	lsl.w	r0, r3, r0
 8002c66:	9b04      	ldr	r3, [sp, #16]
 8002c68:	3401      	adds	r4, #1
 8002c6a:	4303      	orrs	r3, r0
 8002c6c:	9304      	str	r3, [sp, #16]
 8002c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c72:	2206      	movs	r2, #6
 8002c74:	4825      	ldr	r0, [pc, #148]	; (8002d0c <_svfiprintf_r+0x1f0>)
 8002c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c7a:	f000 f9e5 	bl	8003048 <memchr>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d038      	beq.n	8002cf4 <_svfiprintf_r+0x1d8>
 8002c82:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <_svfiprintf_r+0x1f4>)
 8002c84:	bb1b      	cbnz	r3, 8002cce <_svfiprintf_r+0x1b2>
 8002c86:	9b03      	ldr	r3, [sp, #12]
 8002c88:	3307      	adds	r3, #7
 8002c8a:	f023 0307 	bic.w	r3, r3, #7
 8002c8e:	3308      	adds	r3, #8
 8002c90:	9303      	str	r3, [sp, #12]
 8002c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c94:	4433      	add	r3, r6
 8002c96:	9309      	str	r3, [sp, #36]	; 0x24
 8002c98:	e767      	b.n	8002b6a <_svfiprintf_r+0x4e>
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ca2:	e7a5      	b.n	8002bf0 <_svfiprintf_r+0xd4>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f04f 0c0a 	mov.w	ip, #10
 8002caa:	4619      	mov	r1, r3
 8002cac:	3401      	adds	r4, #1
 8002cae:	9305      	str	r3, [sp, #20]
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cb6:	3a30      	subs	r2, #48	; 0x30
 8002cb8:	2a09      	cmp	r2, #9
 8002cba:	d903      	bls.n	8002cc4 <_svfiprintf_r+0x1a8>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0c5      	beq.n	8002c4c <_svfiprintf_r+0x130>
 8002cc0:	9105      	str	r1, [sp, #20]
 8002cc2:	e7c3      	b.n	8002c4c <_svfiprintf_r+0x130>
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ccc:	e7f0      	b.n	8002cb0 <_svfiprintf_r+0x194>
 8002cce:	ab03      	add	r3, sp, #12
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	462a      	mov	r2, r5
 8002cd4:	4638      	mov	r0, r7
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <_svfiprintf_r+0x1f8>)
 8002cd8:	a904      	add	r1, sp, #16
 8002cda:	f3af 8000 	nop.w
 8002cde:	1c42      	adds	r2, r0, #1
 8002ce0:	4606      	mov	r6, r0
 8002ce2:	d1d6      	bne.n	8002c92 <_svfiprintf_r+0x176>
 8002ce4:	89ab      	ldrh	r3, [r5, #12]
 8002ce6:	065b      	lsls	r3, r3, #25
 8002ce8:	f53f af2c 	bmi.w	8002b44 <_svfiprintf_r+0x28>
 8002cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cee:	b01d      	add	sp, #116	; 0x74
 8002cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf4:	ab03      	add	r3, sp, #12
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	462a      	mov	r2, r5
 8002cfa:	4638      	mov	r0, r7
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <_svfiprintf_r+0x1f8>)
 8002cfe:	a904      	add	r1, sp, #16
 8002d00:	f000 f87c 	bl	8002dfc <_printf_i>
 8002d04:	e7eb      	b.n	8002cde <_svfiprintf_r+0x1c2>
 8002d06:	bf00      	nop
 8002d08:	080032e4 	.word	0x080032e4
 8002d0c:	080032ee 	.word	0x080032ee
 8002d10:	00000000 	.word	0x00000000
 8002d14:	08002a65 	.word	0x08002a65
 8002d18:	080032ea 	.word	0x080032ea

08002d1c <_printf_common>:
 8002d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d20:	4616      	mov	r6, r2
 8002d22:	4699      	mov	r9, r3
 8002d24:	688a      	ldr	r2, [r1, #8]
 8002d26:	690b      	ldr	r3, [r1, #16]
 8002d28:	4607      	mov	r7, r0
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	bfb8      	it	lt
 8002d2e:	4613      	movlt	r3, r2
 8002d30:	6033      	str	r3, [r6, #0]
 8002d32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d36:	460c      	mov	r4, r1
 8002d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d3c:	b10a      	cbz	r2, 8002d42 <_printf_common+0x26>
 8002d3e:	3301      	adds	r3, #1
 8002d40:	6033      	str	r3, [r6, #0]
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	0699      	lsls	r1, r3, #26
 8002d46:	bf42      	ittt	mi
 8002d48:	6833      	ldrmi	r3, [r6, #0]
 8002d4a:	3302      	addmi	r3, #2
 8002d4c:	6033      	strmi	r3, [r6, #0]
 8002d4e:	6825      	ldr	r5, [r4, #0]
 8002d50:	f015 0506 	ands.w	r5, r5, #6
 8002d54:	d106      	bne.n	8002d64 <_printf_common+0x48>
 8002d56:	f104 0a19 	add.w	sl, r4, #25
 8002d5a:	68e3      	ldr	r3, [r4, #12]
 8002d5c:	6832      	ldr	r2, [r6, #0]
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	42ab      	cmp	r3, r5
 8002d62:	dc28      	bgt.n	8002db6 <_printf_common+0x9a>
 8002d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d68:	1e13      	subs	r3, r2, #0
 8002d6a:	6822      	ldr	r2, [r4, #0]
 8002d6c:	bf18      	it	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	0692      	lsls	r2, r2, #26
 8002d72:	d42d      	bmi.n	8002dd0 <_printf_common+0xb4>
 8002d74:	4649      	mov	r1, r9
 8002d76:	4638      	mov	r0, r7
 8002d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d7c:	47c0      	blx	r8
 8002d7e:	3001      	adds	r0, #1
 8002d80:	d020      	beq.n	8002dc4 <_printf_common+0xa8>
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	68e5      	ldr	r5, [r4, #12]
 8002d86:	f003 0306 	and.w	r3, r3, #6
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	bf18      	it	ne
 8002d8e:	2500      	movne	r5, #0
 8002d90:	6832      	ldr	r2, [r6, #0]
 8002d92:	f04f 0600 	mov.w	r6, #0
 8002d96:	68a3      	ldr	r3, [r4, #8]
 8002d98:	bf08      	it	eq
 8002d9a:	1aad      	subeq	r5, r5, r2
 8002d9c:	6922      	ldr	r2, [r4, #16]
 8002d9e:	bf08      	it	eq
 8002da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002da4:	4293      	cmp	r3, r2
 8002da6:	bfc4      	itt	gt
 8002da8:	1a9b      	subgt	r3, r3, r2
 8002daa:	18ed      	addgt	r5, r5, r3
 8002dac:	341a      	adds	r4, #26
 8002dae:	42b5      	cmp	r5, r6
 8002db0:	d11a      	bne.n	8002de8 <_printf_common+0xcc>
 8002db2:	2000      	movs	r0, #0
 8002db4:	e008      	b.n	8002dc8 <_printf_common+0xac>
 8002db6:	2301      	movs	r3, #1
 8002db8:	4652      	mov	r2, sl
 8002dba:	4649      	mov	r1, r9
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	47c0      	blx	r8
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	d103      	bne.n	8002dcc <_printf_common+0xb0>
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dcc:	3501      	adds	r5, #1
 8002dce:	e7c4      	b.n	8002d5a <_printf_common+0x3e>
 8002dd0:	2030      	movs	r0, #48	; 0x30
 8002dd2:	18e1      	adds	r1, r4, r3
 8002dd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dde:	4422      	add	r2, r4
 8002de0:	3302      	adds	r3, #2
 8002de2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002de6:	e7c5      	b.n	8002d74 <_printf_common+0x58>
 8002de8:	2301      	movs	r3, #1
 8002dea:	4622      	mov	r2, r4
 8002dec:	4649      	mov	r1, r9
 8002dee:	4638      	mov	r0, r7
 8002df0:	47c0      	blx	r8
 8002df2:	3001      	adds	r0, #1
 8002df4:	d0e6      	beq.n	8002dc4 <_printf_common+0xa8>
 8002df6:	3601      	adds	r6, #1
 8002df8:	e7d9      	b.n	8002dae <_printf_common+0x92>
	...

08002dfc <_printf_i>:
 8002dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e00:	460c      	mov	r4, r1
 8002e02:	7e27      	ldrb	r7, [r4, #24]
 8002e04:	4691      	mov	r9, r2
 8002e06:	2f78      	cmp	r7, #120	; 0x78
 8002e08:	4680      	mov	r8, r0
 8002e0a:	469a      	mov	sl, r3
 8002e0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e12:	d807      	bhi.n	8002e24 <_printf_i+0x28>
 8002e14:	2f62      	cmp	r7, #98	; 0x62
 8002e16:	d80a      	bhi.n	8002e2e <_printf_i+0x32>
 8002e18:	2f00      	cmp	r7, #0
 8002e1a:	f000 80d9 	beq.w	8002fd0 <_printf_i+0x1d4>
 8002e1e:	2f58      	cmp	r7, #88	; 0x58
 8002e20:	f000 80a4 	beq.w	8002f6c <_printf_i+0x170>
 8002e24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e2c:	e03a      	b.n	8002ea4 <_printf_i+0xa8>
 8002e2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e32:	2b15      	cmp	r3, #21
 8002e34:	d8f6      	bhi.n	8002e24 <_printf_i+0x28>
 8002e36:	a001      	add	r0, pc, #4	; (adr r0, 8002e3c <_printf_i+0x40>)
 8002e38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e3c:	08002e95 	.word	0x08002e95
 8002e40:	08002ea9 	.word	0x08002ea9
 8002e44:	08002e25 	.word	0x08002e25
 8002e48:	08002e25 	.word	0x08002e25
 8002e4c:	08002e25 	.word	0x08002e25
 8002e50:	08002e25 	.word	0x08002e25
 8002e54:	08002ea9 	.word	0x08002ea9
 8002e58:	08002e25 	.word	0x08002e25
 8002e5c:	08002e25 	.word	0x08002e25
 8002e60:	08002e25 	.word	0x08002e25
 8002e64:	08002e25 	.word	0x08002e25
 8002e68:	08002fb7 	.word	0x08002fb7
 8002e6c:	08002ed9 	.word	0x08002ed9
 8002e70:	08002f99 	.word	0x08002f99
 8002e74:	08002e25 	.word	0x08002e25
 8002e78:	08002e25 	.word	0x08002e25
 8002e7c:	08002fd9 	.word	0x08002fd9
 8002e80:	08002e25 	.word	0x08002e25
 8002e84:	08002ed9 	.word	0x08002ed9
 8002e88:	08002e25 	.word	0x08002e25
 8002e8c:	08002e25 	.word	0x08002e25
 8002e90:	08002fa1 	.word	0x08002fa1
 8002e94:	680b      	ldr	r3, [r1, #0]
 8002e96:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	600a      	str	r2, [r1, #0]
 8002ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0a4      	b.n	8002ff2 <_printf_i+0x1f6>
 8002ea8:	6825      	ldr	r5, [r4, #0]
 8002eaa:	6808      	ldr	r0, [r1, #0]
 8002eac:	062e      	lsls	r6, r5, #24
 8002eae:	f100 0304 	add.w	r3, r0, #4
 8002eb2:	d50a      	bpl.n	8002eca <_printf_i+0xce>
 8002eb4:	6805      	ldr	r5, [r0, #0]
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	2d00      	cmp	r5, #0
 8002eba:	da03      	bge.n	8002ec4 <_printf_i+0xc8>
 8002ebc:	232d      	movs	r3, #45	; 0x2d
 8002ebe:	426d      	negs	r5, r5
 8002ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ec4:	230a      	movs	r3, #10
 8002ec6:	485e      	ldr	r0, [pc, #376]	; (8003040 <_printf_i+0x244>)
 8002ec8:	e019      	b.n	8002efe <_printf_i+0x102>
 8002eca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ece:	6805      	ldr	r5, [r0, #0]
 8002ed0:	600b      	str	r3, [r1, #0]
 8002ed2:	bf18      	it	ne
 8002ed4:	b22d      	sxthne	r5, r5
 8002ed6:	e7ef      	b.n	8002eb8 <_printf_i+0xbc>
 8002ed8:	680b      	ldr	r3, [r1, #0]
 8002eda:	6825      	ldr	r5, [r4, #0]
 8002edc:	1d18      	adds	r0, r3, #4
 8002ede:	6008      	str	r0, [r1, #0]
 8002ee0:	0628      	lsls	r0, r5, #24
 8002ee2:	d501      	bpl.n	8002ee8 <_printf_i+0xec>
 8002ee4:	681d      	ldr	r5, [r3, #0]
 8002ee6:	e002      	b.n	8002eee <_printf_i+0xf2>
 8002ee8:	0669      	lsls	r1, r5, #25
 8002eea:	d5fb      	bpl.n	8002ee4 <_printf_i+0xe8>
 8002eec:	881d      	ldrh	r5, [r3, #0]
 8002eee:	2f6f      	cmp	r7, #111	; 0x6f
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2308      	moveq	r3, #8
 8002ef4:	230a      	movne	r3, #10
 8002ef6:	4852      	ldr	r0, [pc, #328]	; (8003040 <_printf_i+0x244>)
 8002ef8:	2100      	movs	r1, #0
 8002efa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002efe:	6866      	ldr	r6, [r4, #4]
 8002f00:	2e00      	cmp	r6, #0
 8002f02:	bfa8      	it	ge
 8002f04:	6821      	ldrge	r1, [r4, #0]
 8002f06:	60a6      	str	r6, [r4, #8]
 8002f08:	bfa4      	itt	ge
 8002f0a:	f021 0104 	bicge.w	r1, r1, #4
 8002f0e:	6021      	strge	r1, [r4, #0]
 8002f10:	b90d      	cbnz	r5, 8002f16 <_printf_i+0x11a>
 8002f12:	2e00      	cmp	r6, #0
 8002f14:	d04d      	beq.n	8002fb2 <_printf_i+0x1b6>
 8002f16:	4616      	mov	r6, r2
 8002f18:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f1c:	fb03 5711 	mls	r7, r3, r1, r5
 8002f20:	5dc7      	ldrb	r7, [r0, r7]
 8002f22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f26:	462f      	mov	r7, r5
 8002f28:	42bb      	cmp	r3, r7
 8002f2a:	460d      	mov	r5, r1
 8002f2c:	d9f4      	bls.n	8002f18 <_printf_i+0x11c>
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d10b      	bne.n	8002f4a <_printf_i+0x14e>
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	07df      	lsls	r7, r3, #31
 8002f36:	d508      	bpl.n	8002f4a <_printf_i+0x14e>
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	6861      	ldr	r1, [r4, #4]
 8002f3c:	4299      	cmp	r1, r3
 8002f3e:	bfde      	ittt	le
 8002f40:	2330      	movle	r3, #48	; 0x30
 8002f42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f4a:	1b92      	subs	r2, r2, r6
 8002f4c:	6122      	str	r2, [r4, #16]
 8002f4e:	464b      	mov	r3, r9
 8002f50:	4621      	mov	r1, r4
 8002f52:	4640      	mov	r0, r8
 8002f54:	f8cd a000 	str.w	sl, [sp]
 8002f58:	aa03      	add	r2, sp, #12
 8002f5a:	f7ff fedf 	bl	8002d1c <_printf_common>
 8002f5e:	3001      	adds	r0, #1
 8002f60:	d14c      	bne.n	8002ffc <_printf_i+0x200>
 8002f62:	f04f 30ff 	mov.w	r0, #4294967295
 8002f66:	b004      	add	sp, #16
 8002f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f6c:	4834      	ldr	r0, [pc, #208]	; (8003040 <_printf_i+0x244>)
 8002f6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f72:	680e      	ldr	r6, [r1, #0]
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f7a:	061f      	lsls	r7, r3, #24
 8002f7c:	600e      	str	r6, [r1, #0]
 8002f7e:	d514      	bpl.n	8002faa <_printf_i+0x1ae>
 8002f80:	07d9      	lsls	r1, r3, #31
 8002f82:	bf44      	itt	mi
 8002f84:	f043 0320 	orrmi.w	r3, r3, #32
 8002f88:	6023      	strmi	r3, [r4, #0]
 8002f8a:	b91d      	cbnz	r5, 8002f94 <_printf_i+0x198>
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	f023 0320 	bic.w	r3, r3, #32
 8002f92:	6023      	str	r3, [r4, #0]
 8002f94:	2310      	movs	r3, #16
 8002f96:	e7af      	b.n	8002ef8 <_printf_i+0xfc>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	f043 0320 	orr.w	r3, r3, #32
 8002f9e:	6023      	str	r3, [r4, #0]
 8002fa0:	2378      	movs	r3, #120	; 0x78
 8002fa2:	4828      	ldr	r0, [pc, #160]	; (8003044 <_printf_i+0x248>)
 8002fa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fa8:	e7e3      	b.n	8002f72 <_printf_i+0x176>
 8002faa:	065e      	lsls	r6, r3, #25
 8002fac:	bf48      	it	mi
 8002fae:	b2ad      	uxthmi	r5, r5
 8002fb0:	e7e6      	b.n	8002f80 <_printf_i+0x184>
 8002fb2:	4616      	mov	r6, r2
 8002fb4:	e7bb      	b.n	8002f2e <_printf_i+0x132>
 8002fb6:	680b      	ldr	r3, [r1, #0]
 8002fb8:	6826      	ldr	r6, [r4, #0]
 8002fba:	1d1d      	adds	r5, r3, #4
 8002fbc:	6960      	ldr	r0, [r4, #20]
 8002fbe:	600d      	str	r5, [r1, #0]
 8002fc0:	0635      	lsls	r5, r6, #24
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	d501      	bpl.n	8002fca <_printf_i+0x1ce>
 8002fc6:	6018      	str	r0, [r3, #0]
 8002fc8:	e002      	b.n	8002fd0 <_printf_i+0x1d4>
 8002fca:	0671      	lsls	r1, r6, #25
 8002fcc:	d5fb      	bpl.n	8002fc6 <_printf_i+0x1ca>
 8002fce:	8018      	strh	r0, [r3, #0]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	4616      	mov	r6, r2
 8002fd4:	6123      	str	r3, [r4, #16]
 8002fd6:	e7ba      	b.n	8002f4e <_printf_i+0x152>
 8002fd8:	680b      	ldr	r3, [r1, #0]
 8002fda:	1d1a      	adds	r2, r3, #4
 8002fdc:	600a      	str	r2, [r1, #0]
 8002fde:	681e      	ldr	r6, [r3, #0]
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	6862      	ldr	r2, [r4, #4]
 8002fe6:	f000 f82f 	bl	8003048 <memchr>
 8002fea:	b108      	cbz	r0, 8002ff0 <_printf_i+0x1f4>
 8002fec:	1b80      	subs	r0, r0, r6
 8002fee:	6060      	str	r0, [r4, #4]
 8002ff0:	6863      	ldr	r3, [r4, #4]
 8002ff2:	6123      	str	r3, [r4, #16]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ffa:	e7a8      	b.n	8002f4e <_printf_i+0x152>
 8002ffc:	4632      	mov	r2, r6
 8002ffe:	4649      	mov	r1, r9
 8003000:	4640      	mov	r0, r8
 8003002:	6923      	ldr	r3, [r4, #16]
 8003004:	47d0      	blx	sl
 8003006:	3001      	adds	r0, #1
 8003008:	d0ab      	beq.n	8002f62 <_printf_i+0x166>
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	079b      	lsls	r3, r3, #30
 800300e:	d413      	bmi.n	8003038 <_printf_i+0x23c>
 8003010:	68e0      	ldr	r0, [r4, #12]
 8003012:	9b03      	ldr	r3, [sp, #12]
 8003014:	4298      	cmp	r0, r3
 8003016:	bfb8      	it	lt
 8003018:	4618      	movlt	r0, r3
 800301a:	e7a4      	b.n	8002f66 <_printf_i+0x16a>
 800301c:	2301      	movs	r3, #1
 800301e:	4632      	mov	r2, r6
 8003020:	4649      	mov	r1, r9
 8003022:	4640      	mov	r0, r8
 8003024:	47d0      	blx	sl
 8003026:	3001      	adds	r0, #1
 8003028:	d09b      	beq.n	8002f62 <_printf_i+0x166>
 800302a:	3501      	adds	r5, #1
 800302c:	68e3      	ldr	r3, [r4, #12]
 800302e:	9903      	ldr	r1, [sp, #12]
 8003030:	1a5b      	subs	r3, r3, r1
 8003032:	42ab      	cmp	r3, r5
 8003034:	dcf2      	bgt.n	800301c <_printf_i+0x220>
 8003036:	e7eb      	b.n	8003010 <_printf_i+0x214>
 8003038:	2500      	movs	r5, #0
 800303a:	f104 0619 	add.w	r6, r4, #25
 800303e:	e7f5      	b.n	800302c <_printf_i+0x230>
 8003040:	080032f5 	.word	0x080032f5
 8003044:	08003306 	.word	0x08003306

08003048 <memchr>:
 8003048:	4603      	mov	r3, r0
 800304a:	b510      	push	{r4, lr}
 800304c:	b2c9      	uxtb	r1, r1
 800304e:	4402      	add	r2, r0
 8003050:	4293      	cmp	r3, r2
 8003052:	4618      	mov	r0, r3
 8003054:	d101      	bne.n	800305a <memchr+0x12>
 8003056:	2000      	movs	r0, #0
 8003058:	e003      	b.n	8003062 <memchr+0x1a>
 800305a:	7804      	ldrb	r4, [r0, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	428c      	cmp	r4, r1
 8003060:	d1f6      	bne.n	8003050 <memchr+0x8>
 8003062:	bd10      	pop	{r4, pc}

08003064 <memcpy>:
 8003064:	440a      	add	r2, r1
 8003066:	4291      	cmp	r1, r2
 8003068:	f100 33ff 	add.w	r3, r0, #4294967295
 800306c:	d100      	bne.n	8003070 <memcpy+0xc>
 800306e:	4770      	bx	lr
 8003070:	b510      	push	{r4, lr}
 8003072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003076:	4291      	cmp	r1, r2
 8003078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800307c:	d1f9      	bne.n	8003072 <memcpy+0xe>
 800307e:	bd10      	pop	{r4, pc}

08003080 <memmove>:
 8003080:	4288      	cmp	r0, r1
 8003082:	b510      	push	{r4, lr}
 8003084:	eb01 0402 	add.w	r4, r1, r2
 8003088:	d902      	bls.n	8003090 <memmove+0x10>
 800308a:	4284      	cmp	r4, r0
 800308c:	4623      	mov	r3, r4
 800308e:	d807      	bhi.n	80030a0 <memmove+0x20>
 8003090:	1e43      	subs	r3, r0, #1
 8003092:	42a1      	cmp	r1, r4
 8003094:	d008      	beq.n	80030a8 <memmove+0x28>
 8003096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800309a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800309e:	e7f8      	b.n	8003092 <memmove+0x12>
 80030a0:	4601      	mov	r1, r0
 80030a2:	4402      	add	r2, r0
 80030a4:	428a      	cmp	r2, r1
 80030a6:	d100      	bne.n	80030aa <memmove+0x2a>
 80030a8:	bd10      	pop	{r4, pc}
 80030aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030b2:	e7f7      	b.n	80030a4 <memmove+0x24>

080030b4 <_free_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	4605      	mov	r5, r0
 80030b8:	2900      	cmp	r1, #0
 80030ba:	d043      	beq.n	8003144 <_free_r+0x90>
 80030bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030c0:	1f0c      	subs	r4, r1, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bfb8      	it	lt
 80030c6:	18e4      	addlt	r4, r4, r3
 80030c8:	f000 f8d0 	bl	800326c <__malloc_lock>
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <_free_r+0x94>)
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	4610      	mov	r0, r2
 80030d2:	b933      	cbnz	r3, 80030e2 <_free_r+0x2e>
 80030d4:	6063      	str	r3, [r4, #4]
 80030d6:	6014      	str	r4, [r2, #0]
 80030d8:	4628      	mov	r0, r5
 80030da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030de:	f000 b8cb 	b.w	8003278 <__malloc_unlock>
 80030e2:	42a3      	cmp	r3, r4
 80030e4:	d90a      	bls.n	80030fc <_free_r+0x48>
 80030e6:	6821      	ldr	r1, [r4, #0]
 80030e8:	1862      	adds	r2, r4, r1
 80030ea:	4293      	cmp	r3, r2
 80030ec:	bf01      	itttt	eq
 80030ee:	681a      	ldreq	r2, [r3, #0]
 80030f0:	685b      	ldreq	r3, [r3, #4]
 80030f2:	1852      	addeq	r2, r2, r1
 80030f4:	6022      	streq	r2, [r4, #0]
 80030f6:	6063      	str	r3, [r4, #4]
 80030f8:	6004      	str	r4, [r0, #0]
 80030fa:	e7ed      	b.n	80030d8 <_free_r+0x24>
 80030fc:	461a      	mov	r2, r3
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	b10b      	cbz	r3, 8003106 <_free_r+0x52>
 8003102:	42a3      	cmp	r3, r4
 8003104:	d9fa      	bls.n	80030fc <_free_r+0x48>
 8003106:	6811      	ldr	r1, [r2, #0]
 8003108:	1850      	adds	r0, r2, r1
 800310a:	42a0      	cmp	r0, r4
 800310c:	d10b      	bne.n	8003126 <_free_r+0x72>
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	4401      	add	r1, r0
 8003112:	1850      	adds	r0, r2, r1
 8003114:	4283      	cmp	r3, r0
 8003116:	6011      	str	r1, [r2, #0]
 8003118:	d1de      	bne.n	80030d8 <_free_r+0x24>
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4401      	add	r1, r0
 8003120:	6011      	str	r1, [r2, #0]
 8003122:	6053      	str	r3, [r2, #4]
 8003124:	e7d8      	b.n	80030d8 <_free_r+0x24>
 8003126:	d902      	bls.n	800312e <_free_r+0x7a>
 8003128:	230c      	movs	r3, #12
 800312a:	602b      	str	r3, [r5, #0]
 800312c:	e7d4      	b.n	80030d8 <_free_r+0x24>
 800312e:	6820      	ldr	r0, [r4, #0]
 8003130:	1821      	adds	r1, r4, r0
 8003132:	428b      	cmp	r3, r1
 8003134:	bf01      	itttt	eq
 8003136:	6819      	ldreq	r1, [r3, #0]
 8003138:	685b      	ldreq	r3, [r3, #4]
 800313a:	1809      	addeq	r1, r1, r0
 800313c:	6021      	streq	r1, [r4, #0]
 800313e:	6063      	str	r3, [r4, #4]
 8003140:	6054      	str	r4, [r2, #4]
 8003142:	e7c9      	b.n	80030d8 <_free_r+0x24>
 8003144:	bd38      	pop	{r3, r4, r5, pc}
 8003146:	bf00      	nop
 8003148:	20000090 	.word	0x20000090

0800314c <_malloc_r>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	1ccd      	adds	r5, r1, #3
 8003150:	f025 0503 	bic.w	r5, r5, #3
 8003154:	3508      	adds	r5, #8
 8003156:	2d0c      	cmp	r5, #12
 8003158:	bf38      	it	cc
 800315a:	250c      	movcc	r5, #12
 800315c:	2d00      	cmp	r5, #0
 800315e:	4606      	mov	r6, r0
 8003160:	db01      	blt.n	8003166 <_malloc_r+0x1a>
 8003162:	42a9      	cmp	r1, r5
 8003164:	d903      	bls.n	800316e <_malloc_r+0x22>
 8003166:	230c      	movs	r3, #12
 8003168:	6033      	str	r3, [r6, #0]
 800316a:	2000      	movs	r0, #0
 800316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800316e:	f000 f87d 	bl	800326c <__malloc_lock>
 8003172:	4921      	ldr	r1, [pc, #132]	; (80031f8 <_malloc_r+0xac>)
 8003174:	680a      	ldr	r2, [r1, #0]
 8003176:	4614      	mov	r4, r2
 8003178:	b99c      	cbnz	r4, 80031a2 <_malloc_r+0x56>
 800317a:	4f20      	ldr	r7, [pc, #128]	; (80031fc <_malloc_r+0xb0>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b923      	cbnz	r3, 800318a <_malloc_r+0x3e>
 8003180:	4621      	mov	r1, r4
 8003182:	4630      	mov	r0, r6
 8003184:	f000 f862 	bl	800324c <_sbrk_r>
 8003188:	6038      	str	r0, [r7, #0]
 800318a:	4629      	mov	r1, r5
 800318c:	4630      	mov	r0, r6
 800318e:	f000 f85d 	bl	800324c <_sbrk_r>
 8003192:	1c43      	adds	r3, r0, #1
 8003194:	d123      	bne.n	80031de <_malloc_r+0x92>
 8003196:	230c      	movs	r3, #12
 8003198:	4630      	mov	r0, r6
 800319a:	6033      	str	r3, [r6, #0]
 800319c:	f000 f86c 	bl	8003278 <__malloc_unlock>
 80031a0:	e7e3      	b.n	800316a <_malloc_r+0x1e>
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	1b5b      	subs	r3, r3, r5
 80031a6:	d417      	bmi.n	80031d8 <_malloc_r+0x8c>
 80031a8:	2b0b      	cmp	r3, #11
 80031aa:	d903      	bls.n	80031b4 <_malloc_r+0x68>
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	441c      	add	r4, r3
 80031b0:	6025      	str	r5, [r4, #0]
 80031b2:	e004      	b.n	80031be <_malloc_r+0x72>
 80031b4:	6863      	ldr	r3, [r4, #4]
 80031b6:	42a2      	cmp	r2, r4
 80031b8:	bf0c      	ite	eq
 80031ba:	600b      	streq	r3, [r1, #0]
 80031bc:	6053      	strne	r3, [r2, #4]
 80031be:	4630      	mov	r0, r6
 80031c0:	f000 f85a 	bl	8003278 <__malloc_unlock>
 80031c4:	f104 000b 	add.w	r0, r4, #11
 80031c8:	1d23      	adds	r3, r4, #4
 80031ca:	f020 0007 	bic.w	r0, r0, #7
 80031ce:	1ac2      	subs	r2, r0, r3
 80031d0:	d0cc      	beq.n	800316c <_malloc_r+0x20>
 80031d2:	1a1b      	subs	r3, r3, r0
 80031d4:	50a3      	str	r3, [r4, r2]
 80031d6:	e7c9      	b.n	800316c <_malloc_r+0x20>
 80031d8:	4622      	mov	r2, r4
 80031da:	6864      	ldr	r4, [r4, #4]
 80031dc:	e7cc      	b.n	8003178 <_malloc_r+0x2c>
 80031de:	1cc4      	adds	r4, r0, #3
 80031e0:	f024 0403 	bic.w	r4, r4, #3
 80031e4:	42a0      	cmp	r0, r4
 80031e6:	d0e3      	beq.n	80031b0 <_malloc_r+0x64>
 80031e8:	1a21      	subs	r1, r4, r0
 80031ea:	4630      	mov	r0, r6
 80031ec:	f000 f82e 	bl	800324c <_sbrk_r>
 80031f0:	3001      	adds	r0, #1
 80031f2:	d1dd      	bne.n	80031b0 <_malloc_r+0x64>
 80031f4:	e7cf      	b.n	8003196 <_malloc_r+0x4a>
 80031f6:	bf00      	nop
 80031f8:	20000090 	.word	0x20000090
 80031fc:	20000094 	.word	0x20000094

08003200 <_realloc_r>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	4607      	mov	r7, r0
 8003204:	4614      	mov	r4, r2
 8003206:	460e      	mov	r6, r1
 8003208:	b921      	cbnz	r1, 8003214 <_realloc_r+0x14>
 800320a:	4611      	mov	r1, r2
 800320c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003210:	f7ff bf9c 	b.w	800314c <_malloc_r>
 8003214:	b922      	cbnz	r2, 8003220 <_realloc_r+0x20>
 8003216:	f7ff ff4d 	bl	80030b4 <_free_r>
 800321a:	4625      	mov	r5, r4
 800321c:	4628      	mov	r0, r5
 800321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003220:	f000 f830 	bl	8003284 <_malloc_usable_size_r>
 8003224:	42a0      	cmp	r0, r4
 8003226:	d20f      	bcs.n	8003248 <_realloc_r+0x48>
 8003228:	4621      	mov	r1, r4
 800322a:	4638      	mov	r0, r7
 800322c:	f7ff ff8e 	bl	800314c <_malloc_r>
 8003230:	4605      	mov	r5, r0
 8003232:	2800      	cmp	r0, #0
 8003234:	d0f2      	beq.n	800321c <_realloc_r+0x1c>
 8003236:	4631      	mov	r1, r6
 8003238:	4622      	mov	r2, r4
 800323a:	f7ff ff13 	bl	8003064 <memcpy>
 800323e:	4631      	mov	r1, r6
 8003240:	4638      	mov	r0, r7
 8003242:	f7ff ff37 	bl	80030b4 <_free_r>
 8003246:	e7e9      	b.n	800321c <_realloc_r+0x1c>
 8003248:	4635      	mov	r5, r6
 800324a:	e7e7      	b.n	800321c <_realloc_r+0x1c>

0800324c <_sbrk_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	2300      	movs	r3, #0
 8003250:	4d05      	ldr	r5, [pc, #20]	; (8003268 <_sbrk_r+0x1c>)
 8003252:	4604      	mov	r4, r0
 8003254:	4608      	mov	r0, r1
 8003256:	602b      	str	r3, [r5, #0]
 8003258:	f7fd faac 	bl	80007b4 <_sbrk>
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d102      	bne.n	8003266 <_sbrk_r+0x1a>
 8003260:	682b      	ldr	r3, [r5, #0]
 8003262:	b103      	cbz	r3, 8003266 <_sbrk_r+0x1a>
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	bd38      	pop	{r3, r4, r5, pc}
 8003268:	2000016c 	.word	0x2000016c

0800326c <__malloc_lock>:
 800326c:	4801      	ldr	r0, [pc, #4]	; (8003274 <__malloc_lock+0x8>)
 800326e:	f000 b811 	b.w	8003294 <__retarget_lock_acquire_recursive>
 8003272:	bf00      	nop
 8003274:	20000174 	.word	0x20000174

08003278 <__malloc_unlock>:
 8003278:	4801      	ldr	r0, [pc, #4]	; (8003280 <__malloc_unlock+0x8>)
 800327a:	f000 b80c 	b.w	8003296 <__retarget_lock_release_recursive>
 800327e:	bf00      	nop
 8003280:	20000174 	.word	0x20000174

08003284 <_malloc_usable_size_r>:
 8003284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003288:	1f18      	subs	r0, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	bfbc      	itt	lt
 800328e:	580b      	ldrlt	r3, [r1, r0]
 8003290:	18c0      	addlt	r0, r0, r3
 8003292:	4770      	bx	lr

08003294 <__retarget_lock_acquire_recursive>:
 8003294:	4770      	bx	lr

08003296 <__retarget_lock_release_recursive>:
 8003296:	4770      	bx	lr

08003298 <_init>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	bf00      	nop
 800329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329e:	bc08      	pop	{r3}
 80032a0:	469e      	mov	lr, r3
 80032a2:	4770      	bx	lr

080032a4 <_fini>:
 80032a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a6:	bf00      	nop
 80032a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032aa:	bc08      	pop	{r3}
 80032ac:	469e      	mov	lr, r3
 80032ae:	4770      	bx	lr
