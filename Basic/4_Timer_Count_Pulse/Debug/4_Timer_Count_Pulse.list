
4_Timer_Count_Pulse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002548  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026b4  080026b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026b4  080026b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026b4  080026b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  0800272c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800272c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa14  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019df  00000000  00000000  0002aaad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178fd  00000000  00000000  0002da38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b412  00000000  00000000  00045335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a20b  00000000  00000000  00050747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da952  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c4  00000000  00000000  000da9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800263c 	.word	0x0800263c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800263c 	.word	0x0800263c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa94 	bl	800067c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f83c 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8fc 	bl	8000354 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f87e 	bl	800025c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f8ce 	bl	8000300 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000164:	4813      	ldr	r0, [pc, #76]	; (80001b4 <main+0x68>)
 8000166:	f001 f9ef 	bl	8001548 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		count = (uint8_t)__HAL_TIM_GET_COUNTER(&htim2);
 800016a:	4b12      	ldr	r3, [pc, #72]	; (80001b4 <main+0x68>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000170:	b2da      	uxtb	r2, r3
 8000172:	4b11      	ldr	r3, [pc, #68]	; (80001b8 <main+0x6c>)
 8000174:	701a      	strb	r2, [r3, #0]
		if(temp != count)
 8000176:	4b11      	ldr	r3, [pc, #68]	; (80001bc <main+0x70>)
 8000178:	781a      	ldrb	r2, [r3, #0]
 800017a:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <main+0x6c>)
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	429a      	cmp	r2, r3
 8000180:	d0f3      	beq.n	800016a <main+0x1e>
		{
			sprintf(Buff,"%d",count);
 8000182:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <main+0x6c>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	461a      	mov	r2, r3
 8000188:	490d      	ldr	r1, [pc, #52]	; (80001c0 <main+0x74>)
 800018a:	480e      	ldr	r0, [pc, #56]	; (80001c4 <main+0x78>)
 800018c:	f001 fe1c 	bl	8001dc8 <siprintf>
			//HAL_UART_Transmit(&huart2, &temp, 1, HAL_MAX_DELAY);
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <main+0x7c>)
 8000196:	f000 fd53 	bl	8000c40 <HAL_GPIO_TogglePin>
			temp = count;
 800019a:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <main+0x6c>)
 800019c:	781a      	ldrb	r2, [r3, #0]
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <main+0x70>)
 80001a0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, Buff, 1, 500);
 80001a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001a6:	2201      	movs	r2, #1
 80001a8:	4906      	ldr	r1, [pc, #24]	; (80001c4 <main+0x78>)
 80001aa:	4808      	ldr	r0, [pc, #32]	; (80001cc <main+0x80>)
 80001ac:	f001 fc6f 	bl	8001a8e <HAL_UART_Transmit>
		count = (uint8_t)__HAL_TIM_GET_COUNTER(&htim2);
 80001b0:	e7db      	b.n	800016a <main+0x1e>
 80001b2:	bf00      	nop
 80001b4:	200000a4 	.word	0x200000a4
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	20000098 	.word	0x20000098
 80001c0:	08002654 	.word	0x08002654
 80001c4:	2000009c 	.word	0x2000009c
 80001c8:	40011000 	.word	0x40011000
 80001cc:	200000ec 	.word	0x200000ec

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f001 fdea 	bl	8001db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f2:	2301      	movs	r3, #1
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000204:	2302      	movs	r3, #2
 8000206:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800020e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000212:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0318 	add.w	r3, r7, #24
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fd2b 	bl	8000c74 <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000224:	f000 f8e2 	bl	80003ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022c:	2302      	movs	r3, #2
 800022e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2102      	movs	r1, #2
 8000242:	4618      	mov	r0, r3
 8000244:	f000 ff96 	bl	8001174 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800024e:	f000 f8cd 	bl	80003ec <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	; 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b088      	sub	sp, #32
 8000260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000262:	f107 030c 	add.w	r3, r7, #12
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800027a:	4b20      	ldr	r3, [pc, #128]	; (80002fc <MX_TIM2_Init+0xa0>)
 800027c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000282:	4b1e      	ldr	r3, [pc, #120]	; (80002fc <MX_TIM2_Init+0xa0>)
 8000284:	2200      	movs	r2, #0
 8000286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000288:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <MX_TIM2_Init+0xa0>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800028e:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <MX_TIM2_Init+0xa0>)
 8000290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000294:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000296:	4b19      	ldr	r3, [pc, #100]	; (80002fc <MX_TIM2_Init+0xa0>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <MX_TIM2_Init+0xa0>)
 800029e:	2200      	movs	r2, #0
 80002a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002a2:	4816      	ldr	r0, [pc, #88]	; (80002fc <MX_TIM2_Init+0xa0>)
 80002a4:	f001 f900 	bl	80014a8 <HAL_TIM_Base_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002ae:	f000 f89d 	bl	80003ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80002b2:	2307      	movs	r3, #7
 80002b4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80002b6:	2350      	movs	r3, #80	; 0x50
 80002b8:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80002c2:	f107 030c 	add.w	r3, r7, #12
 80002c6:	4619      	mov	r1, r3
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <MX_TIM2_Init+0xa0>)
 80002ca:	f001 f987 	bl	80015dc <HAL_TIM_SlaveConfigSynchro>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80002d4:	f000 f88a 	bl	80003ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d8:	2300      	movs	r3, #0
 80002da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4619      	mov	r1, r3
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_TIM2_Init+0xa0>)
 80002e6:	f001 fb27 	bl	8001938 <HAL_TIMEx_MasterConfigSynchronization>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80002f0:	f000 f87c 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	3720      	adds	r7, #32
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000a4 	.word	0x200000a4

08000300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_USART2_UART_Init+0x4c>)
 8000306:	4a12      	ldr	r2, [pc, #72]	; (8000350 <MX_USART2_UART_Init+0x50>)
 8000308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <MX_USART2_UART_Init+0x4c>)
 800030c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_USART2_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_USART2_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_USART2_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_USART2_UART_Init+0x4c>)
 8000326:	220c      	movs	r2, #12
 8000328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_USART2_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_USART2_UART_Init+0x4c>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_USART2_UART_Init+0x4c>)
 8000338:	f001 fb5c 	bl	80019f4 <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000342:	f000 f853 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200000ec 	.word	0x200000ec
 8000350:	40004400 	.word	0x40004400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <MX_GPIO_Init+0x90>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0310 	and.w	r3, r3, #16
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <MX_GPIO_Init+0x90>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <MX_GPIO_Init+0x90>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0304 	and.w	r3, r3, #4
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b6:	480c      	ldr	r0, [pc, #48]	; (80003e8 <MX_GPIO_Init+0x94>)
 80003b8:	f000 fc2a 	bl	8000c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	4804      	ldr	r0, [pc, #16]	; (80003e8 <MX_GPIO_Init+0x94>)
 80003d6:	f000 fa97 	bl	8000908 <HAL_GPIO_Init>

}
 80003da:	bf00      	nop
 80003dc:	3720      	adds	r7, #32
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40011000 	.word	0x40011000

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <Error_Handler+0x8>
	...

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <HAL_MspInit+0x5c>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a14      	ldr	r2, [pc, #80]	; (8000454 <HAL_MspInit+0x5c>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <HAL_MspInit+0x5c>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <HAL_MspInit+0x5c>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <HAL_MspInit+0x60>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <HAL_MspInit+0x60>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800047a:	d123      	bne.n	80004c4 <HAL_TIM_Base_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <HAL_TIM_Base_MspInit+0x70>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	4a12      	ldr	r2, [pc, #72]	; (80004cc <HAL_TIM_Base_MspInit+0x70>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	61d3      	str	r3, [r2, #28]
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <HAL_TIM_Base_MspInit+0x70>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <HAL_TIM_Base_MspInit+0x70>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <HAL_TIM_Base_MspInit+0x70>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <HAL_TIM_Base_MspInit+0x70>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004ac:	2301      	movs	r3, #1
 80004ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004b4:	2302      	movs	r3, #2
 80004b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4804      	ldr	r0, [pc, #16]	; (80004d0 <HAL_TIM_Base_MspInit+0x74>)
 80004c0:	f000 fa22 	bl	8000908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800

080004d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a1b      	ldr	r2, [pc, #108]	; (800055c <HAL_UART_MspInit+0x88>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d12f      	bne.n	8000554 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f4:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <HAL_UART_MspInit+0x8c>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	4a19      	ldr	r2, [pc, #100]	; (8000560 <HAL_UART_MspInit+0x8c>)
 80004fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fe:	61d3      	str	r3, [r2, #28]
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <HAL_UART_MspInit+0x8c>)
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <HAL_UART_MspInit+0x8c>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <HAL_UART_MspInit+0x8c>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <HAL_UART_MspInit+0x8c>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000524:	2304      	movs	r3, #4
 8000526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000528:	2302      	movs	r3, #2
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	480b      	ldr	r0, [pc, #44]	; (8000564 <HAL_UART_MspInit+0x90>)
 8000538:	f000 f9e6 	bl	8000908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800053c:	2308      	movs	r3, #8
 800053e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <HAL_UART_MspInit+0x90>)
 8000550:	f000 f9da 	bl	8000908 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40004400 	.word	0x40004400
 8000560:	40021000 	.word	0x40021000
 8000564:	40010800 	.word	0x40010800

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800056c:	e7fe      	b.n	800056c <NMI_Handler+0x4>

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler+0x4>

0800057a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <UsageFault_Handler+0x4>

08000586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ae:	f000 f8ab 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <_sbrk+0x5c>)
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <_sbrk+0x60>)
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <_sbrk+0x64>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <_sbrk+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d207      	bcs.n	80005f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e8:	f001 fbbc 	bl	8001d64 <__errno>
 80005ec:	4603      	mov	r3, r0
 80005ee:	220c      	movs	r2, #12
 80005f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e009      	b.n	800060c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <_sbrk+0x64>)
 8000608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20005000 	.word	0x20005000
 8000618:	00000400 	.word	0x00000400
 800061c:	2000008c 	.word	0x2000008c
 8000620:	20000140 	.word	0x20000140

08000624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000630:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000632:	e003      	b.n	800063c <LoopCopyDataInit>

08000634 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000636:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000638:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800063a:	3104      	adds	r1, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000640:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000642:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000644:	d3f6      	bcc.n	8000634 <CopyDataInit>
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000648:	e002      	b.n	8000650 <LoopFillZerobss>

0800064a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800064c:	f842 3b04 	str.w	r3, [r2], #4

08000650 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000652:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000654:	d3f9      	bcc.n	800064a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000656:	f7ff ffe5 	bl	8000624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065a:	f001 fb89 	bl	8001d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff fd75 	bl	800014c <main>
  bx lr
 8000662:	4770      	bx	lr
  ldr r3, =_sidata
 8000664:	080026bc 	.word	0x080026bc
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800066c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000670:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000674:	20000140 	.word	0x20000140

08000678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_2_IRQHandler>
	...

0800067c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_Init+0x28>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <HAL_Init+0x28>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068c:	2003      	movs	r0, #3
 800068e:	f000 f907 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f808 	bl	80006a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000698:	f7ff feae 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40022000 	.word	0x40022000

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_InitTick+0x54>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x58>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f911 	bl	80008ee <HAL_SYSTICK_Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00e      	b.n	80006f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d80a      	bhi.n	80006f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f000 f8e7 	bl	80008b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <HAL_InitTick+0x5c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e000      	b.n	80006f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000008 	.word	0x20000008
 8000704:	20000004 	.word	0x20000004

08000708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x1c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x20>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <HAL_IncTick+0x20>)
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	20000008 	.word	0x20000008
 8000728:	2000012c 	.word	0x2000012c

0800072c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return uwTick;
 8000730:	4b02      	ldr	r3, [pc, #8]	; (800073c <HAL_GetTick+0x10>)
 8000732:	681b      	ldr	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	2000012c 	.word	0x2000012c

08000740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	; (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	; 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800086c:	d301      	bcc.n	8000872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2301      	movs	r3, #1
 8000870:	e00f      	b.n	8000892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <SysTick_Config+0x40>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087a:	210f      	movs	r1, #15
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f7ff ff90 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <SysTick_Config+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <SysTick_Config+0x40>)
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010

080008a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff49 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c8:	f7ff ff5e 	bl	8000788 <__NVIC_GetPriorityGrouping>
 80008cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	6978      	ldr	r0, [r7, #20]
 80008d4:	f7ff ff90 	bl	80007f8 <NVIC_EncodePriority>
 80008d8:	4602      	mov	r2, r0
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff5f 	bl	80007a4 <__NVIC_SetPriority>
}
 80008e6:	bf00      	nop
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ffb0 	bl	800085c <SysTick_Config>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000908:	b480      	push	{r7}
 800090a:	b08b      	sub	sp, #44	; 0x2c
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091a:	e169      	b.n	8000bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800091c:	2201      	movs	r2, #1
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	69fa      	ldr	r2, [r7, #28]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	429a      	cmp	r2, r3
 8000936:	f040 8158 	bne.w	8000bea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a9a      	ldr	r2, [pc, #616]	; (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d05e      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000944:	4a98      	ldr	r2, [pc, #608]	; (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d875      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800094a:	4a98      	ldr	r2, [pc, #608]	; (8000bac <HAL_GPIO_Init+0x2a4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d058      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000950:	4a96      	ldr	r2, [pc, #600]	; (8000bac <HAL_GPIO_Init+0x2a4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d86f      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000956:	4a96      	ldr	r2, [pc, #600]	; (8000bb0 <HAL_GPIO_Init+0x2a8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d052      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 800095c:	4a94      	ldr	r2, [pc, #592]	; (8000bb0 <HAL_GPIO_Init+0x2a8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d869      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000962:	4a94      	ldr	r2, [pc, #592]	; (8000bb4 <HAL_GPIO_Init+0x2ac>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d04c      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000968:	4a92      	ldr	r2, [pc, #584]	; (8000bb4 <HAL_GPIO_Init+0x2ac>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d863      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800096e:	4a92      	ldr	r2, [pc, #584]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d046      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000974:	4a90      	ldr	r2, [pc, #576]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d85d      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800097a:	2b12      	cmp	r3, #18
 800097c:	d82a      	bhi.n	80009d4 <HAL_GPIO_Init+0xcc>
 800097e:	2b12      	cmp	r3, #18
 8000980:	d859      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <HAL_GPIO_Init+0x80>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000a03 	.word	0x08000a03
 800098c:	080009dd 	.word	0x080009dd
 8000990:	080009ef 	.word	0x080009ef
 8000994:	08000a31 	.word	0x08000a31
 8000998:	08000a37 	.word	0x08000a37
 800099c:	08000a37 	.word	0x08000a37
 80009a0:	08000a37 	.word	0x08000a37
 80009a4:	08000a37 	.word	0x08000a37
 80009a8:	08000a37 	.word	0x08000a37
 80009ac:	08000a37 	.word	0x08000a37
 80009b0:	08000a37 	.word	0x08000a37
 80009b4:	08000a37 	.word	0x08000a37
 80009b8:	08000a37 	.word	0x08000a37
 80009bc:	08000a37 	.word	0x08000a37
 80009c0:	08000a37 	.word	0x08000a37
 80009c4:	08000a37 	.word	0x08000a37
 80009c8:	08000a37 	.word	0x08000a37
 80009cc:	080009e5 	.word	0x080009e5
 80009d0:	080009f9 	.word	0x080009f9
 80009d4:	4a79      	ldr	r2, [pc, #484]	; (8000bbc <HAL_GPIO_Init+0x2b4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d013      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009da:	e02c      	b.n	8000a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e029      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	3304      	adds	r3, #4
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e024      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	3308      	adds	r3, #8
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e01f      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	330c      	adds	r3, #12
 80009fe:	623b      	str	r3, [r7, #32]
          break;
 8000a00:	e01a      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	623b      	str	r3, [r7, #32]
          break;
 8000a0e:	e013      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d105      	bne.n	8000a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	611a      	str	r2, [r3, #16]
          break;
 8000a22:	e009      	b.n	8000a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a24:	2308      	movs	r3, #8
 8000a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	615a      	str	r2, [r3, #20]
          break;
 8000a2e:	e003      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
          break;
 8000a34:	e000      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          break;
 8000a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	2bff      	cmp	r3, #255	; 0xff
 8000a3c:	d801      	bhi.n	8000a42 <HAL_GPIO_Init+0x13a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	e001      	b.n	8000a46 <HAL_GPIO_Init+0x13e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3304      	adds	r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2bff      	cmp	r3, #255	; 0xff
 8000a4c:	d802      	bhi.n	8000a54 <HAL_GPIO_Init+0x14c>
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	e002      	b.n	8000a5a <HAL_GPIO_Init+0x152>
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	3b08      	subs	r3, #8
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	210f      	movs	r1, #15
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	6a39      	ldr	r1, [r7, #32]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	431a      	orrs	r2, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 80b1 	beq.w	8000bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a88:	4b4d      	ldr	r3, [pc, #308]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aa0:	4a48      	ldr	r2, [pc, #288]	; (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	220f      	movs	r2, #15
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <HAL_GPIO_Init+0x2c0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d013      	beq.n	8000af4 <HAL_GPIO_Init+0x1ec>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a3f      	ldr	r2, [pc, #252]	; (8000bcc <HAL_GPIO_Init+0x2c4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00d      	beq.n	8000af0 <HAL_GPIO_Init+0x1e8>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a3e      	ldr	r2, [pc, #248]	; (8000bd0 <HAL_GPIO_Init+0x2c8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0x1e4>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3d      	ldr	r2, [pc, #244]	; (8000bd4 <HAL_GPIO_Init+0x2cc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d101      	bne.n	8000ae8 <HAL_GPIO_Init+0x1e0>
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000ae8:	2304      	movs	r3, #4
 8000aea:	e004      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000aec:	2302      	movs	r3, #2
 8000aee:	e002      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000af4:	2300      	movs	r3, #0
 8000af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af8:	f002 0203 	and.w	r2, r2, #3
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	4093      	lsls	r3, r2
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b06:	492f      	ldr	r1, [pc, #188]	; (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	492c      	ldr	r1, [pc, #176]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	600b      	str	r3, [r1, #0]
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4928      	ldr	r1, [pc, #160]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	4922      	ldr	r1, [pc, #136]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	604b      	str	r3, [r1, #4]
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	491e      	ldr	r1, [pc, #120]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	4918      	ldr	r1, [pc, #96]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4914      	ldr	r1, [pc, #80]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d021      	beq.n	8000bdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60cb      	str	r3, [r1, #12]
 8000ba4:	e021      	b.n	8000bea <HAL_GPIO_Init+0x2e2>
 8000ba6:	bf00      	nop
 8000ba8:	10320000 	.word	0x10320000
 8000bac:	10310000 	.word	0x10310000
 8000bb0:	10220000 	.word	0x10220000
 8000bb4:	10210000 	.word	0x10210000
 8000bb8:	10120000 	.word	0x10120000
 8000bbc:	10110000 	.word	0x10110000
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	40011000 	.word	0x40011000
 8000bd4:	40011400 	.word	0x40011400
 8000bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_GPIO_Init+0x304>)
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	4909      	ldr	r1, [pc, #36]	; (8000c0c <HAL_GPIO_Init+0x304>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	3301      	adds	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f47f ae8e 	bne.w	800091c <HAL_GPIO_Init+0x14>
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	372c      	adds	r7, #44	; 0x2c
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40010400 	.word	0x40010400

08000c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c20:	787b      	ldrb	r3, [r7, #1]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c2c:	e003      	b.n	8000c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	041a      	lsls	r2, r3, #16
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	611a      	str	r2, [r3, #16]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c52:	887a      	ldrh	r2, [r7, #2]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4013      	ands	r3, r2
 8000c58:	041a      	lsls	r2, r3, #16
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43d9      	mvns	r1, r3
 8000c5e:	887b      	ldrh	r3, [r7, #2]
 8000c60:	400b      	ands	r3, r1
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	611a      	str	r2, [r3, #16]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e26c      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 8087 	beq.w	8000da2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c94:	4b92      	ldr	r3, [pc, #584]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d00c      	beq.n	8000cba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ca0:	4b8f      	ldr	r3, [pc, #572]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 030c 	and.w	r3, r3, #12
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d112      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x5e>
 8000cac:	4b8c      	ldr	r3, [pc, #560]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cba:	4b89      	ldr	r3, [pc, #548]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d06c      	beq.n	8000da0 <HAL_RCC_OscConfig+0x12c>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d168      	bne.n	8000da0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e246      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cda:	d106      	bne.n	8000cea <HAL_RCC_OscConfig+0x76>
 8000cdc:	4b80      	ldr	r3, [pc, #512]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a7f      	ldr	r2, [pc, #508]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e02e      	b.n	8000d48 <HAL_RCC_OscConfig+0xd4>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x98>
 8000cf2:	4b7b      	ldr	r3, [pc, #492]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a7a      	ldr	r2, [pc, #488]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b78      	ldr	r3, [pc, #480]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a77      	ldr	r2, [pc, #476]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e01d      	b.n	8000d48 <HAL_RCC_OscConfig+0xd4>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d14:	d10c      	bne.n	8000d30 <HAL_RCC_OscConfig+0xbc>
 8000d16:	4b72      	ldr	r3, [pc, #456]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a71      	ldr	r2, [pc, #452]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	4b6f      	ldr	r3, [pc, #444]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a6e      	ldr	r2, [pc, #440]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	e00b      	b.n	8000d48 <HAL_RCC_OscConfig+0xd4>
 8000d30:	4b6b      	ldr	r3, [pc, #428]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a6a      	ldr	r2, [pc, #424]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b68      	ldr	r3, [pc, #416]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a67      	ldr	r2, [pc, #412]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d013      	beq.n	8000d78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d50:	f7ff fcec 	bl	800072c <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d58:	f7ff fce8 	bl	800072c <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b64      	cmp	r3, #100	; 0x64
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e1fa      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f0      	beq.n	8000d58 <HAL_RCC_OscConfig+0xe4>
 8000d76:	e014      	b.n	8000da2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fcd8 	bl	800072c <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d80:	f7ff fcd4 	bl	800072c <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b64      	cmp	r3, #100	; 0x64
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e1e6      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d92:	4b53      	ldr	r3, [pc, #332]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f0      	bne.n	8000d80 <HAL_RCC_OscConfig+0x10c>
 8000d9e:	e000      	b.n	8000da2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d063      	beq.n	8000e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dae:	4b4c      	ldr	r3, [pc, #304]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 030c 	and.w	r3, r3, #12
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00b      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dba:	4b49      	ldr	r3, [pc, #292]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 030c 	and.w	r3, r3, #12
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d11c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x18c>
 8000dc6:	4b46      	ldr	r3, [pc, #280]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d116      	bne.n	8000e00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd2:	4b43      	ldr	r3, [pc, #268]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <HAL_RCC_OscConfig+0x176>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d001      	beq.n	8000dea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e1ba      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dea:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4939      	ldr	r1, [pc, #228]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfe:	e03a      	b.n	8000e76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d020      	beq.n	8000e4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e08:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <HAL_RCC_OscConfig+0x270>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fc8d 	bl	800072c <HAL_GetTick>
 8000e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e14:	e008      	b.n	8000e28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e16:	f7ff fc89 	bl	800072c <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e19b      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0f0      	beq.n	8000e16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e34:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4927      	ldr	r1, [pc, #156]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	600b      	str	r3, [r1, #0]
 8000e48:	e015      	b.n	8000e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <HAL_RCC_OscConfig+0x270>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff fc6c 	bl	800072c <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e58:	f7ff fc68 	bl	800072c <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e17a      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f0      	bne.n	8000e58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d03a      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d019      	beq.n	8000ebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_RCC_OscConfig+0x274>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff fc4c 	bl	800072c <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e98:	f7ff fc48 	bl	800072c <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e15a      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f000 fad8 	bl	800146c <RCC_Delay>
 8000ebc:	e01c      	b.n	8000ef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_RCC_OscConfig+0x274>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec4:	f7ff fc32 	bl	800072c <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eca:	e00f      	b.n	8000eec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fc2e 	bl	800072c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d908      	bls.n	8000eec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e140      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	42420000 	.word	0x42420000
 8000ee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eec:	4b9e      	ldr	r3, [pc, #632]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e9      	bne.n	8000ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80a6 	beq.w	8001052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f0a:	4b97      	ldr	r3, [pc, #604]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10d      	bne.n	8000f32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b94      	ldr	r3, [pc, #592]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a93      	ldr	r2, [pc, #588]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b91      	ldr	r3, [pc, #580]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f32:	4b8e      	ldr	r3, [pc, #568]	; (800116c <HAL_RCC_OscConfig+0x4f8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d118      	bne.n	8000f70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f3e:	4b8b      	ldr	r3, [pc, #556]	; (800116c <HAL_RCC_OscConfig+0x4f8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a8a      	ldr	r2, [pc, #552]	; (800116c <HAL_RCC_OscConfig+0x4f8>)
 8000f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff fbef 	bl	800072c <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f52:	f7ff fbeb 	bl	800072c <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b64      	cmp	r3, #100	; 0x64
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e0fd      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f64:	4b81      	ldr	r3, [pc, #516]	; (800116c <HAL_RCC_OscConfig+0x4f8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f0      	beq.n	8000f52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d106      	bne.n	8000f86 <HAL_RCC_OscConfig+0x312>
 8000f78:	4b7b      	ldr	r3, [pc, #492]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4a7a      	ldr	r2, [pc, #488]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6213      	str	r3, [r2, #32]
 8000f84:	e02d      	b.n	8000fe2 <HAL_RCC_OscConfig+0x36e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x334>
 8000f8e:	4b76      	ldr	r3, [pc, #472]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a75      	ldr	r2, [pc, #468]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6213      	str	r3, [r2, #32]
 8000f9a:	4b73      	ldr	r3, [pc, #460]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a72      	ldr	r2, [pc, #456]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6213      	str	r3, [r2, #32]
 8000fa6:	e01c      	b.n	8000fe2 <HAL_RCC_OscConfig+0x36e>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d10c      	bne.n	8000fca <HAL_RCC_OscConfig+0x356>
 8000fb0:	4b6d      	ldr	r3, [pc, #436]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a6c      	ldr	r2, [pc, #432]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	4b6a      	ldr	r3, [pc, #424]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a69      	ldr	r2, [pc, #420]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6213      	str	r3, [r2, #32]
 8000fc8:	e00b      	b.n	8000fe2 <HAL_RCC_OscConfig+0x36e>
 8000fca:	4b67      	ldr	r3, [pc, #412]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4a66      	ldr	r2, [pc, #408]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	6213      	str	r3, [r2, #32]
 8000fd6:	4b64      	ldr	r3, [pc, #400]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	4a63      	ldr	r2, [pc, #396]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	f023 0304 	bic.w	r3, r3, #4
 8000fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d015      	beq.n	8001016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fb9f 	bl	800072c <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff0:	e00a      	b.n	8001008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fb9b 	bl	800072c <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001000:	4293      	cmp	r3, r2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e0ab      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001008:	4b57      	ldr	r3, [pc, #348]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0ee      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x37e>
 8001014:	e014      	b.n	8001040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001016:	f7ff fb89 	bl	800072c <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800101e:	f7ff fb85 	bl	800072c <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	f241 3288 	movw	r2, #5000	; 0x1388
 800102c:	4293      	cmp	r3, r2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e095      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001034:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1ee      	bne.n	800101e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d105      	bne.n	8001052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001046:	4b48      	ldr	r3, [pc, #288]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a47      	ldr	r2, [pc, #284]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 800104c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8081 	beq.w	800115e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800105c:	4b42      	ldr	r3, [pc, #264]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b08      	cmp	r3, #8
 8001066:	d061      	beq.n	800112c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d146      	bne.n	80010fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001070:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <HAL_RCC_OscConfig+0x4fc>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fb59 	bl	800072c <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff fb55 	bl	800072c <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e067      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f0      	bne.n	800107e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a4:	d108      	bne.n	80010b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	492d      	ldr	r1, [pc, #180]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b8:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a19      	ldr	r1, [r3, #32]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	430b      	orrs	r3, r1
 80010ca:	4927      	ldr	r1, [pc, #156]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_RCC_OscConfig+0x4fc>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fb29 	bl	800072c <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff fb25 	bl	800072c <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e037      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x46a>
 80010fc:	e02f      	b.n	800115e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_RCC_OscConfig+0x4fc>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fb12 	bl	800072c <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110c:	f7ff fb0e 	bl	800072c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e020      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x498>
 800112a:	e018      	b.n	800115e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e013      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_RCC_OscConfig+0x4f4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	429a      	cmp	r2, r3
 800114a:	d106      	bne.n	800115a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001156:	429a      	cmp	r2, r3
 8001158:	d001      	beq.n	800115e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	40007000 	.word	0x40007000
 8001170:	42420060 	.word	0x42420060

08001174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0d0      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001188:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d910      	bls.n	80011b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4b67      	ldr	r3, [pc, #412]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 0207 	bic.w	r2, r3, #7
 800119e:	4965      	ldr	r1, [pc, #404]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a6:	4b63      	ldr	r3, [pc, #396]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d001      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0b8      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d020      	beq.n	8001206 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d0:	4b59      	ldr	r3, [pc, #356]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a58      	ldr	r2, [pc, #352]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e8:	4b53      	ldr	r3, [pc, #332]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	4a52      	ldr	r2, [pc, #328]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f4:	4b50      	ldr	r3, [pc, #320]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	494d      	ldr	r1, [pc, #308]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d040      	beq.n	8001294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	4b47      	ldr	r3, [pc, #284]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d115      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e07f      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001232:	4b41      	ldr	r3, [pc, #260]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e073      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06b      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001252:	4b39      	ldr	r3, [pc, #228]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f023 0203 	bic.w	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4936      	ldr	r1, [pc, #216]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001264:	f7ff fa62 	bl	800072c <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	e00a      	b.n	8001282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f7ff fa5e 	bl	800072c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	; 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e053      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 020c 	and.w	r2, r3, #12
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	429a      	cmp	r2, r3
 8001292:	d1eb      	bne.n	800126c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d210      	bcs.n	80012c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 0207 	bic.w	r2, r3, #7
 80012aa:	4922      	ldr	r1, [pc, #136]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e032      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4916      	ldr	r1, [pc, #88]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	490e      	ldr	r1, [pc, #56]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001302:	f000 f821 	bl	8001348 <HAL_RCC_GetSysClockFreq>
 8001306:	4602      	mov	r2, r0
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	490a      	ldr	r1, [pc, #40]	; (800133c <HAL_RCC_ClockConfig+0x1c8>)
 8001314:	5ccb      	ldrb	r3, [r1, r3]
 8001316:	fa22 f303 	lsr.w	r3, r2, r3
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <HAL_RCC_ClockConfig+0x1cc>)
 800131c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_RCC_ClockConfig+0x1d0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f9c0 	bl	80006a8 <HAL_InitTick>

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000
 8001338:	40021000 	.word	0x40021000
 800133c:	08002668 	.word	0x08002668
 8001340:	20000000 	.word	0x20000000
 8001344:	20000004 	.word	0x20000004

08001348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001350:	1d3c      	adds	r4, r7, #4
 8001352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001358:	f240 2301 	movw	r3, #513	; 0x201
 800135c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b04      	cmp	r3, #4
 8001380:	d002      	beq.n	8001388 <HAL_RCC_GetSysClockFreq+0x40>
 8001382:	2b08      	cmp	r3, #8
 8001384:	d003      	beq.n	800138e <HAL_RCC_GetSysClockFreq+0x46>
 8001386:	e02d      	b.n	80013e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800138a:	623b      	str	r3, [r7, #32]
      break;
 800138c:	e02d      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	0c9b      	lsrs	r3, r3, #18
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800139a:	4413      	add	r3, r2
 800139c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	0c5b      	lsrs	r3, r3, #17
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013ba:	4413      	add	r3, r2
 80013bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013c6:	fb02 f203 	mul.w	r2, r2, r3
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	e004      	b.n	80013de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	623b      	str	r3, [r7, #32]
      break;
 80013e2:	e002      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013e6:	623b      	str	r3, [r7, #32]
      break;
 80013e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ea:	6a3b      	ldr	r3, [r7, #32]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc90      	pop	{r4, r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	08002658 	.word	0x08002658
 80013fc:	40021000 	.word	0x40021000
 8001400:	007a1200 	.word	0x007a1200
 8001404:	003d0900 	.word	0x003d0900

08001408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800140c:	4b02      	ldr	r3, [pc, #8]	; (8001418 <HAL_RCC_GetHCLKFreq+0x10>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000000 	.word	0x20000000

0800141c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001420:	f7ff fff2 	bl	8001408 <HAL_RCC_GetHCLKFreq>
 8001424:	4602      	mov	r2, r0
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	4903      	ldr	r1, [pc, #12]	; (8001440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001432:	5ccb      	ldrb	r3, [r1, r3]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	08002678 	.word	0x08002678

08001444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001448:	f7ff ffde 	bl	8001408 <HAL_RCC_GetHCLKFreq>
 800144c:	4602      	mov	r2, r0
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	0adb      	lsrs	r3, r3, #11
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	4903      	ldr	r1, [pc, #12]	; (8001468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800145a:	5ccb      	ldrb	r3, [r1, r3]
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	08002678 	.word	0x08002678

0800146c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <RCC_Delay+0x34>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <RCC_Delay+0x38>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0a5b      	lsrs	r3, r3, #9
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001488:	bf00      	nop
  }
  while (Delay --);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1e5a      	subs	r2, r3, #1
 800148e:	60fa      	str	r2, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f9      	bne.n	8001488 <RCC_Delay+0x1c>
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	20000000 	.word	0x20000000
 80014a4:	10624dd3 	.word	0x10624dd3

080014a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e041      	b.n	800153e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7fe ffc4 	bl	800045c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3304      	adds	r3, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f000 f8ba 	bl	8001660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b01      	cmp	r3, #1
 800155a:	d001      	beq.n	8001560 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e032      	b.n	80015c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <HAL_TIM_Base_Start+0x88>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00e      	beq.n	8001590 <HAL_TIM_Base_Start+0x48>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157a:	d009      	beq.n	8001590 <HAL_TIM_Base_Start+0x48>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_TIM_Base_Start+0x8c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d004      	beq.n	8001590 <HAL_TIM_Base_Start+0x48>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_TIM_Base_Start+0x90>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d111      	bne.n	80015b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d010      	beq.n	80015c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015b2:	e007      	b.n	80015c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40012c00 	.word	0x40012c00
 80015d4:	40000400 	.word	0x40000400
 80015d8:	40000800 	.word	0x40000800

080015dc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e031      	b.n	8001658 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001604:	6839      	ldr	r1, [r7, #0]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f88c 	bl	8001724 <TIM_SlaveTimer_SetConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e018      	b.n	8001658 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001634:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001644:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <TIM_Base_SetConfig+0xb8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00b      	beq.n	8001690 <TIM_Base_SetConfig+0x30>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167e:	d007      	beq.n	8001690 <TIM_Base_SetConfig+0x30>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a26      	ldr	r2, [pc, #152]	; (800171c <TIM_Base_SetConfig+0xbc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d003      	beq.n	8001690 <TIM_Base_SetConfig+0x30>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a25      	ldr	r2, [pc, #148]	; (8001720 <TIM_Base_SetConfig+0xc0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d108      	bne.n	80016a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <TIM_Base_SetConfig+0xb8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00b      	beq.n	80016c2 <TIM_Base_SetConfig+0x62>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b0:	d007      	beq.n	80016c2 <TIM_Base_SetConfig+0x62>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <TIM_Base_SetConfig+0xbc>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d003      	beq.n	80016c2 <TIM_Base_SetConfig+0x62>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a18      	ldr	r2, [pc, #96]	; (8001720 <TIM_Base_SetConfig+0xc0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d108      	bne.n	80016d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <TIM_Base_SetConfig+0xb8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d103      	bne.n	8001708 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	615a      	str	r2, [r3, #20]
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40000400 	.word	0x40000400
 8001720:	40000800 	.word	0x40000800

08001724 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4313      	orrs	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f023 0307 	bic.w	r3, r3, #7
 800174e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b70      	cmp	r3, #112	; 0x70
 8001768:	d01a      	beq.n	80017a0 <TIM_SlaveTimer_SetConfig+0x7c>
 800176a:	2b70      	cmp	r3, #112	; 0x70
 800176c:	d860      	bhi.n	8001830 <TIM_SlaveTimer_SetConfig+0x10c>
 800176e:	2b60      	cmp	r3, #96	; 0x60
 8001770:	d054      	beq.n	800181c <TIM_SlaveTimer_SetConfig+0xf8>
 8001772:	2b60      	cmp	r3, #96	; 0x60
 8001774:	d85c      	bhi.n	8001830 <TIM_SlaveTimer_SetConfig+0x10c>
 8001776:	2b50      	cmp	r3, #80	; 0x50
 8001778:	d046      	beq.n	8001808 <TIM_SlaveTimer_SetConfig+0xe4>
 800177a:	2b50      	cmp	r3, #80	; 0x50
 800177c:	d858      	bhi.n	8001830 <TIM_SlaveTimer_SetConfig+0x10c>
 800177e:	2b40      	cmp	r3, #64	; 0x40
 8001780:	d019      	beq.n	80017b6 <TIM_SlaveTimer_SetConfig+0x92>
 8001782:	2b40      	cmp	r3, #64	; 0x40
 8001784:	d854      	bhi.n	8001830 <TIM_SlaveTimer_SetConfig+0x10c>
 8001786:	2b30      	cmp	r3, #48	; 0x30
 8001788:	d054      	beq.n	8001834 <TIM_SlaveTimer_SetConfig+0x110>
 800178a:	2b30      	cmp	r3, #48	; 0x30
 800178c:	d850      	bhi.n	8001830 <TIM_SlaveTimer_SetConfig+0x10c>
 800178e:	2b20      	cmp	r3, #32
 8001790:	d050      	beq.n	8001834 <TIM_SlaveTimer_SetConfig+0x110>
 8001792:	2b20      	cmp	r3, #32
 8001794:	d84c      	bhi.n	8001830 <TIM_SlaveTimer_SetConfig+0x10c>
 8001796:	2b00      	cmp	r3, #0
 8001798:	d04c      	beq.n	8001834 <TIM_SlaveTimer_SetConfig+0x110>
 800179a:	2b10      	cmp	r3, #16
 800179c:	d04a      	beq.n	8001834 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800179e:	e047      	b.n	8001830 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68d9      	ldr	r1, [r3, #12]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	f000 f8a3 	bl	80018fa <TIM_ETR_SetConfig>
      break;
 80017b4:	e03f      	b.n	8001836 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d101      	bne.n	80017c2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e03a      	b.n	8001838 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0201 	bic.w	r2, r2, #1
 80017d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017e8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	621a      	str	r2, [r3, #32]
      break;
 8001806:	e016      	b.n	8001836 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6899      	ldr	r1, [r3, #8]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	461a      	mov	r2, r3
 8001816:	f000 f813 	bl	8001840 <TIM_TI1_ConfigInputStage>
      break;
 800181a:	e00c      	b.n	8001836 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6899      	ldr	r1, [r3, #8]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	461a      	mov	r2, r3
 800182a:	f000 f837 	bl	800189c <TIM_TI2_ConfigInputStage>
      break;
 800182e:	e002      	b.n	8001836 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8001830:	bf00      	nop
 8001832:	e000      	b.n	8001836 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8001834:	bf00      	nop
  }
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	f023 0201 	bic.w	r2, r3, #1
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800186a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f023 030a 	bic.w	r3, r3, #10
 800187c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
 8001884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	621a      	str	r2, [r3, #32]
}
 8001892:	bf00      	nop
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	f023 0210 	bic.w	r2, r3, #16
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80018c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	031b      	lsls	r3, r3, #12
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80018d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	621a      	str	r2, [r3, #32]
}
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b087      	sub	sp, #28
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001914:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	021a      	lsls	r2, r3, #8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	431a      	orrs	r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	4313      	orrs	r3, r2
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4313      	orrs	r3, r2
 8001926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	609a      	str	r2, [r3, #8]
}
 800192e:	bf00      	nop
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800194c:	2302      	movs	r3, #2
 800194e:	e046      	b.n	80019de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a16      	ldr	r2, [pc, #88]	; (80019e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00e      	beq.n	80019b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199c:	d009      	beq.n	80019b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d004      	beq.n	80019b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10c      	bne.n	80019cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40000800 	.word	0x40000800

080019f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e03f      	b.n	8001a86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7fe fd5a 	bl	80004d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f905 	bl	8001c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b08a      	sub	sp, #40	; 0x28
 8001a92:	af02      	add	r7, sp, #8
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d17c      	bne.n	8001ba8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_UART_Transmit+0x2c>
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e075      	b.n	8001baa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_UART_Transmit+0x3e>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e06e      	b.n	8001baa <HAL_UART_Transmit+0x11c>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2221      	movs	r2, #33	; 0x21
 8001ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ae2:	f7fe fe23 	bl	800072c <HAL_GetTick>
 8001ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	88fa      	ldrh	r2, [r7, #6]
 8001af2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001afc:	d108      	bne.n	8001b10 <HAL_UART_Transmit+0x82>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d104      	bne.n	8001b10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	e003      	b.n	8001b18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001b20:	e02a      	b.n	8001b78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2180      	movs	r1, #128	; 0x80
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f840 	bl	8001bb2 <UART_WaitOnFlagUntilTimeout>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e036      	b.n	8001baa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	3302      	adds	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	e007      	b.n	8001b6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	3301      	adds	r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1cf      	bne.n	8001b22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2140      	movs	r1, #64	; 0x40
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f810 	bl	8001bb2 <UART_WaitOnFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e006      	b.n	8001baa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bc2:	e02c      	b.n	8001c1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bca:	d028      	beq.n	8001c1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bd2:	f7fe fdab 	bl	800072c <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d21d      	bcs.n	8001c1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bf0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2220      	movs	r2, #32
 8001c06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e00f      	b.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4013      	ands	r3, r2
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d0c3      	beq.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c82:	f023 030c 	bic.w	r3, r3, #12
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a2c      	ldr	r2, [pc, #176]	; (8001d5c <UART_SetConfig+0x114>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d103      	bne.n	8001cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cb0:	f7ff fbc8 	bl	8001444 <HAL_RCC_GetPCLK2Freq>
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	e002      	b.n	8001cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cb8:	f7ff fbb0 	bl	800141c <HAL_RCC_GetPCLK1Freq>
 8001cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009a      	lsls	r2, r3, #2
 8001cc8:	441a      	add	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <UART_SetConfig+0x118>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	0119      	lsls	r1, r3, #4
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009a      	lsls	r2, r3, #2
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <UART_SetConfig+0x118>)
 8001cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2064      	movs	r0, #100	; 0x64
 8001cfe:	fb00 f303 	mul.w	r3, r0, r3
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	3332      	adds	r3, #50	; 0x32
 8001d08:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <UART_SetConfig+0x118>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d14:	4419      	add	r1, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009a      	lsls	r2, r3, #2
 8001d20:	441a      	add	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <UART_SetConfig+0x118>)
 8001d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2064      	movs	r0, #100	; 0x64
 8001d36:	fb00 f303 	mul.w	r3, r0, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	3332      	adds	r3, #50	; 0x32
 8001d40:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <UART_SetConfig+0x118>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	f003 020f 	and.w	r2, r3, #15
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	440a      	add	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	51eb851f 	.word	0x51eb851f

08001d64 <__errno>:
 8001d64:	4b01      	ldr	r3, [pc, #4]	; (8001d6c <__errno+0x8>)
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	2000000c 	.word	0x2000000c

08001d70 <__libc_init_array>:
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	2600      	movs	r6, #0
 8001d74:	4d0c      	ldr	r5, [pc, #48]	; (8001da8 <__libc_init_array+0x38>)
 8001d76:	4c0d      	ldr	r4, [pc, #52]	; (8001dac <__libc_init_array+0x3c>)
 8001d78:	1b64      	subs	r4, r4, r5
 8001d7a:	10a4      	asrs	r4, r4, #2
 8001d7c:	42a6      	cmp	r6, r4
 8001d7e:	d109      	bne.n	8001d94 <__libc_init_array+0x24>
 8001d80:	f000 fc5c 	bl	800263c <_init>
 8001d84:	2600      	movs	r6, #0
 8001d86:	4d0a      	ldr	r5, [pc, #40]	; (8001db0 <__libc_init_array+0x40>)
 8001d88:	4c0a      	ldr	r4, [pc, #40]	; (8001db4 <__libc_init_array+0x44>)
 8001d8a:	1b64      	subs	r4, r4, r5
 8001d8c:	10a4      	asrs	r4, r4, #2
 8001d8e:	42a6      	cmp	r6, r4
 8001d90:	d105      	bne.n	8001d9e <__libc_init_array+0x2e>
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d98:	4798      	blx	r3
 8001d9a:	3601      	adds	r6, #1
 8001d9c:	e7ee      	b.n	8001d7c <__libc_init_array+0xc>
 8001d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001da2:	4798      	blx	r3
 8001da4:	3601      	adds	r6, #1
 8001da6:	e7f2      	b.n	8001d8e <__libc_init_array+0x1e>
 8001da8:	080026b4 	.word	0x080026b4
 8001dac:	080026b4 	.word	0x080026b4
 8001db0:	080026b4 	.word	0x080026b4
 8001db4:	080026b8 	.word	0x080026b8

08001db8 <memset>:
 8001db8:	4603      	mov	r3, r0
 8001dba:	4402      	add	r2, r0
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d100      	bne.n	8001dc2 <memset+0xa>
 8001dc0:	4770      	bx	lr
 8001dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8001dc6:	e7f9      	b.n	8001dbc <memset+0x4>

08001dc8 <siprintf>:
 8001dc8:	b40e      	push	{r1, r2, r3}
 8001dca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001dce:	b500      	push	{lr}
 8001dd0:	b09c      	sub	sp, #112	; 0x70
 8001dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8001dd4:	9002      	str	r0, [sp, #8]
 8001dd6:	9006      	str	r0, [sp, #24]
 8001dd8:	9107      	str	r1, [sp, #28]
 8001dda:	9104      	str	r1, [sp, #16]
 8001ddc:	4808      	ldr	r0, [pc, #32]	; (8001e00 <siprintf+0x38>)
 8001dde:	4909      	ldr	r1, [pc, #36]	; (8001e04 <siprintf+0x3c>)
 8001de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001de4:	9105      	str	r1, [sp, #20]
 8001de6:	6800      	ldr	r0, [r0, #0]
 8001de8:	a902      	add	r1, sp, #8
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	f000 f868 	bl	8001ec0 <_svfiprintf_r>
 8001df0:	2200      	movs	r2, #0
 8001df2:	9b02      	ldr	r3, [sp, #8]
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	b01c      	add	sp, #112	; 0x70
 8001df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001dfc:	b003      	add	sp, #12
 8001dfe:	4770      	bx	lr
 8001e00:	2000000c 	.word	0x2000000c
 8001e04:	ffff0208 	.word	0xffff0208

08001e08 <__ssputs_r>:
 8001e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e0c:	688e      	ldr	r6, [r1, #8]
 8001e0e:	4682      	mov	sl, r0
 8001e10:	429e      	cmp	r6, r3
 8001e12:	460c      	mov	r4, r1
 8001e14:	4690      	mov	r8, r2
 8001e16:	461f      	mov	r7, r3
 8001e18:	d838      	bhi.n	8001e8c <__ssputs_r+0x84>
 8001e1a:	898a      	ldrh	r2, [r1, #12]
 8001e1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e20:	d032      	beq.n	8001e88 <__ssputs_r+0x80>
 8001e22:	6825      	ldr	r5, [r4, #0]
 8001e24:	6909      	ldr	r1, [r1, #16]
 8001e26:	3301      	adds	r3, #1
 8001e28:	eba5 0901 	sub.w	r9, r5, r1
 8001e2c:	6965      	ldr	r5, [r4, #20]
 8001e2e:	444b      	add	r3, r9
 8001e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e38:	106d      	asrs	r5, r5, #1
 8001e3a:	429d      	cmp	r5, r3
 8001e3c:	bf38      	it	cc
 8001e3e:	461d      	movcc	r5, r3
 8001e40:	0553      	lsls	r3, r2, #21
 8001e42:	d531      	bpl.n	8001ea8 <__ssputs_r+0xa0>
 8001e44:	4629      	mov	r1, r5
 8001e46:	f000 fb53 	bl	80024f0 <_malloc_r>
 8001e4a:	4606      	mov	r6, r0
 8001e4c:	b950      	cbnz	r0, 8001e64 <__ssputs_r+0x5c>
 8001e4e:	230c      	movs	r3, #12
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f8ca 3000 	str.w	r3, [sl]
 8001e58:	89a3      	ldrh	r3, [r4, #12]
 8001e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e5e:	81a3      	strh	r3, [r4, #12]
 8001e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e64:	464a      	mov	r2, r9
 8001e66:	6921      	ldr	r1, [r4, #16]
 8001e68:	f000 face 	bl	8002408 <memcpy>
 8001e6c:	89a3      	ldrh	r3, [r4, #12]
 8001e6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e76:	81a3      	strh	r3, [r4, #12]
 8001e78:	6126      	str	r6, [r4, #16]
 8001e7a:	444e      	add	r6, r9
 8001e7c:	6026      	str	r6, [r4, #0]
 8001e7e:	463e      	mov	r6, r7
 8001e80:	6165      	str	r5, [r4, #20]
 8001e82:	eba5 0509 	sub.w	r5, r5, r9
 8001e86:	60a5      	str	r5, [r4, #8]
 8001e88:	42be      	cmp	r6, r7
 8001e8a:	d900      	bls.n	8001e8e <__ssputs_r+0x86>
 8001e8c:	463e      	mov	r6, r7
 8001e8e:	4632      	mov	r2, r6
 8001e90:	4641      	mov	r1, r8
 8001e92:	6820      	ldr	r0, [r4, #0]
 8001e94:	f000 fac6 	bl	8002424 <memmove>
 8001e98:	68a3      	ldr	r3, [r4, #8]
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	1b9b      	subs	r3, r3, r6
 8001e9e:	4432      	add	r2, r6
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	60a3      	str	r3, [r4, #8]
 8001ea4:	6022      	str	r2, [r4, #0]
 8001ea6:	e7db      	b.n	8001e60 <__ssputs_r+0x58>
 8001ea8:	462a      	mov	r2, r5
 8001eaa:	f000 fb7b 	bl	80025a4 <_realloc_r>
 8001eae:	4606      	mov	r6, r0
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d1e1      	bne.n	8001e78 <__ssputs_r+0x70>
 8001eb4:	4650      	mov	r0, sl
 8001eb6:	6921      	ldr	r1, [r4, #16]
 8001eb8:	f000 face 	bl	8002458 <_free_r>
 8001ebc:	e7c7      	b.n	8001e4e <__ssputs_r+0x46>
	...

08001ec0 <_svfiprintf_r>:
 8001ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec4:	4698      	mov	r8, r3
 8001ec6:	898b      	ldrh	r3, [r1, #12]
 8001ec8:	4607      	mov	r7, r0
 8001eca:	061b      	lsls	r3, r3, #24
 8001ecc:	460d      	mov	r5, r1
 8001ece:	4614      	mov	r4, r2
 8001ed0:	b09d      	sub	sp, #116	; 0x74
 8001ed2:	d50e      	bpl.n	8001ef2 <_svfiprintf_r+0x32>
 8001ed4:	690b      	ldr	r3, [r1, #16]
 8001ed6:	b963      	cbnz	r3, 8001ef2 <_svfiprintf_r+0x32>
 8001ed8:	2140      	movs	r1, #64	; 0x40
 8001eda:	f000 fb09 	bl	80024f0 <_malloc_r>
 8001ede:	6028      	str	r0, [r5, #0]
 8001ee0:	6128      	str	r0, [r5, #16]
 8001ee2:	b920      	cbnz	r0, 8001eee <_svfiprintf_r+0x2e>
 8001ee4:	230c      	movs	r3, #12
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	e0d1      	b.n	8002092 <_svfiprintf_r+0x1d2>
 8001eee:	2340      	movs	r3, #64	; 0x40
 8001ef0:	616b      	str	r3, [r5, #20]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001efc:	2330      	movs	r3, #48	; 0x30
 8001efe:	f04f 0901 	mov.w	r9, #1
 8001f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80020ac <_svfiprintf_r+0x1ec>
 8001f0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f0e:	4623      	mov	r3, r4
 8001f10:	469a      	mov	sl, r3
 8001f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f16:	b10a      	cbz	r2, 8001f1c <_svfiprintf_r+0x5c>
 8001f18:	2a25      	cmp	r2, #37	; 0x25
 8001f1a:	d1f9      	bne.n	8001f10 <_svfiprintf_r+0x50>
 8001f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8001f20:	d00b      	beq.n	8001f3a <_svfiprintf_r+0x7a>
 8001f22:	465b      	mov	r3, fp
 8001f24:	4622      	mov	r2, r4
 8001f26:	4629      	mov	r1, r5
 8001f28:	4638      	mov	r0, r7
 8001f2a:	f7ff ff6d 	bl	8001e08 <__ssputs_r>
 8001f2e:	3001      	adds	r0, #1
 8001f30:	f000 80aa 	beq.w	8002088 <_svfiprintf_r+0x1c8>
 8001f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f36:	445a      	add	r2, fp
 8001f38:	9209      	str	r2, [sp, #36]	; 0x24
 8001f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80a2 	beq.w	8002088 <_svfiprintf_r+0x1c8>
 8001f44:	2300      	movs	r3, #0
 8001f46:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f4e:	f10a 0a01 	add.w	sl, sl, #1
 8001f52:	9304      	str	r3, [sp, #16]
 8001f54:	9307      	str	r3, [sp, #28]
 8001f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8001f5c:	4654      	mov	r4, sl
 8001f5e:	2205      	movs	r2, #5
 8001f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f64:	4851      	ldr	r0, [pc, #324]	; (80020ac <_svfiprintf_r+0x1ec>)
 8001f66:	f000 fa41 	bl	80023ec <memchr>
 8001f6a:	9a04      	ldr	r2, [sp, #16]
 8001f6c:	b9d8      	cbnz	r0, 8001fa6 <_svfiprintf_r+0xe6>
 8001f6e:	06d0      	lsls	r0, r2, #27
 8001f70:	bf44      	itt	mi
 8001f72:	2320      	movmi	r3, #32
 8001f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f78:	0711      	lsls	r1, r2, #28
 8001f7a:	bf44      	itt	mi
 8001f7c:	232b      	movmi	r3, #43	; 0x2b
 8001f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f82:	f89a 3000 	ldrb.w	r3, [sl]
 8001f86:	2b2a      	cmp	r3, #42	; 0x2a
 8001f88:	d015      	beq.n	8001fb6 <_svfiprintf_r+0xf6>
 8001f8a:	4654      	mov	r4, sl
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f04f 0c0a 	mov.w	ip, #10
 8001f92:	9a07      	ldr	r2, [sp, #28]
 8001f94:	4621      	mov	r1, r4
 8001f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f9a:	3b30      	subs	r3, #48	; 0x30
 8001f9c:	2b09      	cmp	r3, #9
 8001f9e:	d94e      	bls.n	800203e <_svfiprintf_r+0x17e>
 8001fa0:	b1b0      	cbz	r0, 8001fd0 <_svfiprintf_r+0x110>
 8001fa2:	9207      	str	r2, [sp, #28]
 8001fa4:	e014      	b.n	8001fd0 <_svfiprintf_r+0x110>
 8001fa6:	eba0 0308 	sub.w	r3, r0, r8
 8001faa:	fa09 f303 	lsl.w	r3, r9, r3
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	46a2      	mov	sl, r4
 8001fb2:	9304      	str	r3, [sp, #16]
 8001fb4:	e7d2      	b.n	8001f5c <_svfiprintf_r+0x9c>
 8001fb6:	9b03      	ldr	r3, [sp, #12]
 8001fb8:	1d19      	adds	r1, r3, #4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	9103      	str	r1, [sp, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bfbb      	ittet	lt
 8001fc2:	425b      	neglt	r3, r3
 8001fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8001fc8:	9307      	strge	r3, [sp, #28]
 8001fca:	9307      	strlt	r3, [sp, #28]
 8001fcc:	bfb8      	it	lt
 8001fce:	9204      	strlt	r2, [sp, #16]
 8001fd0:	7823      	ldrb	r3, [r4, #0]
 8001fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8001fd4:	d10c      	bne.n	8001ff0 <_svfiprintf_r+0x130>
 8001fd6:	7863      	ldrb	r3, [r4, #1]
 8001fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8001fda:	d135      	bne.n	8002048 <_svfiprintf_r+0x188>
 8001fdc:	9b03      	ldr	r3, [sp, #12]
 8001fde:	3402      	adds	r4, #2
 8001fe0:	1d1a      	adds	r2, r3, #4
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	9203      	str	r2, [sp, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bfb8      	it	lt
 8001fea:	f04f 33ff 	movlt.w	r3, #4294967295
 8001fee:	9305      	str	r3, [sp, #20]
 8001ff0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80020bc <_svfiprintf_r+0x1fc>
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	4650      	mov	r0, sl
 8001ff8:	7821      	ldrb	r1, [r4, #0]
 8001ffa:	f000 f9f7 	bl	80023ec <memchr>
 8001ffe:	b140      	cbz	r0, 8002012 <_svfiprintf_r+0x152>
 8002000:	2340      	movs	r3, #64	; 0x40
 8002002:	eba0 000a 	sub.w	r0, r0, sl
 8002006:	fa03 f000 	lsl.w	r0, r3, r0
 800200a:	9b04      	ldr	r3, [sp, #16]
 800200c:	3401      	adds	r4, #1
 800200e:	4303      	orrs	r3, r0
 8002010:	9304      	str	r3, [sp, #16]
 8002012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002016:	2206      	movs	r2, #6
 8002018:	4825      	ldr	r0, [pc, #148]	; (80020b0 <_svfiprintf_r+0x1f0>)
 800201a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800201e:	f000 f9e5 	bl	80023ec <memchr>
 8002022:	2800      	cmp	r0, #0
 8002024:	d038      	beq.n	8002098 <_svfiprintf_r+0x1d8>
 8002026:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <_svfiprintf_r+0x1f4>)
 8002028:	bb1b      	cbnz	r3, 8002072 <_svfiprintf_r+0x1b2>
 800202a:	9b03      	ldr	r3, [sp, #12]
 800202c:	3307      	adds	r3, #7
 800202e:	f023 0307 	bic.w	r3, r3, #7
 8002032:	3308      	adds	r3, #8
 8002034:	9303      	str	r3, [sp, #12]
 8002036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002038:	4433      	add	r3, r6
 800203a:	9309      	str	r3, [sp, #36]	; 0x24
 800203c:	e767      	b.n	8001f0e <_svfiprintf_r+0x4e>
 800203e:	460c      	mov	r4, r1
 8002040:	2001      	movs	r0, #1
 8002042:	fb0c 3202 	mla	r2, ip, r2, r3
 8002046:	e7a5      	b.n	8001f94 <_svfiprintf_r+0xd4>
 8002048:	2300      	movs	r3, #0
 800204a:	f04f 0c0a 	mov.w	ip, #10
 800204e:	4619      	mov	r1, r3
 8002050:	3401      	adds	r4, #1
 8002052:	9305      	str	r3, [sp, #20]
 8002054:	4620      	mov	r0, r4
 8002056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800205a:	3a30      	subs	r2, #48	; 0x30
 800205c:	2a09      	cmp	r2, #9
 800205e:	d903      	bls.n	8002068 <_svfiprintf_r+0x1a8>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0c5      	beq.n	8001ff0 <_svfiprintf_r+0x130>
 8002064:	9105      	str	r1, [sp, #20]
 8002066:	e7c3      	b.n	8001ff0 <_svfiprintf_r+0x130>
 8002068:	4604      	mov	r4, r0
 800206a:	2301      	movs	r3, #1
 800206c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002070:	e7f0      	b.n	8002054 <_svfiprintf_r+0x194>
 8002072:	ab03      	add	r3, sp, #12
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	462a      	mov	r2, r5
 8002078:	4638      	mov	r0, r7
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <_svfiprintf_r+0x1f8>)
 800207c:	a904      	add	r1, sp, #16
 800207e:	f3af 8000 	nop.w
 8002082:	1c42      	adds	r2, r0, #1
 8002084:	4606      	mov	r6, r0
 8002086:	d1d6      	bne.n	8002036 <_svfiprintf_r+0x176>
 8002088:	89ab      	ldrh	r3, [r5, #12]
 800208a:	065b      	lsls	r3, r3, #25
 800208c:	f53f af2c 	bmi.w	8001ee8 <_svfiprintf_r+0x28>
 8002090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002092:	b01d      	add	sp, #116	; 0x74
 8002094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002098:	ab03      	add	r3, sp, #12
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	462a      	mov	r2, r5
 800209e:	4638      	mov	r0, r7
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <_svfiprintf_r+0x1f8>)
 80020a2:	a904      	add	r1, sp, #16
 80020a4:	f000 f87c 	bl	80021a0 <_printf_i>
 80020a8:	e7eb      	b.n	8002082 <_svfiprintf_r+0x1c2>
 80020aa:	bf00      	nop
 80020ac:	08002680 	.word	0x08002680
 80020b0:	0800268a 	.word	0x0800268a
 80020b4:	00000000 	.word	0x00000000
 80020b8:	08001e09 	.word	0x08001e09
 80020bc:	08002686 	.word	0x08002686

080020c0 <_printf_common>:
 80020c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020c4:	4616      	mov	r6, r2
 80020c6:	4699      	mov	r9, r3
 80020c8:	688a      	ldr	r2, [r1, #8]
 80020ca:	690b      	ldr	r3, [r1, #16]
 80020cc:	4607      	mov	r7, r0
 80020ce:	4293      	cmp	r3, r2
 80020d0:	bfb8      	it	lt
 80020d2:	4613      	movlt	r3, r2
 80020d4:	6033      	str	r3, [r6, #0]
 80020d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020da:	460c      	mov	r4, r1
 80020dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020e0:	b10a      	cbz	r2, 80020e6 <_printf_common+0x26>
 80020e2:	3301      	adds	r3, #1
 80020e4:	6033      	str	r3, [r6, #0]
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	0699      	lsls	r1, r3, #26
 80020ea:	bf42      	ittt	mi
 80020ec:	6833      	ldrmi	r3, [r6, #0]
 80020ee:	3302      	addmi	r3, #2
 80020f0:	6033      	strmi	r3, [r6, #0]
 80020f2:	6825      	ldr	r5, [r4, #0]
 80020f4:	f015 0506 	ands.w	r5, r5, #6
 80020f8:	d106      	bne.n	8002108 <_printf_common+0x48>
 80020fa:	f104 0a19 	add.w	sl, r4, #25
 80020fe:	68e3      	ldr	r3, [r4, #12]
 8002100:	6832      	ldr	r2, [r6, #0]
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	42ab      	cmp	r3, r5
 8002106:	dc28      	bgt.n	800215a <_printf_common+0x9a>
 8002108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800210c:	1e13      	subs	r3, r2, #0
 800210e:	6822      	ldr	r2, [r4, #0]
 8002110:	bf18      	it	ne
 8002112:	2301      	movne	r3, #1
 8002114:	0692      	lsls	r2, r2, #26
 8002116:	d42d      	bmi.n	8002174 <_printf_common+0xb4>
 8002118:	4649      	mov	r1, r9
 800211a:	4638      	mov	r0, r7
 800211c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002120:	47c0      	blx	r8
 8002122:	3001      	adds	r0, #1
 8002124:	d020      	beq.n	8002168 <_printf_common+0xa8>
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	68e5      	ldr	r5, [r4, #12]
 800212a:	f003 0306 	and.w	r3, r3, #6
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf18      	it	ne
 8002132:	2500      	movne	r5, #0
 8002134:	6832      	ldr	r2, [r6, #0]
 8002136:	f04f 0600 	mov.w	r6, #0
 800213a:	68a3      	ldr	r3, [r4, #8]
 800213c:	bf08      	it	eq
 800213e:	1aad      	subeq	r5, r5, r2
 8002140:	6922      	ldr	r2, [r4, #16]
 8002142:	bf08      	it	eq
 8002144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002148:	4293      	cmp	r3, r2
 800214a:	bfc4      	itt	gt
 800214c:	1a9b      	subgt	r3, r3, r2
 800214e:	18ed      	addgt	r5, r5, r3
 8002150:	341a      	adds	r4, #26
 8002152:	42b5      	cmp	r5, r6
 8002154:	d11a      	bne.n	800218c <_printf_common+0xcc>
 8002156:	2000      	movs	r0, #0
 8002158:	e008      	b.n	800216c <_printf_common+0xac>
 800215a:	2301      	movs	r3, #1
 800215c:	4652      	mov	r2, sl
 800215e:	4649      	mov	r1, r9
 8002160:	4638      	mov	r0, r7
 8002162:	47c0      	blx	r8
 8002164:	3001      	adds	r0, #1
 8002166:	d103      	bne.n	8002170 <_printf_common+0xb0>
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002170:	3501      	adds	r5, #1
 8002172:	e7c4      	b.n	80020fe <_printf_common+0x3e>
 8002174:	2030      	movs	r0, #48	; 0x30
 8002176:	18e1      	adds	r1, r4, r3
 8002178:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002182:	4422      	add	r2, r4
 8002184:	3302      	adds	r3, #2
 8002186:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800218a:	e7c5      	b.n	8002118 <_printf_common+0x58>
 800218c:	2301      	movs	r3, #1
 800218e:	4622      	mov	r2, r4
 8002190:	4649      	mov	r1, r9
 8002192:	4638      	mov	r0, r7
 8002194:	47c0      	blx	r8
 8002196:	3001      	adds	r0, #1
 8002198:	d0e6      	beq.n	8002168 <_printf_common+0xa8>
 800219a:	3601      	adds	r6, #1
 800219c:	e7d9      	b.n	8002152 <_printf_common+0x92>
	...

080021a0 <_printf_i>:
 80021a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021a4:	460c      	mov	r4, r1
 80021a6:	7e27      	ldrb	r7, [r4, #24]
 80021a8:	4691      	mov	r9, r2
 80021aa:	2f78      	cmp	r7, #120	; 0x78
 80021ac:	4680      	mov	r8, r0
 80021ae:	469a      	mov	sl, r3
 80021b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80021b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021b6:	d807      	bhi.n	80021c8 <_printf_i+0x28>
 80021b8:	2f62      	cmp	r7, #98	; 0x62
 80021ba:	d80a      	bhi.n	80021d2 <_printf_i+0x32>
 80021bc:	2f00      	cmp	r7, #0
 80021be:	f000 80d9 	beq.w	8002374 <_printf_i+0x1d4>
 80021c2:	2f58      	cmp	r7, #88	; 0x58
 80021c4:	f000 80a4 	beq.w	8002310 <_printf_i+0x170>
 80021c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80021cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021d0:	e03a      	b.n	8002248 <_printf_i+0xa8>
 80021d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021d6:	2b15      	cmp	r3, #21
 80021d8:	d8f6      	bhi.n	80021c8 <_printf_i+0x28>
 80021da:	a001      	add	r0, pc, #4	; (adr r0, 80021e0 <_printf_i+0x40>)
 80021dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80021e0:	08002239 	.word	0x08002239
 80021e4:	0800224d 	.word	0x0800224d
 80021e8:	080021c9 	.word	0x080021c9
 80021ec:	080021c9 	.word	0x080021c9
 80021f0:	080021c9 	.word	0x080021c9
 80021f4:	080021c9 	.word	0x080021c9
 80021f8:	0800224d 	.word	0x0800224d
 80021fc:	080021c9 	.word	0x080021c9
 8002200:	080021c9 	.word	0x080021c9
 8002204:	080021c9 	.word	0x080021c9
 8002208:	080021c9 	.word	0x080021c9
 800220c:	0800235b 	.word	0x0800235b
 8002210:	0800227d 	.word	0x0800227d
 8002214:	0800233d 	.word	0x0800233d
 8002218:	080021c9 	.word	0x080021c9
 800221c:	080021c9 	.word	0x080021c9
 8002220:	0800237d 	.word	0x0800237d
 8002224:	080021c9 	.word	0x080021c9
 8002228:	0800227d 	.word	0x0800227d
 800222c:	080021c9 	.word	0x080021c9
 8002230:	080021c9 	.word	0x080021c9
 8002234:	08002345 	.word	0x08002345
 8002238:	680b      	ldr	r3, [r1, #0]
 800223a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800223e:	1d1a      	adds	r2, r3, #4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	600a      	str	r2, [r1, #0]
 8002244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002248:	2301      	movs	r3, #1
 800224a:	e0a4      	b.n	8002396 <_printf_i+0x1f6>
 800224c:	6825      	ldr	r5, [r4, #0]
 800224e:	6808      	ldr	r0, [r1, #0]
 8002250:	062e      	lsls	r6, r5, #24
 8002252:	f100 0304 	add.w	r3, r0, #4
 8002256:	d50a      	bpl.n	800226e <_printf_i+0xce>
 8002258:	6805      	ldr	r5, [r0, #0]
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	2d00      	cmp	r5, #0
 800225e:	da03      	bge.n	8002268 <_printf_i+0xc8>
 8002260:	232d      	movs	r3, #45	; 0x2d
 8002262:	426d      	negs	r5, r5
 8002264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002268:	230a      	movs	r3, #10
 800226a:	485e      	ldr	r0, [pc, #376]	; (80023e4 <_printf_i+0x244>)
 800226c:	e019      	b.n	80022a2 <_printf_i+0x102>
 800226e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002272:	6805      	ldr	r5, [r0, #0]
 8002274:	600b      	str	r3, [r1, #0]
 8002276:	bf18      	it	ne
 8002278:	b22d      	sxthne	r5, r5
 800227a:	e7ef      	b.n	800225c <_printf_i+0xbc>
 800227c:	680b      	ldr	r3, [r1, #0]
 800227e:	6825      	ldr	r5, [r4, #0]
 8002280:	1d18      	adds	r0, r3, #4
 8002282:	6008      	str	r0, [r1, #0]
 8002284:	0628      	lsls	r0, r5, #24
 8002286:	d501      	bpl.n	800228c <_printf_i+0xec>
 8002288:	681d      	ldr	r5, [r3, #0]
 800228a:	e002      	b.n	8002292 <_printf_i+0xf2>
 800228c:	0669      	lsls	r1, r5, #25
 800228e:	d5fb      	bpl.n	8002288 <_printf_i+0xe8>
 8002290:	881d      	ldrh	r5, [r3, #0]
 8002292:	2f6f      	cmp	r7, #111	; 0x6f
 8002294:	bf0c      	ite	eq
 8002296:	2308      	moveq	r3, #8
 8002298:	230a      	movne	r3, #10
 800229a:	4852      	ldr	r0, [pc, #328]	; (80023e4 <_printf_i+0x244>)
 800229c:	2100      	movs	r1, #0
 800229e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022a2:	6866      	ldr	r6, [r4, #4]
 80022a4:	2e00      	cmp	r6, #0
 80022a6:	bfa8      	it	ge
 80022a8:	6821      	ldrge	r1, [r4, #0]
 80022aa:	60a6      	str	r6, [r4, #8]
 80022ac:	bfa4      	itt	ge
 80022ae:	f021 0104 	bicge.w	r1, r1, #4
 80022b2:	6021      	strge	r1, [r4, #0]
 80022b4:	b90d      	cbnz	r5, 80022ba <_printf_i+0x11a>
 80022b6:	2e00      	cmp	r6, #0
 80022b8:	d04d      	beq.n	8002356 <_printf_i+0x1b6>
 80022ba:	4616      	mov	r6, r2
 80022bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80022c0:	fb03 5711 	mls	r7, r3, r1, r5
 80022c4:	5dc7      	ldrb	r7, [r0, r7]
 80022c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022ca:	462f      	mov	r7, r5
 80022cc:	42bb      	cmp	r3, r7
 80022ce:	460d      	mov	r5, r1
 80022d0:	d9f4      	bls.n	80022bc <_printf_i+0x11c>
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d10b      	bne.n	80022ee <_printf_i+0x14e>
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	07df      	lsls	r7, r3, #31
 80022da:	d508      	bpl.n	80022ee <_printf_i+0x14e>
 80022dc:	6923      	ldr	r3, [r4, #16]
 80022de:	6861      	ldr	r1, [r4, #4]
 80022e0:	4299      	cmp	r1, r3
 80022e2:	bfde      	ittt	le
 80022e4:	2330      	movle	r3, #48	; 0x30
 80022e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80022ee:	1b92      	subs	r2, r2, r6
 80022f0:	6122      	str	r2, [r4, #16]
 80022f2:	464b      	mov	r3, r9
 80022f4:	4621      	mov	r1, r4
 80022f6:	4640      	mov	r0, r8
 80022f8:	f8cd a000 	str.w	sl, [sp]
 80022fc:	aa03      	add	r2, sp, #12
 80022fe:	f7ff fedf 	bl	80020c0 <_printf_common>
 8002302:	3001      	adds	r0, #1
 8002304:	d14c      	bne.n	80023a0 <_printf_i+0x200>
 8002306:	f04f 30ff 	mov.w	r0, #4294967295
 800230a:	b004      	add	sp, #16
 800230c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002310:	4834      	ldr	r0, [pc, #208]	; (80023e4 <_printf_i+0x244>)
 8002312:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002316:	680e      	ldr	r6, [r1, #0]
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	f856 5b04 	ldr.w	r5, [r6], #4
 800231e:	061f      	lsls	r7, r3, #24
 8002320:	600e      	str	r6, [r1, #0]
 8002322:	d514      	bpl.n	800234e <_printf_i+0x1ae>
 8002324:	07d9      	lsls	r1, r3, #31
 8002326:	bf44      	itt	mi
 8002328:	f043 0320 	orrmi.w	r3, r3, #32
 800232c:	6023      	strmi	r3, [r4, #0]
 800232e:	b91d      	cbnz	r5, 8002338 <_printf_i+0x198>
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	f023 0320 	bic.w	r3, r3, #32
 8002336:	6023      	str	r3, [r4, #0]
 8002338:	2310      	movs	r3, #16
 800233a:	e7af      	b.n	800229c <_printf_i+0xfc>
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	f043 0320 	orr.w	r3, r3, #32
 8002342:	6023      	str	r3, [r4, #0]
 8002344:	2378      	movs	r3, #120	; 0x78
 8002346:	4828      	ldr	r0, [pc, #160]	; (80023e8 <_printf_i+0x248>)
 8002348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800234c:	e7e3      	b.n	8002316 <_printf_i+0x176>
 800234e:	065e      	lsls	r6, r3, #25
 8002350:	bf48      	it	mi
 8002352:	b2ad      	uxthmi	r5, r5
 8002354:	e7e6      	b.n	8002324 <_printf_i+0x184>
 8002356:	4616      	mov	r6, r2
 8002358:	e7bb      	b.n	80022d2 <_printf_i+0x132>
 800235a:	680b      	ldr	r3, [r1, #0]
 800235c:	6826      	ldr	r6, [r4, #0]
 800235e:	1d1d      	adds	r5, r3, #4
 8002360:	6960      	ldr	r0, [r4, #20]
 8002362:	600d      	str	r5, [r1, #0]
 8002364:	0635      	lsls	r5, r6, #24
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	d501      	bpl.n	800236e <_printf_i+0x1ce>
 800236a:	6018      	str	r0, [r3, #0]
 800236c:	e002      	b.n	8002374 <_printf_i+0x1d4>
 800236e:	0671      	lsls	r1, r6, #25
 8002370:	d5fb      	bpl.n	800236a <_printf_i+0x1ca>
 8002372:	8018      	strh	r0, [r3, #0]
 8002374:	2300      	movs	r3, #0
 8002376:	4616      	mov	r6, r2
 8002378:	6123      	str	r3, [r4, #16]
 800237a:	e7ba      	b.n	80022f2 <_printf_i+0x152>
 800237c:	680b      	ldr	r3, [r1, #0]
 800237e:	1d1a      	adds	r2, r3, #4
 8002380:	600a      	str	r2, [r1, #0]
 8002382:	681e      	ldr	r6, [r3, #0]
 8002384:	2100      	movs	r1, #0
 8002386:	4630      	mov	r0, r6
 8002388:	6862      	ldr	r2, [r4, #4]
 800238a:	f000 f82f 	bl	80023ec <memchr>
 800238e:	b108      	cbz	r0, 8002394 <_printf_i+0x1f4>
 8002390:	1b80      	subs	r0, r0, r6
 8002392:	6060      	str	r0, [r4, #4]
 8002394:	6863      	ldr	r3, [r4, #4]
 8002396:	6123      	str	r3, [r4, #16]
 8002398:	2300      	movs	r3, #0
 800239a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800239e:	e7a8      	b.n	80022f2 <_printf_i+0x152>
 80023a0:	4632      	mov	r2, r6
 80023a2:	4649      	mov	r1, r9
 80023a4:	4640      	mov	r0, r8
 80023a6:	6923      	ldr	r3, [r4, #16]
 80023a8:	47d0      	blx	sl
 80023aa:	3001      	adds	r0, #1
 80023ac:	d0ab      	beq.n	8002306 <_printf_i+0x166>
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	079b      	lsls	r3, r3, #30
 80023b2:	d413      	bmi.n	80023dc <_printf_i+0x23c>
 80023b4:	68e0      	ldr	r0, [r4, #12]
 80023b6:	9b03      	ldr	r3, [sp, #12]
 80023b8:	4298      	cmp	r0, r3
 80023ba:	bfb8      	it	lt
 80023bc:	4618      	movlt	r0, r3
 80023be:	e7a4      	b.n	800230a <_printf_i+0x16a>
 80023c0:	2301      	movs	r3, #1
 80023c2:	4632      	mov	r2, r6
 80023c4:	4649      	mov	r1, r9
 80023c6:	4640      	mov	r0, r8
 80023c8:	47d0      	blx	sl
 80023ca:	3001      	adds	r0, #1
 80023cc:	d09b      	beq.n	8002306 <_printf_i+0x166>
 80023ce:	3501      	adds	r5, #1
 80023d0:	68e3      	ldr	r3, [r4, #12]
 80023d2:	9903      	ldr	r1, [sp, #12]
 80023d4:	1a5b      	subs	r3, r3, r1
 80023d6:	42ab      	cmp	r3, r5
 80023d8:	dcf2      	bgt.n	80023c0 <_printf_i+0x220>
 80023da:	e7eb      	b.n	80023b4 <_printf_i+0x214>
 80023dc:	2500      	movs	r5, #0
 80023de:	f104 0619 	add.w	r6, r4, #25
 80023e2:	e7f5      	b.n	80023d0 <_printf_i+0x230>
 80023e4:	08002691 	.word	0x08002691
 80023e8:	080026a2 	.word	0x080026a2

080023ec <memchr>:
 80023ec:	4603      	mov	r3, r0
 80023ee:	b510      	push	{r4, lr}
 80023f0:	b2c9      	uxtb	r1, r1
 80023f2:	4402      	add	r2, r0
 80023f4:	4293      	cmp	r3, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	d101      	bne.n	80023fe <memchr+0x12>
 80023fa:	2000      	movs	r0, #0
 80023fc:	e003      	b.n	8002406 <memchr+0x1a>
 80023fe:	7804      	ldrb	r4, [r0, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	428c      	cmp	r4, r1
 8002404:	d1f6      	bne.n	80023f4 <memchr+0x8>
 8002406:	bd10      	pop	{r4, pc}

08002408 <memcpy>:
 8002408:	440a      	add	r2, r1
 800240a:	4291      	cmp	r1, r2
 800240c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002410:	d100      	bne.n	8002414 <memcpy+0xc>
 8002412:	4770      	bx	lr
 8002414:	b510      	push	{r4, lr}
 8002416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800241a:	4291      	cmp	r1, r2
 800241c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002420:	d1f9      	bne.n	8002416 <memcpy+0xe>
 8002422:	bd10      	pop	{r4, pc}

08002424 <memmove>:
 8002424:	4288      	cmp	r0, r1
 8002426:	b510      	push	{r4, lr}
 8002428:	eb01 0402 	add.w	r4, r1, r2
 800242c:	d902      	bls.n	8002434 <memmove+0x10>
 800242e:	4284      	cmp	r4, r0
 8002430:	4623      	mov	r3, r4
 8002432:	d807      	bhi.n	8002444 <memmove+0x20>
 8002434:	1e43      	subs	r3, r0, #1
 8002436:	42a1      	cmp	r1, r4
 8002438:	d008      	beq.n	800244c <memmove+0x28>
 800243a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800243e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002442:	e7f8      	b.n	8002436 <memmove+0x12>
 8002444:	4601      	mov	r1, r0
 8002446:	4402      	add	r2, r0
 8002448:	428a      	cmp	r2, r1
 800244a:	d100      	bne.n	800244e <memmove+0x2a>
 800244c:	bd10      	pop	{r4, pc}
 800244e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002456:	e7f7      	b.n	8002448 <memmove+0x24>

08002458 <_free_r>:
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	4605      	mov	r5, r0
 800245c:	2900      	cmp	r1, #0
 800245e:	d043      	beq.n	80024e8 <_free_r+0x90>
 8002460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002464:	1f0c      	subs	r4, r1, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	bfb8      	it	lt
 800246a:	18e4      	addlt	r4, r4, r3
 800246c:	f000 f8d0 	bl	8002610 <__malloc_lock>
 8002470:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <_free_r+0x94>)
 8002472:	6813      	ldr	r3, [r2, #0]
 8002474:	4610      	mov	r0, r2
 8002476:	b933      	cbnz	r3, 8002486 <_free_r+0x2e>
 8002478:	6063      	str	r3, [r4, #4]
 800247a:	6014      	str	r4, [r2, #0]
 800247c:	4628      	mov	r0, r5
 800247e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002482:	f000 b8cb 	b.w	800261c <__malloc_unlock>
 8002486:	42a3      	cmp	r3, r4
 8002488:	d90a      	bls.n	80024a0 <_free_r+0x48>
 800248a:	6821      	ldr	r1, [r4, #0]
 800248c:	1862      	adds	r2, r4, r1
 800248e:	4293      	cmp	r3, r2
 8002490:	bf01      	itttt	eq
 8002492:	681a      	ldreq	r2, [r3, #0]
 8002494:	685b      	ldreq	r3, [r3, #4]
 8002496:	1852      	addeq	r2, r2, r1
 8002498:	6022      	streq	r2, [r4, #0]
 800249a:	6063      	str	r3, [r4, #4]
 800249c:	6004      	str	r4, [r0, #0]
 800249e:	e7ed      	b.n	800247c <_free_r+0x24>
 80024a0:	461a      	mov	r2, r3
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	b10b      	cbz	r3, 80024aa <_free_r+0x52>
 80024a6:	42a3      	cmp	r3, r4
 80024a8:	d9fa      	bls.n	80024a0 <_free_r+0x48>
 80024aa:	6811      	ldr	r1, [r2, #0]
 80024ac:	1850      	adds	r0, r2, r1
 80024ae:	42a0      	cmp	r0, r4
 80024b0:	d10b      	bne.n	80024ca <_free_r+0x72>
 80024b2:	6820      	ldr	r0, [r4, #0]
 80024b4:	4401      	add	r1, r0
 80024b6:	1850      	adds	r0, r2, r1
 80024b8:	4283      	cmp	r3, r0
 80024ba:	6011      	str	r1, [r2, #0]
 80024bc:	d1de      	bne.n	800247c <_free_r+0x24>
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4401      	add	r1, r0
 80024c4:	6011      	str	r1, [r2, #0]
 80024c6:	6053      	str	r3, [r2, #4]
 80024c8:	e7d8      	b.n	800247c <_free_r+0x24>
 80024ca:	d902      	bls.n	80024d2 <_free_r+0x7a>
 80024cc:	230c      	movs	r3, #12
 80024ce:	602b      	str	r3, [r5, #0]
 80024d0:	e7d4      	b.n	800247c <_free_r+0x24>
 80024d2:	6820      	ldr	r0, [r4, #0]
 80024d4:	1821      	adds	r1, r4, r0
 80024d6:	428b      	cmp	r3, r1
 80024d8:	bf01      	itttt	eq
 80024da:	6819      	ldreq	r1, [r3, #0]
 80024dc:	685b      	ldreq	r3, [r3, #4]
 80024de:	1809      	addeq	r1, r1, r0
 80024e0:	6021      	streq	r1, [r4, #0]
 80024e2:	6063      	str	r3, [r4, #4]
 80024e4:	6054      	str	r4, [r2, #4]
 80024e6:	e7c9      	b.n	800247c <_free_r+0x24>
 80024e8:	bd38      	pop	{r3, r4, r5, pc}
 80024ea:	bf00      	nop
 80024ec:	20000090 	.word	0x20000090

080024f0 <_malloc_r>:
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	1ccd      	adds	r5, r1, #3
 80024f4:	f025 0503 	bic.w	r5, r5, #3
 80024f8:	3508      	adds	r5, #8
 80024fa:	2d0c      	cmp	r5, #12
 80024fc:	bf38      	it	cc
 80024fe:	250c      	movcc	r5, #12
 8002500:	2d00      	cmp	r5, #0
 8002502:	4606      	mov	r6, r0
 8002504:	db01      	blt.n	800250a <_malloc_r+0x1a>
 8002506:	42a9      	cmp	r1, r5
 8002508:	d903      	bls.n	8002512 <_malloc_r+0x22>
 800250a:	230c      	movs	r3, #12
 800250c:	6033      	str	r3, [r6, #0]
 800250e:	2000      	movs	r0, #0
 8002510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002512:	f000 f87d 	bl	8002610 <__malloc_lock>
 8002516:	4921      	ldr	r1, [pc, #132]	; (800259c <_malloc_r+0xac>)
 8002518:	680a      	ldr	r2, [r1, #0]
 800251a:	4614      	mov	r4, r2
 800251c:	b99c      	cbnz	r4, 8002546 <_malloc_r+0x56>
 800251e:	4f20      	ldr	r7, [pc, #128]	; (80025a0 <_malloc_r+0xb0>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b923      	cbnz	r3, 800252e <_malloc_r+0x3e>
 8002524:	4621      	mov	r1, r4
 8002526:	4630      	mov	r0, r6
 8002528:	f000 f862 	bl	80025f0 <_sbrk_r>
 800252c:	6038      	str	r0, [r7, #0]
 800252e:	4629      	mov	r1, r5
 8002530:	4630      	mov	r0, r6
 8002532:	f000 f85d 	bl	80025f0 <_sbrk_r>
 8002536:	1c43      	adds	r3, r0, #1
 8002538:	d123      	bne.n	8002582 <_malloc_r+0x92>
 800253a:	230c      	movs	r3, #12
 800253c:	4630      	mov	r0, r6
 800253e:	6033      	str	r3, [r6, #0]
 8002540:	f000 f86c 	bl	800261c <__malloc_unlock>
 8002544:	e7e3      	b.n	800250e <_malloc_r+0x1e>
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	1b5b      	subs	r3, r3, r5
 800254a:	d417      	bmi.n	800257c <_malloc_r+0x8c>
 800254c:	2b0b      	cmp	r3, #11
 800254e:	d903      	bls.n	8002558 <_malloc_r+0x68>
 8002550:	6023      	str	r3, [r4, #0]
 8002552:	441c      	add	r4, r3
 8002554:	6025      	str	r5, [r4, #0]
 8002556:	e004      	b.n	8002562 <_malloc_r+0x72>
 8002558:	6863      	ldr	r3, [r4, #4]
 800255a:	42a2      	cmp	r2, r4
 800255c:	bf0c      	ite	eq
 800255e:	600b      	streq	r3, [r1, #0]
 8002560:	6053      	strne	r3, [r2, #4]
 8002562:	4630      	mov	r0, r6
 8002564:	f000 f85a 	bl	800261c <__malloc_unlock>
 8002568:	f104 000b 	add.w	r0, r4, #11
 800256c:	1d23      	adds	r3, r4, #4
 800256e:	f020 0007 	bic.w	r0, r0, #7
 8002572:	1ac2      	subs	r2, r0, r3
 8002574:	d0cc      	beq.n	8002510 <_malloc_r+0x20>
 8002576:	1a1b      	subs	r3, r3, r0
 8002578:	50a3      	str	r3, [r4, r2]
 800257a:	e7c9      	b.n	8002510 <_malloc_r+0x20>
 800257c:	4622      	mov	r2, r4
 800257e:	6864      	ldr	r4, [r4, #4]
 8002580:	e7cc      	b.n	800251c <_malloc_r+0x2c>
 8002582:	1cc4      	adds	r4, r0, #3
 8002584:	f024 0403 	bic.w	r4, r4, #3
 8002588:	42a0      	cmp	r0, r4
 800258a:	d0e3      	beq.n	8002554 <_malloc_r+0x64>
 800258c:	1a21      	subs	r1, r4, r0
 800258e:	4630      	mov	r0, r6
 8002590:	f000 f82e 	bl	80025f0 <_sbrk_r>
 8002594:	3001      	adds	r0, #1
 8002596:	d1dd      	bne.n	8002554 <_malloc_r+0x64>
 8002598:	e7cf      	b.n	800253a <_malloc_r+0x4a>
 800259a:	bf00      	nop
 800259c:	20000090 	.word	0x20000090
 80025a0:	20000094 	.word	0x20000094

080025a4 <_realloc_r>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	4607      	mov	r7, r0
 80025a8:	4614      	mov	r4, r2
 80025aa:	460e      	mov	r6, r1
 80025ac:	b921      	cbnz	r1, 80025b8 <_realloc_r+0x14>
 80025ae:	4611      	mov	r1, r2
 80025b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80025b4:	f7ff bf9c 	b.w	80024f0 <_malloc_r>
 80025b8:	b922      	cbnz	r2, 80025c4 <_realloc_r+0x20>
 80025ba:	f7ff ff4d 	bl	8002458 <_free_r>
 80025be:	4625      	mov	r5, r4
 80025c0:	4628      	mov	r0, r5
 80025c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025c4:	f000 f830 	bl	8002628 <_malloc_usable_size_r>
 80025c8:	42a0      	cmp	r0, r4
 80025ca:	d20f      	bcs.n	80025ec <_realloc_r+0x48>
 80025cc:	4621      	mov	r1, r4
 80025ce:	4638      	mov	r0, r7
 80025d0:	f7ff ff8e 	bl	80024f0 <_malloc_r>
 80025d4:	4605      	mov	r5, r0
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d0f2      	beq.n	80025c0 <_realloc_r+0x1c>
 80025da:	4631      	mov	r1, r6
 80025dc:	4622      	mov	r2, r4
 80025de:	f7ff ff13 	bl	8002408 <memcpy>
 80025e2:	4631      	mov	r1, r6
 80025e4:	4638      	mov	r0, r7
 80025e6:	f7ff ff37 	bl	8002458 <_free_r>
 80025ea:	e7e9      	b.n	80025c0 <_realloc_r+0x1c>
 80025ec:	4635      	mov	r5, r6
 80025ee:	e7e7      	b.n	80025c0 <_realloc_r+0x1c>

080025f0 <_sbrk_r>:
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	2300      	movs	r3, #0
 80025f4:	4d05      	ldr	r5, [pc, #20]	; (800260c <_sbrk_r+0x1c>)
 80025f6:	4604      	mov	r4, r0
 80025f8:	4608      	mov	r0, r1
 80025fa:	602b      	str	r3, [r5, #0]
 80025fc:	f7fd ffdc 	bl	80005b8 <_sbrk>
 8002600:	1c43      	adds	r3, r0, #1
 8002602:	d102      	bne.n	800260a <_sbrk_r+0x1a>
 8002604:	682b      	ldr	r3, [r5, #0]
 8002606:	b103      	cbz	r3, 800260a <_sbrk_r+0x1a>
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	bd38      	pop	{r3, r4, r5, pc}
 800260c:	20000130 	.word	0x20000130

08002610 <__malloc_lock>:
 8002610:	4801      	ldr	r0, [pc, #4]	; (8002618 <__malloc_lock+0x8>)
 8002612:	f000 b811 	b.w	8002638 <__retarget_lock_acquire_recursive>
 8002616:	bf00      	nop
 8002618:	20000138 	.word	0x20000138

0800261c <__malloc_unlock>:
 800261c:	4801      	ldr	r0, [pc, #4]	; (8002624 <__malloc_unlock+0x8>)
 800261e:	f000 b80c 	b.w	800263a <__retarget_lock_release_recursive>
 8002622:	bf00      	nop
 8002624:	20000138 	.word	0x20000138

08002628 <_malloc_usable_size_r>:
 8002628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800262c:	1f18      	subs	r0, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	bfbc      	itt	lt
 8002632:	580b      	ldrlt	r3, [r1, r0]
 8002634:	18c0      	addlt	r0, r0, r3
 8002636:	4770      	bx	lr

08002638 <__retarget_lock_acquire_recursive>:
 8002638:	4770      	bx	lr

0800263a <__retarget_lock_release_recursive>:
 800263a:	4770      	bx	lr

0800263c <_init>:
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	bf00      	nop
 8002640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002642:	bc08      	pop	{r3}
 8002644:	469e      	mov	lr, r3
 8002646:	4770      	bx	lr

08002648 <_fini>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	bf00      	nop
 800264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264e:	bc08      	pop	{r3}
 8002650:	469e      	mov	lr, r3
 8002652:	4770      	bx	lr
